#+TITLE: Dot profile
#+AUTHOR: Adolfo De Unánue
#+EMAIL:  nanounanue@gmail.com
#+DESCRIPTION: Configuración global para el shell
#+PROPERTY: header-args:shell :tangle ~/.profile :shebang #!/bin/sh :comments org
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js


* Estructura de archivos

Intentando la estructura de archivos =XDG=

Ver [[(https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][la especificación aquí]]

| Variable          | Location             |
| ----------------- | -------------------- |
| =XDG_BIN_HOME=      | =~/.local/bin=         |
| =XDG_CACHE_HOME=    | =~/.cache=             |
| =XDG_CONFIG_HOME=   | =~/.config=            |
| =XDG_DATA_HOME=     | =~/.local/share=       |
| =XDG_LIB_HOME=      | =~/.local/lib=         |

#+BEGIN_SRC shell :tangle no
mkdir -p ~/.local/bin ~/local/lib
#+END_SRC

#+BEGIN_SRC shell :tangle no
export XDG_BIN_HOME=~/.local/bin
export XDG_CACHE_HOME=~/.cache
export XDG_CONFIG_HOME=~/.config
export XDG_DATA_HOME=~/.local/share
export XDG_LIB_HOME=~/.local/lib
#+END_SRC

*NOTA*: =XDG_BIN_HOME= y =XDG_LIB_HOME= no son estándar.


* Paths

Queremos estos directorios, pero sólo si existen

#+BEGIN_SRC shell
OLDPATH=$PATH
PATH=$HOME/bin

for DIR in $HOME/bin /opt/local/bin /opt/local/sbin /usr/local/bin /usr/local/sbin /usr/bin /usr/sbin
do
    if [ -d $DIR ]
    then
        PATH=$PATH:$DIR
    fi
done

PATH=$OLDPATH:$PATH
#+END_SRC

* Environment

#+BEGIN_SRC shell
HISTSIZE=10000
SAVEHIST=$HISTSIZE
#+END_SRC

** Scrolling horizontal

 #+BEGIN_SRC shell
export PAGER=less
export LESS="-iMRSx4 -FX"
 #+END_SRC



** GNU/Emacs

#+BEGIN_SRC shell
export ALTERNATE_EDITOR=emacs
export EDITOR="emacsclient -c"
export VISUAL="emacsclient -c"
#+END_SRC

A veces, si abres Emacs en la terminal, se ve horrible :(, esto lo arregla:

#+BEGIN_SRC shell
export TERM=xterm-256color
#+END_SRC

** i3wm

=i3wm-sensible-terminal= abre el emulador de terminal definido en esta variable

#+BEGIN_SRC sh :tangle no :dir /sudo::
apt install sakura
#+END_SRC


#+BEGIN_SRC shell
export TERMINAL="sakura"
#+END_SRC

** Pyenv

Instalar =pyenv=

#+BEGIN_SRC shell :tangle no
curl https://pyenv.run | bash
#+END_SRC

Inicializar =pyenv=:

#+BEGIN_SRC shell
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
#+END_SRC

Python requiere algunos paquetes para poder ser instalado desde el
código fuente (tomado de [[https://github.com/pyenv/pyenv/wiki/Common-build-problems][aquí]]):

#+BEGIN_SRC sh :tangle no :dir /sudo::
apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
#+END_SRC


Y luego instalamos algunas versiones de python


#+BEGIN_SRC shell :tangle no
pyenv install 3.6.8 && \
pyenv global 3.6.8
#+END_SRC


Para crear un ambiente virtual:

#+BEGIN_SRC shell:tangle no
pyenv virtualenv $NAME
#+END_SRC

Para activarlo/desactivarlo manualmente

#+BEGIN_SRC shell:tangle no
pyenv activate $NAME
pyenv deactivate $NAME
#+END_SRC

o para activarlo de manera automática en un directorio:

#+BEGIN_SRC shell:tangle no
echo $NAME > .python-version
#+END_SRC

** Poetry

=poetry= debe de instalarse de manera global de la siguiente manera

#+begin_src shell :tangle no
pyenv shell system
curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
python shell --unset
#+end_src

#+begin_src shell
source ~/.poetry/env
#+end_src

** Fzf

Consulta https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh

#+BEGIN_SRC shell
export FZF_DEFAULT_COMMAND="fd --type file --follow --hidden --exclude .git --color=always"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
#+END_SRC

#+BEGIN_SRC shell
# add support for ctrl+o to open selected file in VS Code
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort' --ansi --layout=reverse --inline-info"
#+END_SRC


#+BEGIN_SRC shell
# Options to fzf command
export FZF_COMPLETION_OPTS='+c -x'

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}
#+END_SRC

#+BEGIN_SRC shell
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
#+END_SRC

* Aliases

#+BEGIN_SRC shell
alias p="cd ~/projects"
alias s="cd ~/software"
alias d="cd ~/dotfiles"
#+END_SRC

** docker

#+begin_src shell
alias dps="docker ps"
#+end_src


** Emacs

 #+BEGIN_SRC shell
alias e="emacsclient -c"
alias ec="emacsclient -c"
alias et="emacsclient -nw"
 #+END_SRC

** SBCL
#+BEGIN_SRC shell
alias sbcl="rlwrap sbcl"
#+END_SRC

** SSH Tunneling 

*** CMU bastión

  #+BEGIN_SRC shell
  alias cmu-up='ssh -fNTM cmu-tunnel'
  alias cmu-status='ssh -TO check cmu-tunnel'
  alias cmu-down='ssh -TO exit cmu-tunnel'
  #+END_SRC

*** ITAM bastión
#+begin_src shell
  alias itam-up='ssh -fNTML itam-tunnel'
  alias itam-status='ssh -TO check itam-tunnel'
  alias itam-down='ssh -TO exit itam-tunnel'
#+end_src

*** CCD bastión

#+begin_src shell
  alias ccd-up='ssh -fNTML ccd-tunnel'
  alias ccd-status='ssh -TO check ccd-tunnel'
  alias ccd-down='ssh -TO exit ccd-tunnel'
#+end_src

** CLI

#+BEGIN_SRC shell
alias cat="bat"
alias top="sudo htop"
alias preview="fzf --preview 'bat --color \"always\" {}'"
alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"
#+END_SRC

** /suffix aliases/

Esto es específico de =zsh=, indica con qué aplicación abrir los
archivos con extensión (por el momento, todo en =emacs=)

#+begin_src shell
alias -s org=ec
alias -s md=ec
alias -s json=ec
alias -s {py,rb,lisp,clj}=ec
#+end_src


* Funciones



