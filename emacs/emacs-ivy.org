#+TITLE: Ivy, Counsel y Swiper
#+AUTHOR: Adolfo De Unánue
#+EMAIL: nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/elisp/setup-ivy.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

* Links de interés
- [[https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/][From helm to ivy]]
- [[http://oremacs.com/2015/04/16/ivy-mode/][Descripción de ivy]]
- [[https://truthseekers.io/lessons/how-to-use-ivy-swiper-counsel-in-emacs-for-noobs/][How to use ivy swiper counsel in emacs for noobs]]
- [[https://emacs.stackexchange.com/a/37307/10848][Find and replace a text among the files of a project]]

* smex, un reemplazo de =M-x=

Un /smart/ =M-x=. Sugiere los comandos de =M-x=  basados  en frecuencia y recién uso.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :commands (smex smex-major-mode-commands)
  :config
  (smex-initialize))
#+END_SRC


* Ivy

Sistema genérico de completado. Reemplaza a =ido=

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :delight
    :after ivy-rich
    :diminish ivy-mode
    :bind (("C-x b" . ivy-switch-buffer)
            ("C-x B" . ivy-switch-buffer-other-window)
            ("<f6>"   . ivy-resume)
            :map ivy-minibuffer-map
            ("<tab>" . ivy-alt-done)
            ("C-i" . ivy-partial-or-done)
            ("S-SPC" . nil)
            :map ivy-switch-buffer-map
            ("C-k" . ivy-switch-buffer-kill))
   :custom
    (ivy-height 10)
    (ivy-wrap t)
    (ivy-case-fold-search-default t)
    (ivy-count-format "(%d/%d) ")
    (ivy-re-builders-alist '((t . ivy--regex-plus)))
    (ivy-fixed-height-minibuffer t)
    (projectile-completition-system 'ivy)
    (ivy-initial-inputs-alist nil)                   ; don't use ^ as initial input
    (ivy-use-virtual-buffers nil)                    ; dont' show recent files in switch-buffer
    (ivy-format-function #'ivy-format-function-line) ; highlight til EOL
    (ivy-virtual-abbreviate 'full)                   ; show full path if showing virtual buffer
    (ivy-magic-slash-non-match-action nil)           ; disable magic slash on non-match
    (ivy-on-del-error-function nil)                  ; don't quit minibuffer on delete-error
    (ivy-use-selectable-prompt t)                    ; allow input prompt value to be selectable
    :config
    ;;set action options during execution of counsel-find-file
    ;; replace "frame" with window to open in new window
    (ivy-set-actions
     'counsel-find-file
     '(("j" find-file-other-frame "other frame")
       ("b" counsel-find-file-cd-bookmark-action "cd bookmark")
       ("x" counsel-find-file-extern "open externally")
       ("d" delete-file "delete")
       ("r" counsel-find-file-as-root "open as root")))

    ;; set actions when running C-x b
    ;; replace "frame" with window to open in new window
    (ivy-set-actions
     'ivy-switch-buffer
     '(("j" switch-to-buffer-other-frame "other frame")
       ("k" kill-buffer "kill")
       ("r" ivy--rename-buffer-action "rename")))

      (ivy-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy-pass
  :after ivy
  :commands ivy-pass)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :preface
  (defun ivy-rich-branch-candidate (candidate)
    "Displays the branch candidate of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (format "%s%s"
                (propertize
                 (replace-regexp-in-string abbreviated-home-dir "~/"
                                           (file-name-directory
                                            (directory-file-name candidate)))
                 'face 'font-lock-doc-face)
                (propertize
                 (file-name-nondirectory
                  (directory-file-name candidate))
                 'face 'success)))))

  (defun ivy-rich-compiling (candidate)
    "Displays compiling buffers of the candidate for ivy-rich."
    (let* ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate)
              (not (magit-git-repo-p candidate)))
          ""
        (if (nanounanue/projectile-compilation-buffers candidate)
            "compiling"
          ""))))

  (defun ivy-rich-file-group (candidate)
    "Displays the file group of the candidate for ivy-rich"
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (let* ((group-id (file-attribute-group-id (file-attributes candidate)))
               (group-function (if (fboundp #'group-name) #'group-name #'identity))
               (group-name (funcall group-function group-id)))
          (format "%s" group-name)))))

  (defun ivy-rich-file-modes (candidate)
    "Displays the file mode of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (format "%s" (file-attribute-modes (file-attributes candidate))))))

  (defun ivy-rich-file-size (candidate)
    "Displays the file size of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (let ((size (file-attribute-size (file-attributes candidate))))
          (cond
           ((> size 1000000) (format "%.1fM " (/ size 1000000.0)))
           ((> size 1000) (format "%.1fk " (/ size 1000.0)))
           (t (format "%d " size)))))))

  (defun ivy-rich-file-user (candidate)
    "Displays the file user of the candidate for ivy-rich."
    (let ((candidate (expand-file-name candidate ivy--directory)))
      (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
          ""
        (let* ((user-id (file-attribute-user-id (file-attributes candidate)))
               (user-name (user-login-name user-id)))
          (format "%s" user-name)))))

  (defun ivy-rich-switch-buffer-icon (candidate)
    "Returns an icon for the candidate out of `all-the-icons'."
    (with-current-buffer
        (get-buffer candidate)
      (let ((icon (all-the-icons-icon-for-mode major-mode :height 0.9)))
        (if (symbolp icon)
            (all-the-icons-icon-for-mode 'fundamental-mode :height 0.9)
          icon))))
  :config
  (plist-put ivy-rich-display-transformers-list
             'counsel-find-file
             '(:columns
               ((ivy-rich-candidate               (:width 73))
                (ivy-rich-file-user               (:width 8 :face font-lock-doc-face))
                (ivy-rich-file-group              (:width 4 :face font-lock-doc-face))
                (ivy-rich-file-modes              (:width 11 :face font-lock-doc-face))
                (ivy-rich-file-size               (:width 7 :face font-lock-doc-face))
                (ivy-rich-file-last-modified-time (:width 30 :face font-lock-doc-face)))))
  (plist-put ivy-rich-display-transformers-list
             'counsel-projectile-switch-project
             '(:columns
               ((ivy-rich-branch-candidate        (:width 80))
                (ivy-rich-compiling))))
  (plist-put ivy-rich-display-transformers-list
             'ivy-switch-buffer
             '(:columns
               ((ivy-rich-switch-buffer-icon       (:width 2))
                (ivy-rich-candidate                (:width 40))
                (ivy-rich-switch-buffer-size       (:width 7))
                (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                (ivy-rich-switch-buffer-major-mode (:width 20 :face warning)))
               :predicate (lambda (cand) (get-buffer cand))))
  (ivy-rich-mode 1))
#+END_SRC

** [[https://github.com/vspinu/imenu-anywhere][/Bookmarks/ a la carta]]

#+BEGIN_SRC emacs-lisp
(use-package imenu-anywhere
  :bind
  ("M-i" . ivy-imenu-anywhere))
#+END_SRC

** Pegar con yasnippet

#+BEGIN_SRC emacs-lisp :tangle no
(use-package ivy-yasnippet :after yasnippet)
#+END_SRC

* Counsel

Colección de comandos de emacs mejorados por =ivy=

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :after ivy
  :demand t
  :delight
  :bind (("C-x C-d" . counsel-dired-jump)
         ("C-x C-h" . counsel-minibuffer-history)
         ("C-x C-r" . counsel-recentf)
         ("C-x C-u" . counsel-unicode-char)
         ("C-x C-f" . counsel-find-file)
         ("M-x"     . counsel-M-x)
         ("<f1> f"  . counsel-describe-function)
         ("<f1> v"  . counsel-describe-variable)
         ("<f1> l"  . counsel-find-library)
         ("<f2> i"  . counsel-info-lookup-symbol)
         ("<f2> u"  . counsel-unicode-char)
         ("C-c g"   . counsel-git)
         ("C-c j"   . counsel-git-grep)
         ("C-c k"   . counsel-ag) ;; add counsel/ivy features to ag package
         ("C-x l"   . counsel-locate)
         ("C-S-o"   . counsel-rhythmbox)
         ("C-x C-v" . counsel-set-variable))
  :config (counsel-mode)
  :custom (counsel-rg-base-command "rg -S -M 150 --no-heading --line-number --color never %s")
  )
#+END_SRC

* Swiper

La versión mejorada de =isearch= por =ivy=

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :after ivy
    :demand t
    :config
    (setq swiper-faces '(swiper-match-face-1
                         swiper-match-face-2
                         swiper-match-face-2
                         swiper-match-face-2))
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           :map swiper-map
           ("M-%" . swiper-query-replace)))
#+END_SRC



* Prescient

#+begin_quote
Package `prescient' is a library for intelligent sorting and
filtering in various contexts.
#+end_quote

#+begin_src emacs-lisp
(use-package prescient
  :demand t
  :config
  ;; Remember usage statistics across Emacs sessions.
  (prescient-persist-mode +1))

;; Package `ivy-prescient' provides intelligent sorting and filtering
;; for candidates in Ivy menus.
(use-package ivy-prescient
  :demand t
  :after ivy
  :config
  ;; Use `prescient' for Ivy menus.
  (ivy-prescient-mode +1))
#+end_src

* Al final

#+BEGIN_SRC emacs-lisp
(provide 'setup-ivy)
#+END_SRC
