#+TITLE: Configuración de Org Mode
#+AUTHOR: Adolfo De Unánue
#+EMAIL: nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/elisp/setup-org-mode.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+TAGS: emacs

* Links de interes
- [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to Literate Programming]] [Howard Abrams]
- [[https://github.com/nickanderson/Level-up-your-notes-with-Org][Level up your notes with Org]] [Nick Anderson] (Aunque orientado a /spacemacs/
- [[http://sachachua.com/blog/2014/01/tips-learning-org-mode-emacs/][Some tips for learning Org Mode for Emacs]] [Sacha Chua]
- [[https://www.youtube.com/playlist?list=PLVtKhBrRV%255FZkPnBtt%255FTD1Cs9PJlU0IIdE][OrgMode Tutorial video series]] [Rainer König]

* /Hacks/

Al actualizar a =org-mode= *9.2* existen [[https://emacs.stackexchange.com/questions/49055/org-mode-9-2can-t-find-the-error-on-my-dot-emacs#49056][conflictos]] en la creación de
bloques.

Para recuperar la funcionalidad anterior, usamos el siguiente código
(tomado de [[https://emacs.stackexchange.com/questions/46795/is-it-possible-to-add-templates-other-than-begin-end-to-org-structure-temp/48974#48974][aquí]]):

#+BEGIN_SRC emacs-lisp
(defvar org-structure-template-alist)

(defun org+-avoid-old-structure-templates (fun &rest args)
  "Call FUN with ARGS with modified `org-structure-template-alist'.
Use a copy of `org-structure-template-alist' with all
old structure templates removed."
  (let ((org-structure-template-alist
     (cl-remove-if
      (lambda (template)
        (null (stringp (cdr template))))
      org-structure-template-alist)))
    (apply fun args)))

(eval-after-load "org"
  '(when (version<= "9.2" (org-version))
     (defun org-try-structure-completion ()
       "Try to complete a structure template before point.
This looks for strings like \"<e\" on an otherwise empty line and
expands them."
       (let ((l (buffer-substring (point-at-bol) (point)))
         a)
     (when (and (looking-at "[ \t]*$")
            (string-match "^[ \t]*<\\([a-zA-Z]+\\)$" l)
            (setq a (assoc (match-string 1 l) org-structure-template-alist))
            (null (stringp (cdr a))))
       (org-complete-expand-structure-template (+ -1 (point-at-bol)
                              (match-beginning 1)) a)
       t)))

     (defun org-complete-expand-structure-template (start cell)
       "Expand a structure template."
       (let ((rpl (nth 1 cell))
         (ind ""))
     (delete-region start (point))
     (when (string-match "\\`[ \t]*#\\+" rpl)
       (cond
        ((bolp))
        ((not (string-match "\\S-" (buffer-substring (point-at-bol) (point))))
         (setq ind (buffer-substring (point-at-bol) (point))))
        (t (newline))))
     (setq start (point))
     (when (string-match "%file" rpl)
       (setq rpl (replace-match
              (concat
               "\""
               (save-match-data
             (abbreviate-file-name (read-file-name "Include file: ")))
               "\"")
              t t rpl)))
     (setq rpl (mapconcat 'identity (split-string rpl "\n")
                  (concat "\n" ind)))
     (insert rpl)
     (when (re-search-backward "\\?" start t) (delete-char 1))))

     (advice-add 'org-tempo-add-templates :around #'org+-avoid-old-structure-templates)

     (add-hook 'org-tab-after-check-for-cycling-hook #'org-try-structure-completion)

     (require 'org-tempo)
     ))
#+END_SRC

* Funciones de soporte

#+BEGIN_SRC emacs-lisp
  (defun nanounanue/org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

#+END_SRC

Las siguientes funciones fueron tomadas de [[https://emacs.stackexchange.com/a/29472/10848][aquí]]

#+BEGIN_SRC emacs-lisp

(defun nanounanue/export-tangle ()
  "Shortcut for exporting and tangling the current org-mode buffer."
  (interactive)
  (org-html-export-to-html)
  (org-babel-tangle))


(defun nanounanue/export-tangle-file (filepath)
  "Shortcut for exporting and tangling the org-mode file at `filepath'."
  (find-file (expand-file-name filepath))
  (org-html-export-to-html)
  (org-babel-tangle)
  (kill-buffer))
#+END_SRC

* Dependencias

*NOTA* Para [[https://github.com/corpix/ob-blockdiag.el][ob-blockdiag]] es necesario ejecutar lo siguiente:

#+BEGIN_SRC shell
pip install blockdiag seqdiag actdiag nwdiag
#+END_SRC

El formato se puede consultar en la página de [[http://blockdiag.com/en/][blockdiag]].

*NOTA* Para [[https://github.com/krisajenkins/ob-browser][ob-browser]]  es necesario tener =phantomjs=:

#+BEGIN_SRC shell :dir /sudo::
apt install -y phantomjs
#+END_SRC

Esto también lo vamos a ocupar

#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :mode ("\\.restclient\\'" . restclient-mode))

  (use-package company-restclient
    :ensure t
    :config (add-to-list 'company-backends 'company-restclient))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'ob-emacs-lisp)

(use-package ob-ditaa
  :ensure nil
  :custom
  (org-ditaa-jar-path "~/software/org-libs/ditaa.jar"))

(use-package ob-plantuml
  :ensure nil
  :custom
  (org-plantuml-jar-path "~/software/org-libs/plantuml.jar"))

(use-package ob-http
  :ensure t
  :config
  (require 'ob-http))

(use-package ob-async
  :ensure t
  :config
  (require 'ob-async))

;;(quelpa-use-package-activate-advice)

(use-package jupyter
  :ensure t
  :quelpa ((jupyter :fetcher github :repo "dzop/emacs-jupyter") :upgrade t))

(use-package ob-cypher
  :ensure t
  :config
  (require 'ob-cypher))

(use-package ob-sql-mode
  :ensure t
  :config
  (require 'ob-sql-mode))

(use-package ob-prolog
  :ensure t
  :config
  (require 'ob-prolog))

(use-package ob-blockdiag
  :ensure t
  :config
  (require 'ob-blockdiag))

(use-package ob-browser
  :ensure t
  :config
  (require 'ob-browser))

(use-package ob-async
  :ensure t
  :config
  (setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-julia")))

(use-package ob-restclient
  :ensure t)


(use-package ob-latex
  :ensure nil
  :after org
  :custom (org-latex-compiler "xelatex"))

(use-package ob-makefile :ensure nil :after org)
(use-package ob-org :ensure nil :after org)
#+END_SRC



* Org-mode

#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package org
    :ensure org-plus-contrib
    :pin org
    :mode
    ("\\.org\\'" . org-mode)
    ("\\.txt\\'" . org-mode)
    (".*/[0-9]*$" . org-mode)
    :bind
      <<org-mode-keybindings>>
    :custom
      <<org-mode-custom-vars>>
    :custom-face
      <<org-mode-faces>>
    :hook
      <<org-mode-hooks>>
    :config
      <<org-mode-config>>)
#+END_SRC

* Configuración general

Guardo mis archivos =org= en =Dropbox=

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-custom-vars
(org-directory "~/Dropbox/org")
#+END_SRC

Log =DONE= automáticamente en los =TODOs=

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-custom-vars
  (org-log-done 'time)
#+END_SRC

Log /timestamp/ y una *nota* cuando la fecha o el deadline de un /task/ es modificado

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-custom-vars
(org-log-reschedule 'note)
(org-log-redeadline 'note)
#+END_SRC


Log todo en el /drawer/ =LOGBOOK=
#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-custom-vars
(org-log-into-drawer t)
#+END_SRC


Mantener la indentación de los archivos

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-custom-vars
  (org-startup-indented t)
#+END_SRC

No queremos que aparezca en el =modeline=

#+BEGIN_SRC emacs-lisp
  (use-package org-indent
    :ensure nil
    :diminish)
#+END_SRC

 =Enter=, sigue el /link/

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-custom-vars
(org-return-follows-link t)
#+END_SRC

** /Key bindings/

La contraparte de =C-c C-l=

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-keybindings
  ("C-c l" . org-store-link)
#+END_SRC

Seleccionar (/mark/)

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-keybindings
  ("M-h" . org-mark-element)
#+END_SRC

capture-refile

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-keybindings
  ("C-c c" . org-capture)
  ("C-c C-w" . org-refile)
#+END_SRC

Otro /key bind/ para la agenda

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-keybindings
  ("C-c a" . org-agenda)
#+END_SRC

/Tangle/
#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-keybindings
("C-c C-v t" . org-babel-tangle)
("C-c C-v f" . org-babel-tangle-file)
#+END_SRC



** /Speed keys/


#+BEGIN_QUOTE
  *Speed Commands:* If point is at the beginning of a headline or
  code block in org-mode, single keys do fun things. See
  =org-speed-command-help= for details (or hit the ? key at a
  headline).
#+END_QUOTE

 Habilitar  [[https://orgmode.org/manual/Speed-keys.html][Speed Keys]]. Por /default/ el cursor tiene que estar al
 principio del /headline/, pero podemos mejorarlo ...

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-custom-vars
  (org-use-speed-commands (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**"))))
#+END_SRC

y luego agregamos unos pocos más

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
  (add-to-list 'org-speed-commands-user (cons "P" 'org-set-property))
  (add-to-list 'org-speed-commands-user (cons "d" 'org-deadline))

  ;; Mark a subtree
  (add-to-list 'org-speed-commands-user (cons "m" 'org-mark-subtree))

  ;; Widen
  (add-to-list 'org-speed-commands-user (cons "S" 'widen))

  ;; kill a subtree
  (add-to-list 'org-speed-commands-user (cons "k" (lambda ()
                                                    (org-mark-subtree)
                                                    (kill-region
                                                     (region-beginning)
                                                     (region-end)))))
#+END_SRC


* Un Org-mode bonito

*NOTE*: Basado en [[http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html][Org as a Word Processor]] y en [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Beautifying Org Mode in Emacs]]

Eliminar el /markup/ de énfasis

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-custom-vars
(org-hide-emphasis-markers t)
#+END_SRC

Mostrar símbolos e.g. α β γ as UTF-8 characters.

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-custom-vars
(org-pretty-entities t)
#+END_SRC

Podemos tener un símbolo de elemento en lista más bonito (en lugar de =-=)

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-hooks
(org-mode . org-display-inline-images)
(org-mode . org-babel-result-hide-all)
;; (org-mode . turn-on-auto-fill)
(org-mode . flyspell-mode)
#+END_SRC

Podemos controlar el tamaño de las imágenes para que no ocupen la
tamaño de la pantalla. El tamaño máximo es de 800px.

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-custom-vars
(org-image-actual-width 800)
#+END_SRC


Hace más grandes las imágenes de ecuaciones de LaTeX cuando tienes
activado en tu org-mode /buffer/ lo siguiente
(Solución tomada desde: https://tex.stackexchange.com/a/78587/24453)
#+BEGIN_SRC org :tangle no
#+OPTIONS: LaTeX:t
#+OPTIONS: tex:imagemagick
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
(plist-put org-format-latex-options :scale 1.5)
#+END_SRC


Los /bullets/ hacen más presentable =org-mode=

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
       :ensure t
       :after org
       :hook
       (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC

Las siguientes fuentes (¿o es tipografías?) se usarán en secuencia:

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
  ;; (let* ((variable-tuple
  ;;         (cond ((x-list-fonts   "Source Sans Pro") '(:font   "Source Sans Pro"))
  ;;               ((x-list-fonts   "Lucida Grande")   '(:font   "Lucida Grande"))
  ;;               ((x-list-fonts   "Verdana")         '(:font   "Verdana"))
  ;;               ((x-family-fonts "Sans Serif")      '(:family "Sans Serif"))
  ;;               (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
  ;;        (base-font-color (face-foreground 'default nil 'default))
  ;;        (headline       `(:inherit default :weight bold :foreground ,base-font-color)))

  ;;   (custom-theme-set-faces
  ;;    'user
  ;;    `(org-level-8        ((t (,@headline ,@variable-tuple))))
  ;;    `(org-level-7        ((t (,@headline ,@variable-tuple))))
  ;;    `(org-level-6        ((t (,@headline ,@variable-tuple))))
  ;;    `(org-level-5        ((t (,@headline ,@variable-tuple))))
  ;;    `(org-level-4        ((t (,@headline ,@variable-tuple :height 1.1))))
  ;;    `(org-level-3        ((t (,@headline ,@variable-tuple :height 1.25))))
  ;;    `(org-level-2        ((t (,@headline ,@variable-tuple :height 1.5))))
  ;;    `(org-level-1        ((t (,@headline ,@variable-tuple :height 1.75))))
  ;;    `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
#+END_SRC

Emacs soporta mostrar fuentes proporcionales con
=variable-pitch-mode=. Y también hay que configurar las fuentes
/monofont/, con =fixed-pitch=

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-faces
;(variable-pitch ((t (:family "Source Sans Pro" ))))
;(fixed-pitch ((t ( :family "Inconsolata" ))))
;(org-indent ((t (:inherit (org-hide fixed-pitch)))))
#+END_SRC


Con fuentes variables, cortar la línea basada en el número de
caracteres se ve /raro/ ...
  #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-hooks
;    (org-mode . visual-line-mode)
;    (org-mode . variable-pitch-mode)
  #+END_SRC

Estos paquetes se agregan al =modeline=, hay que minimizarlos:

  #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
    (eval-after-load 'face-remap '(diminish 'buffer-face-mode))
    (eval-after-load 'simple '(diminish 'visual-line-mode))
  #+END_SRC


Usando =variable-pitch=, el /default right-alignment/ para los /headlines/
ya no funcionan, el siguiente código los hace consistentes.

  #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-custom-vars
    (org-tags-column 0)
  #+END_SRC


* /TODO Keywords/

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
(setq org-todo-keywords '(
                          (;; TODO significa que es algo que tiene que hacerse
                           ;; WORKING significa que estoy trabajando en alla
                           ;; BLOCKED significa que la tarea depende de algo más para hacerse
                           ;; DELEGATED significa que alguien más lo está haciendo y yo tengo que verificar/estar enterado de lo que está haciendo
                           ;; ASSIGNED significa que alguien tiene completa responsabilidad sobre la tarea
                           ;; REVIEW significa que alguien está validando el task
                           ;; CANCELLED significa que ya no es necesario hacerse
                           ;; DONE significa que ha sido completada
                           sequence
                           "TODO(t@/!)"
                           "WORKING(w@/!)"
                           "BLOCKED(b@/!)"
                           "REVIEW(r@/!)"
                           "DELEGATED(e@/!)"
                           "|"
                           "ASSIGNED(.@/!)"
                           "CANCELLED(c@/!)"
                           "DONE(d@/!)")))

(setq org-todo-keyword-faces
      '(("TODO" . "tomato")
        ("WORKING" . "gold2")
        ("REVIEW" . "lavender")
        ("BLOCKED" . "magenta")
        ("CANCELLED" . "dark red")
        ("DELEGATED" . "powder blue")
        ("DONE" . "green")
        ("ASSIGNED" . "sienna")))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
  (font-lock-add-keywords            ; A bit silly but my headers are now
   'org-mode `(("^\\*+ \\(TODO\\) "  ; shorter, and that is nice canceled
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚑")
                          nil)))
               ("^\\*+ \\(WORKING\\) "
                      (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚐")
                                nil)))
               ("^\\*+ \\(CANCELLED\\) "
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘")
                          nil)))
               ("^\\*+ \\(CANCE\\) "
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘")
                          nil)))
               ("^\\*+ \\(DONE\\) "
                (1 (progn (compose-region (match-beginning 1) (match-end 1) "✔")
                          nil)))))
#+END_SRC


* Capture-refile-archive

Si estoy trabajando en algo y quiero anotar algo que se me acaba de
ocurrir o que recordé (me pasa muy seguido), sin que afecte el archivo
en el que estoy trabajando (/capture/)

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
;; Capture
(setq org-capture-templates
      (quote (("t" "TODO    (t)" entry (file "~/Dropbox/org/refile.org")
               "* TODO %?
:PROPERTIES:
:via: %f
:note:
:END:"
               :clock-in t :clock-resume t :empty-lines 1)
              ("s" "Scheduled TODO" entry (file+headline "~/Dropbox/org/refile.org")
               "* TODO %? %^G \nSCHEDULED: %^t\n  %U" :empty-lines 1)
              ("d" "Deadline" entry (file+headline "~/Dropbox/org/refile.org")
               "* TODO %? %^G \n  DEADLINE: %^t" :empty-lines 1)
              ("r" "research" entry (file "~/Dropbox/org/research.org")
               "* %? :IDEA:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "journal" entry (file+olp+datetree "~/Dropbox/org/diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("n" "Note" entry (file "~/Dropbox/org/notes.org")
               "* NOTE %?\n%U" :empty-lines 1)
              ("N" "Note with Clipboard" entry (file "~/Dropbox/org/notes.org")
               "* NOTE %?\n%U\n   %c" :empty-lines 1))))

      ;; Refile
      (setq org-default-notes-file (nanounanue/org-file-path "personal/@SUMMARY.org"))
      (setq org-default-tasks-file (nanounanue/org-file-path "personal/tasks.org"))

      ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
      (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                       (org-agenda-files :maxlevel . 9))))
      ;; Use full outline paths for refile targets
      (setq org-refile-use-outline-path t)

      ;; Allow refile to create parent tasks with confirmatio
      (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

Luego de seleccionar el /template/ adecuado, tecleas la nota, =C-c C-c=
para guardar.

Por último, recuerda hacer =C-c C-w= para /refile/ la nota al lugar correspondiente.


* [[https://github.com/sprig/org-capture-extension][Org protocol]]

** Preparando el sistema operativo para el [[https://addons.mozilla.org/en-US/firefox/addon/org-capture/?src=search][add-on in de firefox]]

Registramos =emacs= como el encargado de manejar las peticiones de la
extensión de Firefox

#+BEGIN_SRC shell
mkdir -p ~/.local/share/applications
#+END_SRC


#+BEGIN_SRC shell :dir ~/.local/share/applications
cat > "org-protocol.desktop" << EOF
[Desktop Entry]
Name=org-protocol
Exec=emacsclient %u
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;
EOF
#+END_SRC

Actualizamos la base de datos de manejadores

#+BEGIN_SRC shell
update-desktop-database ~/.local/share/applications/
#+END_SRC

** Configuración *en* emacs

#+BEGIN_SRC emacs-lisp
(use-package org-protocol
  :ensure nil
  :config
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat
     (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
    )


  (add-to-list 'org-capture-templates
               '("p" "Protocol" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
                 "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?"))

  (add-to-list 'org-capture-templates
               '("L" "Protocol Link" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
                 "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")))
#+END_SRC



* Org agenda

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
  (setq org-agenda-files (list (nanounanue/org-file-path "research.org")
                               (nanounanue/org-file-path "dsapp.org")
                               (nanounanue/org-file-path "proyectos.org")
                               (nanounanue/org-file-path "diary.org")
                               (nanounanue/org-file-path "refile.org")
                               (nanounanue/org-file-path "personal")
                               (nanounanue/org-file-path "research")
                               (nanounanue/org-file-path "projects")
                               ))

  ;; No queremos ver aquello que ya acabó en la agenda
  ;; http://orgmode.org/manual/Global-TODO-list.html#Global-TODO-list
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-timestamp-if-done t)
  (setq org-agenda-todo-ignore-scheduled t)
  (setq org-agenda-todo-ignore-deadlines t)
  (setq org-agenda-todo-ignore-timestamp t)
  (setq org-agenda-todo-ignore-with-date t)
  (setq org-agenda-start-on-weekday nil) ;; start on current day
#+END_SRC


* Org clock


#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
  ;; Org-clock
  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;;
  ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
  (setq org-clock-history-length 23)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  ;; Save clock data and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer t)
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Do not prompt to resume an active clock
  (setq org-clock-persist-query-resume nil)
  ;; Enable auto clock resolution for finding open clocks
  (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  ;; Include current clocking task in clock reports
  (setq org-clock-report-include-clocking-task t)
#+END_SRC


* Exportar

** Imágenes

Puedes controlar la /exportación/ de la imagen
como sigue:

#+BEGIN_SRC org :tangle no
 #+CAPTION: Algúna descripción
 #+ATTR_HTML: :align center :width 100px
 #+ATTR_LATEX: :align center :width 100px
 #+ATTR_ORG :align center :width 100px
#+END_SRC

** HTML

#+BEGIN_SRC emacs-lisp
(use-package ox-html
  :ensure nil
  :init
  (setq org-html-postamble nil)
  (setq org-export-with-section-numbers nil)
  (setq org-export-with-toc nil)
  (setq org-html-head-extra "
          <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700,400italic,700italic&subset=latin,latin-ext' rel='stylesheet' type='text/css'>
          <link href='http://fonts.googleapis.com/css?family=Source+Code+Pro:400,700' rel='stylesheet' type='text/css'>
          <style type='text/css'>
             body {
                font-family: 'Source Sans Pro', sans-serif;
             }
             pre, code {
                font-family: 'Source Code Pro', monospace;
             }
          </style>"))
#+END_SRC


** LaTeX

#+BEGIN_SRC emacs-lisp
  (use-package ox-latex
    :ensure nil
    :demand
    :after org
    :custom
    (org-latex-compiler "xelatex")
    (org-latex-pdf-process '("%latex -shell-escape -interaction nonstopmode -output-directory %o %f" "%latex -interaction nonstopmode -output-directory %o %f" "%latex -interaction nonstopmode -output-directory %o %f"))
    :config
    (setq org-export-latex-listings 'minted)
    ;(add-to-list 'org-latex-minted-langs '(jupyter "python"))
    (setq org-export-latex-minted-options
          '(("frame" "lines")
            ("fontsize" "\\scriptsize")
            ("linenos" "")
            ))
    (setq org-latex-title-command "")

    (setq org-latex-prefer-user-labels t)

    (setq org-latex-default-packages-alist
          '(("AUTO" "inputenc" t)
            ("" "lmodern" nil)
            ("T1" "fontenc" t)
            ("" "fixltx2e" nil)
            ("" "graphicx" t)
            ("" "longtable" nil)
            ("" "float" nil)
            ("" "wrapfig" nil)
            ("" "rotating" nil)
            ("normalem" "ulem" t)
            ("" "amsmath" t)
            ("" "textcomp" t)
            ("" "marvosym" t)
            ("" "color" t)
            ("" "wasysym" t)
            ("" "amssymb" t)
            ("" "amsmath" t)
            ("version=3" "mhchem" t)
            ("numbers,super,sort&compress" "natbib" nil)
            ("" "natmove" nil)
            ("" "url" nil)
            ("" "minted" nil)
            ("" "listings" nil)
            ("" "underscore" nil)
            ("linktocpage,pdfstartview=FitH,colorlinks,
  linkcolor=blue,anchorcolor=blue,
  citecolor=blue,filecolor=blue,menucolor=blue,urlcolor=blue"
             "hyperref" nil)
            ("" "attachfile" nil)))
    ;; Borra los archivos intermedios al exportar
    (setq org-latex-logfiles-extensions
          '("lof" "lot" "tex=" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb"
            "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"))
    ;; Bloques bonitos
    (setq org-latex-listings 'listings)

    ;; Templates
    (add-to-list 'org-latex-classes
                 '("IEEEtran" "\\documentclass[11pt]{IEEEtran}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                 t)

    (add-to-list 'org-latex-classes
                 '(("tufte-book"
                    "\\documentclass[a4paper, sfsidenotes, justified, notitlepage]{tufte-book}
            \\input{/full/path/to/.templates/tufte-book.tex}"
                    ("\\part{%s}" . "\\part*{%s}")
                    ("\\chapter{%s}" . "\\chapter*{%s}")
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}"))))

    ;; https://github.com/fniessen/refcard-org-beamer
    (add-to-list 'org-latex-classes
                 `("beamer"
                   ,(concat "\\documentclass[presentation]{beamer}\n"
                            "[DEFAULT-PACKAGES]"
                            "[PACKAGES]"
                            "[EXTRA]\n")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

    )


#+END_SRC

Para usar un /template/ agregar al archivo

#+BEGIN_SRC org :tangle no
#+LATEX_CLASS: tufte-book
#+END_SRC


** Pandoc

Para aprovechar [[https://github.com/kawabata/ox-pandoc][ox-pandoc]] es necesario tener una versión reciente de
=pandoc=.


#+BEGIN_SRC shell :dir /sudo::
VERSION=$(curl --silent "https://api.github.com/repos/jgm/pandoc/releases/latest" | jq -r .tag_name) && \
wget  -q -O /tmp/pandoc.deb https://github.com/jgm/pandoc/releases/download/${VERSION}/pandoc-${VERSION}-1-amd64.deb && \
dpkg -i /tmp/pandoc.deb
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ox-pandoc
    :ensure t
    :after org
    :config
    (require 'ox-pandoc))
#+END_SRC


** TWBS

#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :after org
    :ensure t
    :config (require 'ox-twbs))
#+END_SRC


** Github Markdown
#+BEGIN_SRC emacs-lisp
  (use-package ox-gfm
    :ensure t
    :after org
    :config (require 'ox-gfm))
#+END_SRC


** Tufte

#+BEGIN_SRC emacs-lisp
  (use-package ox-tufte
    :ensure t
    :after org
    :config (require 'ox-tufte))
#+END_SRC


** EPUB

#+BEGIN_SRC emacs-lisp
  (use-package ox-epub
    :ensure t
    :after org
    :config (require 'ox-epub))
#+END_SRC


** RST

#+BEGIN_SRC emacs-lisp
  (use-package ox-rst
    :ensure t
    :after org
    :config (require 'ox-rst))
#+END_SRC


** AsciiDoc

#+BEGIN_SRC emacs-lisp
  (use-package ox-asciidoc
    :ensure t
    :after org
    :config (require 'ox-asciidoc))
#+END_SRC


** Clipboard

Necesita =xclip=

#+BEGIN_SRC shell  :dir /sudo::
apt install -y xclip
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ox-clip
    :ensure t
    :after ox)
#+END_SRC


* Presentaciones

** Reveal


[[https://github.com/yjwen/org-reveal][ox-reveal]] para crear slides en *HTML*

#+BEGIN_SRC shell :dir /tmp
wget -O reveal.tar.gz https://github.com/hakimel/reveal.js/archive/3.7.0.tar.gz && \
tar zxf /tmp/reveal.tar.gz -C ~/software/js/revealjs --strip-component 1
#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :disabled t
  :ensure t
  :after org
  :custom
  (org-reveal-mathjax t)
  (org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
                                        ;(org-reveal-root (concat "file://" (getenv "HOME") "/software/js/revealjs"))
  (org-reveal-postamble "Adolfo De Unánue"))
#+END_SRC

Al parecer =ox-reveal= [[https://github.com/yjwen/org-reveal/issues/363#issuecomment-460270780][no está siendo mantenido]], la alternativa
propuesta en el mismo lugar es el [[https://gitlab.com/oer/org-re-reveal][fork]] =org-re-reveal=:

#+begin_src emacs-lisp
(use-package org-re-reveal
  :ensure t
  :config
  (require 'org-re-reveal)
  :custom
  (org-re-reveal-mathjax t)
  (org-re-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
                                        ;(org-reveal-root (concat "file://" (getenv "HOME") "/software/js/revealjs"))
  (org-re-reveal-postamble "Adolfo De Unánue"))
#+end_src


** Tree Slide

   A quick way to display an org-mode file is using [[https://github.com/takaxp/org-tree-slide][org-tree-slide]].

   * org-tree-slide-move-next-tree (C->)
   * org-tree-slide-move-previous-tree (C-<)
   * org-tree-slide-content (C-x s c)


   #+BEGIN_SRC emacs-lisp
     (use-package org-tree-slide
        :ensure t
        :init
        (setq org-tree-slide-skip-outline-level 4)
        (org-tree-slide-simple-profile))
   #+END_SRC


** =org-present=

#+BEGIN_SRC emacs-lisp
  (use-package org-present
    :defer t
    :ensure t
    :after (org)
    :init
    (progn

      (add-hook 'org-present-mode-hook
                (lambda ()
                  (global-linum-mode -1)
                  (org-present-big)
                  (org-display-inline-images)
                  (org-present-hide-cursor)
                  (org-present-read-only)))
      (add-hook 'org-present-mode-quit-hook
                (lambda ()
                  (global-linum-mode -1)
                  (org-present-small)
                  (org-remove-inline-images)
                  (org-present-show-cursor)
                  (org-present-read-write)))))
#+END_SRC

* Table of Contents

#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :after org
  :hook (org-mode . toc-org-enable))
#+END_SRC

* /Literate Programming/

Larga vida al [[http://orgmode.org/worg/org-contrib/babel/intro.html][proyecto Babel]], el cual permite la ejecución de bloques
códigos y /tangle out/ bloques hacia archivos

** Configuración general

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-custom-vars
(org-src-fontify-natively t)   ;; Pretty code blocks
(org-src-tab-acts-natively t)
(org-confirm-babel-evaluate nil)  ;; No quiero que me pregunte, si quiero ejecutar
(org-confirm-elisp-link-function nil)
(org-confirm-shell-link-function nil)
(org-src-preserve-indentation t)
#+END_SRC

Muestra automáticamente las imágenes

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-hooks
  (org-babel-after-execute . org-redisplay-inline-images)
#+END_SRC



** Templates para bloques =org-babel=

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
(add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))

(add-to-list 'org-structure-template-alist
             '("sh" . "src shell"))

(add-to-list 'org-structure-template-alist
             '("py" . "src jupyter-python"))

(add-to-list 'org-structure-template-alist
             '("md" . "src markdown"))

(add-to-list 'org-structure-template-alist
             '("sr" . "src R"))

(add-to-list 'org-structure-template-alist
             '("L" . "src lisp"))

(add-to-list 'org-structure-template-alist
             '("cl" . "src clojure"))
#+END_SRC

** Lenguajes habilitados



#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
(add-to-list 'org-src-lang-modes '("dot" . "graphviz-dot"))


;; Usamos sly
(setq org-babel-lisp-eval-fn 'sly-eval)


(org-babel-do-load-languages 'org-babel-load-languages
                             '((shell      . t)
                               (awk        . t)
                               (sed        . t)
                               (js         . t)
                               (emacs-lisp . t)
                               (lisp       . t)
                               (perl       . t)
                               (R          . t)
                               (scala      . t)
                               (clojure    . t)
                               (latex      . t)
                               (C          . t)
                               (fortran    . t)
                               (stan       . t)
                               (sqlite     . t)
                               (sql        . t)
                               ;; (mongo      . t)
                               (cypher     . t)
                               ;; (redis      . t)
                               (blockdiag  . t)
                               (calc       . t)
                               (python     . t)
                               (ruby       . t)
                               (dot        . t)
                               (css        . t)
                               (plantuml   . t)
                               ;; (yaml       . t)
                               (jupyter    . t)))

;; Org-babel no muestra el stderr
;; http://kitchingroup.cheme.cmu.edu/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks/
(setq org-babel-default-header-args:sh
      '((:prologue . "exec 2>&1") (:epilogue . ":")))



  #+END_SRC


** Algunos /hooks/ que ayudan al /workdlow/

Ejecutar /tangle/ automáticamente al guardar el /buffer/

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-hooks
  ;(org-mode . (lambda () (add-hook 'after-save-hook 'org-babel-tangle
  ;                                 'run-at-end 'only-in-org-mode)))
#+END_SRC

Medimos cuánto tiempo tardó en hacer el /tangle/

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-hooks
  (org-babel-pre-tangle  . (lambda ()
                             (setq nanounanue/pre-tangle-time (current-time))))
  (org-babel-post-tangle . (lambda ()
                             (message "org-babel-tangle took %s"
                                             (format "%.2f seconds"
                                                     (float-time (time-since nanounanue/pre-tangle-time))))))
#+END_SRC

* Imágenes

Habilitando mas tipos de imágenes a desplegar en =org-mode=

#+BEGIN_SRC emacs-lisp :tangle no :noweb-ref org-mode-config
  ;; * Enable pdf and eps images in org-mode
  ;; Suggested on the org-mode maillist by Julian Burgos
  (add-to-list 'image-file-name-extensions "pdf")
  (add-to-list 'image-file-name-extensions "eps")

  (add-to-list 'image-type-file-name-regexps '("\\.eps\\'" . imagemagick))
  (add-to-list 'image-file-name-extensions "eps")
  (add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
  (add-to-list 'image-file-name-extensions "pdf")

  (setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
#+END_SRC

* Misceláneos

** [[https://github.com/gizmomogwai/org-kanban][org-kanban]]

#+BEGIN_SRC emacs-lisp
  (use-package org-kanban
    :ensure t
    :after org)
#+END_SRC

** [[https://github.com/abo-abo/org-download][org-download]]

#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :ensure t
    :after org
    :init
    (require 'org-download)
    :config
    ;; Drag-and-drop to `dired`
    (add-hook 'dired-mode-hook 'org-download-enable))
#+END_SRC

** PDF Tools
[[https://github.com/politza/pdf-tools][
Github page]]

Dependencias:

#+BEGIN_SRC shell :dir /sudo::
apt install -y libpng-dev zlib1g-dev libpoppler-glib-dev libpoppler-private-dev
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package  pdf-tools
    :after org
    :ensure t
    :config
    (add-to-list 'org-file-apps
         '("\\.pdf\\'" . (lambda (file link)
                   (org-pdfview-open link))))
    (add-to-list 'org-file-apps
         '("\\.pdf::\\([[:digit:]]+\\)\\'" . org-pdfview-open))

    (setq ess-pdf-viewer-pref 'emacsclient)
    (pdf-tools-install :no-query))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package pdf-view
  :ensure nil
  :after pdf-tools
  :bind (:map pdf-view-mode-map
              ("C-s" . isearch-forward)
              ("d" . pdf-annot-delete)
              ("h" . pdf-annot-add-highlight-markup-annotation)
              ("t" . pdf-annot-add-text-annotation))
  :custom
  (pdf-view-display-size 'fit-page)
  (pdf-view-resize-factor 1.1)
  (pdf-view-use-unicode-ligther nil))
#+END_SRC


*** Integración con =org-mode=

Para usr este paquete con  =org-mode=:

#+BEGIN_EXAMPLE
[[pdfview:~/Descargas/01688199.pdf::42][PDF Link]]
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package org-pdfview
    :after org
    :ensure t
    :config
    (delete '("\\.pdf\\'" . default) org-file-apps)
    (add-to-list
     'org-file-apps
     '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))
    )
#+END_SRC

** =interleave=

Del sitio [[https://github.com/rudolfochrist/interleave][web]]:

#+BEGIN_QUOTE
Some history, what this is all about

In the past, textbooks were sometimes published as interleaved
editions. That meant, each page was followed by a blank page and
ambitious students/scholars had the ability to take their notes
directly in their copy of the textbook. Newton and Kant were prominent
representatives of this technique [fn:blumbach].

Nowadays textbooks (or lecture material) come in PDF format. Although
almost every PDF Reader has the ability to add some notes to the PDF
itself, it is not as powerful as it could be. This is what this Emacs
minor mode tries to accomplish. It presents your PDF side by side to
an Org Mode buffer with you notes. Narrowing down to just those
passages that are relevant to this particular page in the document
viewer.

In a later step it should be possible to create truly interleaved PDFs of your notes.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package interleave
    :defer t
    :after org
    :bind ("C-x i" . interleave-mode)
    :config
    (setq interleave-split-direction 'horizontal
          interleave-split-lines 20
          interleave-disable-narrowing t))
#+END_SRC



** =org-attach-screenshot=

#+BEGIN_SRC emacs-lisp
(use-package org-attach-screenshot
  :diminish
  :after org
  :bind
  (("C-c S" . org-attach-screenshot)))
#+END_SRC

**  =org-ref=

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :defer t
    :after org
    :init
    (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))

    ;; see org-ref for use of these variables
    (setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
          org-ref-default-bibliography '("~/Dropbox/bibliography/references.bib")
          org-ref-pdf-directory "~/Dropbox/bibliography/bibtex-pdfs/"
          org-latex-prefer-user-labels t
          org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")))
#+END_SRC


** /Pasting/

Si =pandoc= está instalado, podemos copiar código HTML, ponerlo en el
/clipboard/ y convertirlo a =org-mode= antes de /yanking it/ al /buffer/


  #+BEGIN_SRC emacs-lisp
    (defun nanounanue/paste-html-to-org ()
      "Assumes the contents of the system clip/paste-board to be
    HTML, this calls out to `pandoc' to convert it for the org-mode
    format."
      (interactive)
      (let* ((clip (if (eq system-type 'darwin)
                       "pbpaste -Prefer rts"
                     "xclip -out -selection 'clipboard' -t text/html"))
             (format (if (eq mode-name "Org") "org" "markdown"))
             (pandoc (concat "pandoc -f rts -t " format))
             (cmd    (concat clip " | " pandoc))
             (text   (shell-command-to-string cmd)))
        (kill-new text)
        (yank)))
  #+END_SRC

* Proveer

  #+BEGIN_SRC emacs-lisp
    (provide 'setup-org-mode)
  #+END_SRC
