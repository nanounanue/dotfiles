#+TITLE: Configuración de Org Mode
#+AUTHOR: Adolfo De Unánue
#+EMAIL: nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/elisp/setup-org-mode.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+TAGS: emacs


* Links de interes
- [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to Literate Programming]] [Howard Abrams]
- [[https://github.com/nickanderson/Level-up-your-notes-with-Org][Level up your notes with Org]] [Nick Anderson] (Aunque orientado a /spacemacs/
- [[http://sachachua.com/blog/2014/01/tips-learning-org-mode-emacs/][Some tips for learning Org Mode for Emacs]] [Sacha Chua]
- [[https://www.youtube.com/playlist?list=PLVtKhBrRV%255FZkPnBtt%255FTD1Cs9PJlU0IIdE][OrgMode Tutorial video series]] [Rainer König]


* Org-plus-contrib

#+begin_src emacs-lisp
(use-package org-plus-contrib)
#+end_src

* Org-mode

#+begin_src emacs-lisp
  (use-feature org
    :mode
    ("\\.org\\'" . org-mode)
    ("\\.txt\\'" . org-mode)
    (".*/[0-9]*$" . org-mode)
    :bind
    ("C-c l"   . org-store-link)
    ("M-h"     . org-mark-element)
    ("C-c c"   . org-capture)
    ("C-c C-w" . org-regile)
    ("C-c a"   . org-agenda)
    ("C-c C-v t". org-babel-tangle)
    ("C-c C-v f" . org-babel-tangle-file)
    :custom
    (org-directory "~/Sync/org")
    (org-startup-indented t)
    (org-catch-invisible-edits 'smart)
    (org-blank-before-new-entry '((heading . t) (plain-list-item . nil)))
    (org-log-done 'time)
    (org-return-follows-link t)
    (org-list-allow-alphabetical t)  ;; Allow ‘a.’, ‘A.’, ‘a)’ and ‘A) as list elements

    (org-log-reschedule 'note)
    (org-log-redeadline 'note)
    (org-log-into-drawer t)

    (org-special-ctrl-a/e t)

    ;; Aesthetics
    (org-hide-emphasis-markers t)
    (org-pretty-entities t)
    (org-image-actual-width '(400))
    (org-fontify-whole-heading-line t)
    (org-fontify-quote-and-verse-blocks t)
    (org-fontify-done-headline t)
    (org-highlight-latex-and-related '(latex))
    (org-hide-macro-markers t)
    (org-hide-emphasis-markers nil)

    :config
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "▶"))))))

    :hook
    (org-mode . org-display-inline-images)
    (org-after-todo-statistics . org-summary-todo)
    (org-mode . visual-line-mode)
;    (org-mode . visual-fill-column-mode)
    (org-mode . flycheck-mode))
#+end_src

* /Speed keys/

Por /default/ no están habilitados

| Key   | Action                                       |
|-------+----------------------------------------------|
| n,p   | Move to the next/previous visible heading    |
| f, b  | Move to the next/previous same level heading |
| F, B  | Next/previous block                          |
| j     | Goto                                         |
| s     | Toggle narrow to subtree                     |
| k     | Cut subtree                                  |
| w     | Refile                                       |
| @     | Mark subtree                                 |
| \#    | Toggle comment                               |
| I,O   | CLock-in, Clock-out                          |
| :     | Tags command                                 |
| ,     | Set priority                                 |
| 1,2,3 | Priority A,B,C                               |
| e     | Effort                                       |
| E     | Increment effort                             |
| v     | org-agenda                                   |
| \/    | Sparse tree                                  |
| \?    | Speed command help                           |


#+begin_src emacs-lisp
  (use-feature org-speed-keys
    :after org
    :custom
    (org-use-speed-commands
     (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**")))))
#+end_src

* Imágenes

Habilitando mas tipos de imágenes a desplegar en =org-mode=

#+begin_src emacs-lisp
(use-feature org-images
  :after org
  :config
  ;; * Enable pdf and eps images in org-mode
  ;; Suggested on the org-mode maillist by Julian Burgos
  (add-to-list 'image-file-name-extensions "pdf")
  (add-to-list 'image-file-name-extensions "eps")

  (add-to-list 'image-type-file-name-regexps '("\\.eps\\'" . imagemagick))
  (add-to-list 'image-file-name-extensions "eps")
  (add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
  (add-to-list 'image-file-name-extensions "pdf")

  (setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
  )
#+end_src


* Agenda

#+BEGIN_SRC emacs-lisp
  (use-feature org-agenda
    :config
    (setq org-agenda-files (list (nanounanue/org-file-path "research.org")
                                 (nanounanue/org-file-path "dsapp.org")
                                 (nanounanue/org-file-path "proyectos.org")
                                 (nanounanue/org-file-path "diary.org")
                                 (nanounanue/org-file-path "refile.org")
                                 (nanounanue/org-file-path "personal")
                                 (nanounanue/org-file-path "research")
                                 (nanounanue/org-file-path "projects")
                                 ))

    ;; No queremos ver aquello que ya acabó en la agenda
    ;; http://orgmode.org/manual/Global-TODO-list.html#Global-TODO-list
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-agenda-skip-deadline-if-done t)
    (setq org-agenda-skip-timestamp-if-done t)
    (setq org-agenda-todo-ignore-scheduled t)
    (setq org-agenda-todo-ignore-deadlines t)
    (setq org-agenda-todo-ignore-timestamp t)
    (setq org-agenda-todo-ignore-with-date t)
    (setq org-agenda-start-on-weekday nil))
#+END_SRC



** TODOs templates
#+begin_src emacs-lisp
(use-feature org-todos
:after org
:config
(setq org-todo-keywords '(
                          (;; TODO significa que es algo que tiene que hacerse
                           ;; WORKING significa que estoy trabajando en alla
                           ;; BLOCKED significa que la tarea depende de algo más para hacerse
                           ;; DELEGATED significa que alguien más lo está haciendo y yo tengo que verificar/estar enterado de lo que está haciendo
                           ;; ASSIGNED significa que alguien tiene completa responsabilidad sobre la tarea
                           ;; REVIEW significa que alguien está validando el task
                           ;; CANCELLED significa que ya no es necesario hacerse
                           ;; DONE significa que ha sido completada
                           sequence
                           "TODO(t@/!)"
                           "WORKING(w@/!)"
                           "BLOCKED(b@/!)"
                           "REVIEW(r@/!)"
                           "DELEGATED(e@/!)"
                           "|"
                           "ASSIGNED(.@/!)"
                           "CANCELLED(c@/!)"
                           "DONE(d@/!)")))

(setq org-todo-keyword-faces
      '(("TODO" . "tomato")
        ("WORKING" . "gold2")
        ("REVIEW" . "lavender")
        ("BLOCKED" . "magenta")
        ("CANCELLED" . "dark red")
        ("DELEGATED" . "powder blue")
        ("DONE" . "green")
        ("ASSIGNED" . "sienna")))
(font-lock-add-keywords            ; A bit silly but my headers are now
 'org-mode `(("^\\*+ \\(TODO\\) "  ; shorter, and that is nice canceled
              (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚑")
                        nil)))
             ("^\\*+ \\(WORKING\\) "
              (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚐")
                        nil)))
             ("^\\*+ \\(CANCELLED\\) "
              (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘")
                        nil)))
             ("^\\*+ \\(CANCE\\) "
              (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘")
                        nil)))
             ("^\\*+ \\(DONE\\) "
              (1 (progn (compose-region (match-beginning 1) (match-end 1) "✔")
                        nil)))))
)

#+end_src

* Clock


#+BEGIN_SRC emacs-lisp
  (use-feature org-clock
    ;; We have to autoload these functions in order for the below code
    ;; that enables clock persistence without slowing down startup to
    ;; work.
    :commands (org-clock-load org-clock-save)
    :config
    (org-clock-persistence-insinuate)
    ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
    (setq org-clock-history-length 23)
    ;; Resume clocking task on clock-in if the clock is open
    (setq org-clock-in-resume t)
    ;; Separate drawers for clocking and logs
    (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
    ;; Save clock data and state changes and notes in the LOGBOOK drawer
    (setq org-clock-into-drawer t)
    ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
    (setq org-clock-out-remove-zero-time-clocks t)
    ;; Clock out when moving task to a done state
    (setq org-clock-out-when-done t)
    ;; Save the running clock and all clock history when exiting Emacs, load it on startup
    (setq org-clock-persist t)
    ;; Do not prompt to resume an active clock
    (setq org-clock-persist-query-resume nil)
    ;; Enable auto clock resolution for finding open clocks
    (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
    ;; Include current clocking task in clock reports
    (setq org-clock-report-include-clocking-task t))
#+END_SRC




* Capture-refile-archive

Si estoy trabajando en algo y quiero anotar algo que se me acaba de
ocurrir o que recordé (me pasa muy seguido), sin que afecte el archivo
en el que estoy trabajando (/capture/)


Org Capture Templates are explained [[http://orgmode.org/manual/Capture-templates.html][here]], Org Template expansion [[http://orgmode.org/manual/Template-expansion.html#Template-expansion][here.]]


#+BEGIN_SRC emacs-lisp
(use-feature org-capture-refile
  :after org
  :config
  ;; Capture
  (setq org-capture-templates
        (quote (("t" "TODO    (t)" entry (file "~/Dropbox/org/refile.org")
                 "* TODO %?
:PROPERTIES:
:via: %f
:note:
:END:"
                 :clock-in t :clock-resume t :empty-lines 1)
                ("K" "Cliplink capture task" entry (file "")
                 "* TODO %(org-cliplink-capture) \n  SCHEDULED: %t\n" :empty-lines 1)
                ("s" "Scheduled TODO" entry (file+headline "~/Dropbox/org/refile.org")
                 "* TODO %? %^G \nSCHEDULED: %^t\n  %U" :empty-lines 1)
                ("d" "Deadline" entry (file+headline "~/Dropbox/org/refile.org")
                 "* TODO %? %^G \n  DEADLINE: %^t" :empty-lines 1)
                ("r" "research" entry (file "~/Dropbox/org/research.org")
                 "* %? :IDEA:\n%U\n%a\n" :clock-in t :clock-resume t)
                ("j" "journal" entry (file+olp+datetree "~/Dropbox/org/diary.org")
                 "* %?\n%U\n" :clock-in t :clock-resume t)
                ("n" "Note" entry (file "~/Dropbox/org/notes.org")
                 "* NOTE %?\n%U" :empty-lines 1)
                ("N" "Note with Clipboard" entry (file "~/Dropbox/org/notes.org")
                 "* NOTE %?\n%U\n   %c" :empty-lines 1))))

  ;; Refile
  (setq org-default-notes-file (nanounanue/org-file-path "personal/@SUMMARY.org"))
  (setq org-default-tasks-file (nanounanue/org-file-path "personal/tasks.org"))

  ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
  ;; Use full outline paths for refile targets
  (setq org-refile-use-outline-path t)

  ;; Allow refile to create parent tasks with confirmatio
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  )

#+END_SRC

Luego de seleccionar el /template/ adecuado, tecleas la nota, =C-c C-c=
para guardar.

Por último, recuerda hacer =C-c C-w= para /refile/ la nota al lugar correspondiente.


* Literate Programming

Larga vida al [[http://orgmode.org/worg/org-contrib/babel/intro.html][proyecto Babel]], el cual permite la ejecución de bloques
códigos y /tangle out/ bloques hacia archivos



#+begin_src emacs-lisp
  (use-feature org-src
    :after org
    :demand t
    :custom
    (org-edit-src-content-indentation 0)
    (org-src-preserve-indentation t)
    (org-src-fontify-natively t)
    :config
    (add-to-list 'org-src-lang-modes
                 '("dot" . "graphviz-dot")
                 )
    )
#+end_src

** Requisitos

*NOTA* Para [[https://github.com/corpix/ob-blockdiag.el][ob-blockdiag]] es necesario ejecutar lo siguiente:

#+BEGIN_SRC shell
pip install blockdiag seqdiag actdiag nwdiag
#+END_SRC

El formato se puede consultar en la página de [[http://blockdiag.com/en/][blockdiag]].

*NOTA* Para [[https://github.com/krisajenkins/ob-browser][ob-browser]]  es necesario tener =phantomjs=:

#+BEGIN_SRC shell :dir /sudo::
apt install -y phantomjs
#+END_SRC

Esto también lo vamos a ocupar

#+BEGIN_SRC emacs-lisp :tangle no
(use-package restclient
  :mode ("\\.restclient\\'" . restclient-mode))

(use-package company-restclient
  :config (add-to-list 'company-backends 'company-restclient))
#+END_SRC


#+begin_src emacs-lisp
(use-feature ob-ditaa
  :custom
  (org-ditaa-jar-path "~/Sync/org-libs/ditaa.jar"))

(use-feature ob-plantuml
  :custom
  (org-plantuml-jar-path "~/Sync/org-libs/plantuml.jar"))

(use-package ob-mongo)
(use-package ob-cypher)
(use-package ob-blockdiag)
#+end_src


** ob

#+begin_src emacs-lisp :noweb yes
(use-feature ob
  :after org
  :demand t
  :custom
  (org-confirm-babel-evaluate nil)
  (org-src-tab-acts-natively t)
  ;; [[elisp:(shell-command "ls ~")][My files]]
  (org-link-elisp-confirm-function nil)

  ;; [[shell:ls ~][My file]]
  (org-link-shell-confirm-function nil)

  :config
  ;; Set better default settings for org-babel.
  ;;(setf (alist-get :async org-babel-default-header-args:jupyter-python) "yes")
  ;;(setf (alist-get :session org-babel-default-header-args:jupyter-python) "py3")

  ;; Usamos sly para Lisp
  (setq org-babel-lisp-eval-fn 'sly-eval)


  (dolist (language    '((org . t)
                         (shell . t)
                         (awk        . t)
                         (sed        . t)
                         (js         . t)
                         (emacs-lisp . t)
                         (lisp       . t)
                         (perl       . t)
                         (R          . t)
                                        ;(scala      . t)
                         (clojure    . t)
                         (latex      . t)
                         (C          . t)
                         (fortran    . t)
                         (stan       . t)
                         (sqlite     . t)
                         (sql        . t)
                         (mongo      . t)
                         (cypher     . t)
                         (redis      . t)
                         (blockdiag  . t)
                         (calc       . t)
                         (python     . t)
                         (ruby       . t)
                         (dot        . t)
                         (css        . t)
                         (jq         . t)
                         (plantuml   . t)))
    (add-to-list 'org-babel-load-languages language))

   (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)

   <<ob-templates>>

  :hook (org-babel-after-execute . org-display-inline-images))
#+end_src


*** Templates para bloques =org-babel=

#+begin_src emacs-lisp :tangle no :noweb-ref ob-templates
(add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))

(add-to-list 'org-structure-template-alist
             '("sh" . "src shell"))

(add-to-list 'org-structure-template-alist
             '("py" . "src jupyter-python"))

(add-to-list 'org-structure-template-alist
             '("md" . "src markdown"))

(add-to-list 'org-structure-template-alist
             '("sr" . "src R"))

(add-to-list 'org-structure-template-alist
             '("sq" . "src sql"))

(add-to-list 'org-structure-template-alist
             '("cl" . "src lisp"))

(add-to-list 'org-structure-template-alist
             '("clj" . "src clojure"))
#+end_src


** Python: Emacs-jupyter

#+begin_src emacs-lisp

(straight-use-package '(simple-httpd :type git :host github :repo "skeeto/emacs-web-server" :local-repo "simple-httpd"))

(use-package zmq)

(use-package jupyter
  :after ob
  :demand t
  :requires (zmq simple-httpd)
  :init
  (defun jupyter-run-repl-or-pop-to-buffer-dwim ()
    "If a buffer is already associated with a jupyter buffer,
then pop to it. Otherwise start a jupyter kernel."
    (interactive)
    (if (bound-and-true-p jupyter-current-client)
        (jupyter-repl-pop-to-buffer)
      (call-interactively #'jupyter-run-repl)))

  ;; * eldoc integration
  (defun scimax-jupyter-signature ()
    "Try to return a function signature for the thing at point."
    (when (and (eql major-mode 'org-mode)
               (string= (or (get-text-property (point) 'lang) "") "jupyter-python"))
      (save-window-excursion
     ;;; Essentially copied from (jupyter-inspect-at-point).
        (jupyter-org-with-src-block-client
         (cl-destructuring-bind (code pos)
             (jupyter-code-context 'inspect)
           (jupyter-inspect code pos nil 0)))
        (when (get-buffer "*Help*")
          (with-current-buffer "*Help*"
            (goto-char (point-min))
            (prog1
                (cond
                 ((re-search-forward "Signature:" nil t 1)
                  (buffer-substring (line-beginning-position) (line-end-position)))
                 ((re-search-forward "Docstring:" nil t 1)
                  (forward-line)
                  (buffer-substring (line-beginning-position) (line-end-position)))
                 (t
                  nil))
              ;; get rid of this so we don't accidentally show old results later
              (with-current-buffer "*Help*"
                (toggle-read-only)
                (erase-buffer))))))))

  (defun scimax-jupyter-eldoc-advice (orig-func &rest args)
    "Advice function to get eldoc signatures in blocks in org-mode."
    (or (scimax-jupyter-signature) (apply orig-func args)))


  (defun scimax-jupyter-turn-on-eldoc ()
    "Turn on eldoc signatures."
    (interactive)
    (advice-add 'org-eldoc-documentation-function :around #'scimax-jupyter-eldoc-advice))

  :config

  (add-to-list 'org-babel-load-languages '(jupyter . t))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)


  (scimax-jupyter-turn-on-eldoc)

  ;; More readable repl traceback for Spacemacs Theme.
  (set-face-attribute 'jupyter-repl-traceback nil :background "wheat1")

  (jupyter-org-define-key (kbd "RET") #'newline-and-indent)

  :bind (:map jupyter-repl-mode-map
              ;; Use only C-n and C-p to move through candidates.
              ;; This unshadows C-n and C-p to move through lines in the REPL.
              ("C-n" . nil)
              ("C-p" . nil)))
#+end_src


** Async

#+begin_src emacs-lisp
;; Package `ob-async' allows executing ob commands asynchronously.
(use-package ob-async
  :after ob
  :config
  ;; Jupyter defines its own async that conflicts with ob-async.
  (setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-julia")))
#+end_src

* Exportar

#+begin_src emacs-lisp
(use-feature ox
  :after org
  :demand t
  :config
  ;; This is so that we are not queried if bind-keywords are safe when we set
  ;; org-export-allow-bind to t.
  (put 'org-export-allow-bind-keywords 'safe-local-variable #'booleanp)
  (setq org-export-with-sub-superscripts '{}
        org-export-coding-system 'utf-8
        org-html-checkbox-type 'html))
#+end_src

** Imágenes

Puedes controlar la /exportación/ de la imagen
como sigue:

#+BEGIN_SRC org :tangle no
 #+CAPTION: Algúna descripción
 #+ATTR_HTML: :align center :width 100px
 #+ATTR_LATEX: :align center :width 100px
 #+ATTR_ORG :align center :width 100px
#+END_SRC

** HTML

#+BEGIN_SRC emacs-lisp
(use-feature ox-html
  :after ox
  :init
  (setq org-html-postamble nil)
  (setq org-export-with-section-numbers nil)
  (setq org-export-with-toc nil)
  (setq org-html-head-extra "
          <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700,400italic,700italic&subset=latin,latin-ext' rel='stylesheet' type='text/css'>
          <link href='http://fonts.googleapis.com/css?family=Source+Code+Pro:400,700' rel='stylesheet' type='text/css'>
          <style type='text/css'>
             body {
                font-family: 'Source Sans Pro', sans-serif;
             }
             pre, code {
                font-family: 'Source Code Pro', monospace;
             }
          </style>"))
#+END_SRC

** LaTeX

#+BEGIN_SRC emacs-lisp
(use-feature ox-latex
  :after ox
  :demand
  :custom
  (org-latex-compiler "xelatex")
  (org-latex-pdf-process '("%latex -shell-escape -interaction nonstopmode -output-directory %o %f" "%latex -interaction nonstopmode -output-directory %o %f" "%latex -interaction nonstopmode -output-directory %o %f"))
  :config
  (setq org-export-latex-listings 'minted)
                                        ;(add-to-list 'org-latex-minted-langs '(jupyter "python"))
  ;; Need to let ox know about ipython and jupyter
  (add-to-list 'org-latex-minted-langs '(ipython "python"))
  (add-to-list 'org-babel-tangle-lang-exts '("ipython" . "py"))
  (add-to-list 'org-latex-minted-langs '(jupyter-python "python"))
  (add-to-list 'org-babel-tangle-lang-exts '("jupyter-python" . "py"))

  (setq org-export-latex-minted-options
        '(("frame" "lines")
          ("fontsize" "\\scriptsize")
          ("linenos" "")
          ))
  (setq org-latex-title-command "")

  (setq org-latex-prefer-user-labels t)

  (setq org-latex-default-packages-alist
        '(("AUTO" "inputenc" t)
          ("" "lmodern" nil)
          ("T1" "fontenc" t)
          ("" "fixltx2e" nil)
          ("" "graphicx" t)
          ("" "longtable" nil)
          ("" "float" nil)
          ("" "wrapfig" nil)
          ("" "rotating" nil)
          ("normalem" "ulem" t)
          ("" "amsmath" t)
          ("" "textcomp" t)
          ("" "marvosym" t)
          ("" "color" t)
          ("" "wasysym" t)
          ("" "amssymb" t)
          ("" "amsmath" t)
          ("version=3" "mhchem" t)
          ("numbers,super,sort&compress" "natbib" nil)
          ("" "natmove" nil)
          ("" "url" nil)
          ("" "minted" nil)
          ("" "listings" nil)
          ("" "underscore" nil)
          ("linktocpage,pdfstartview=FitH,colorlinks,
  linkcolor=blue,anchorcolor=blue,
  citecolor=blue,filecolor=blue,menucolor=blue,urlcolor=blue"
           "hyperref" nil)
          ("" "attachfile" nil)))
  ;; Borra los archivos intermedios al exportar
  (setq org-latex-logfiles-extensions
        '("lof" "lot" "tex=" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb"
          "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"))
  ;; Bloques bonitos
  (setq org-latex-listings 'listings)

  ;; Templates
  (add-to-list 'org-latex-classes
               '("IEEEtran" "\\documentclass[11pt]{IEEEtran}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
               t)

  (add-to-list 'org-latex-classes
               '(("tufte-book"
                  "\\documentclass[a4paper, sfsidenotes, justified, notitlepage]{tufte-book}
            \\input{/full/path/to/.templates/tufte-book.tex}"
                  ("\\part{%s}" . "\\part*{%s}")
                  ("\\chapter{%s}" . "\\chapter*{%s}")
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}"))))

  ;; https://github.com/fniessen/refcard-org-beamer
  (add-to-list 'org-latex-classes
               `("beamer"
                 ,(concat "\\documentclass[presentation]{beamer}\n"
                          "[DEFAULT-PACKAGES]"
                          "[PACKAGES]"
                          "[EXTRA]\n")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

  (add-to-list 'org-latex-classes
               '("assign"
                 "\\documentclass{article}
  \\usepackage{amsmath,amsfonts,stmaryrd,amssymb}
  \\usepackage{enumerate}
  \\usepackage[ruled]{algorithm2e}
  \\usepackage[framemethod=tikz]{mdframed}
  \\usepackage{listings}
  \\usepackage[footnote]{snotez}
  \\lstset{
        basicstyle=\\ttfamily,
  }


    \\usepackage{geometry}

    \\geometry{
        paper=a4paper,
        top=40pt,
        bottom=3cm,
        left=30pt,
        textwidth=417pt,
        headheight=14pt,
        marginparsep=20pt,
        marginparwidth=100pt,
        footskip=30pt,
        headsep=0cm,
    }


    \\usepackage[utf8]{inputenc}
    \\usepackage{sansmathfonts}
    \\usepackage[T1]{fontenc}
    \\renewcommand*\\familydefault{\\sfdefault}
  \\mdfdefinestyle{commandline}{
      leftmargin=10pt,
      rightmargin=10pt,
      innerleftmargin=15pt,
      middlelinecolor=black!50!white,
      middlelinewidth=2pt,
      frametitlerule=false,
      backgroundcolor=black!5!white,
      frametitle={Ligne de commande},
      frametitlefont={\\normalfont\\sffamily\\color{white}\\hspace{-1em}},
      frametitlebackgroundcolor=black!50!white,
      nobreak,
  }


  \\newenvironment{commandline}{
      \\medskip
      \\begin{mdframed}[style=commandline]
  }{
      \\end{mdframed}
      \\medskip
  }


  \\mdfdefinestyle{question}{
      innertopmargin=1.2\\baselineskip,
      innerbottommargin=0.8\\baselineskip,
      roundcorner=5pt,
      nobreak,
      singleextra={
          \\draw(P-|O)node[xshift=1em,anchor=west,fill=white,draw,rounded corners=5pt]{
          Question \\theQuestion\\questionTitle};
      },
  }

  \\newcounter{Question}


  \\newenvironment{question}[1][\\unskip]{
      \\bigskip
      \\stepcounter{Question}
      \\newcommand{\\questionTitle}{~#1}
      \\begin{mdframed}[style=question]
  }{
      \\end{mdframed}
      \\medskip
  }



  \\mdfdefinestyle{warning}{
      topline=false, bottomline=false,
      leftline=false, rightline=false,
      nobreak,
      singleextra={
          \\draw(P-|O)++(-0.5em,0)node(tmp1){};
          \\draw(P-|O)++(0.5em,0)node(tmp2){};
          \\fill[black,rotate around={45:(P-|O)}](tmp1)rectangle(tmp2);
          \\node at(P-|O){\\color{white}\\scriptsize\\bf !};
          \\draw[very thick](P-|O)++(0,-1em)--(O);
      }
  }


  \\newenvironment{warning}[1][Attention:]{
      \\medskip
      \\begin{mdframed}[style=warning]
          \\noindent{\\textbf{#1}}
  }{
      \\end{mdframed}
  }



  \\mdfdefinestyle{info}{
      topline=false, bottomline=false,
      leftline=false, rightline=false,
      nobreak,
      singleextra={
          \\fill[black](P-|O)circle[radius=0.4em];
          \\node at(P-|O){\\color{white}\\scriptsize\\bf i};
          \\draw[very thick](P-|O)++(0,-0.8em)--(O);
      }
  }

  \\newenvironment{info}[1][Info:]{
      \\medskip
      \\begin{mdframed}[style=info]
          \\noindent{\\textbf{#1}}
  }{
      \\end{mdframed}
  }"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


  ;; Mimore class is a latex class for writing articles.
  (add-to-list 'org-latex-classes
               '("mimore"
                 "\\documentclass{mimore}
 [NO-DEFAULT-PACKAGES]
 [PACKAGES]
 [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  ;; Mimosis is a class I used to write my Ph.D. thesis.
  (add-to-list 'org-latex-classes
               '("mimosis"
                 "\\documentclass{mimosis}
 [NO-DEFAULT-PACKAGES]
 [PACKAGES]
 [EXTRA]
\\newcommand{\\mboxparagraph}[1]{\\paragraph{#1}\\mbox{}\\\\}
\\newcommand{\\mboxsubparagraph}[1]{\\subparagraph{#1}\\mbox{}\\\\}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\mboxparagraph{%s}" . "\\mboxparagraph*{%s}")
                 ("\\mboxsubparagraph{%s}" . "\\mboxsubparagraph*{%s}")))

  ;; Elsarticle is Elsevier class for publications.
  (add-to-list 'org-latex-classes
               '("elsarticle"
                 "\\documentclass{elsarticle}
 [NO-DEFAULT-PACKAGES]
 [PACKAGES]
 [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


  )


#+END_SRC


Para usar un /template/ agregar al archivo

#+BEGIN_SRC org :tangle no
#+LATEX_CLASS: tufte-book
#+END_SRC

** Pandoc

Para aprovechar [[https://github.com/kawabata/ox-pandoc][ox-pandoc]] es necesario tener una versión reciente de
=pandoc=.


#+BEGIN_SRC shell :dir /sudo::
VERSION=$(curl --silent "https://api.github.com/repos/jgm/pandoc/releases/latest" | jq -r .tag_name) && \
wget  -q -O /tmp/pandoc.deb https://github.com/jgm/pandoc/releases/download/${VERSION}/pandoc-${VERSION}-1-amd64.deb && \
dpkg -i /tmp/pandoc.deb
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc
  :after org)
#+END_SRC


** TWBS

#+BEGIN_SRC emacs-lisp
(use-package ox-twbs
  :after org)
#+END_SRC


** Github Markdown
#+BEGIN_SRC emacs-lisp
(use-package ox-gfm
  :after org)
#+END_SRC


** Tufte

#+BEGIN_SRC emacs-lisp
(use-package ox-tufte
  :after org)
#+END_SRC


** EPUB

#+BEGIN_SRC emacs-lisp
(use-package ox-epub
  :after org)
#+END_SRC


** RST

#+BEGIN_SRC emacs-lisp
(use-package ox-rst
  :after org)
#+END_SRC


** AsciiDoc

#+BEGIN_SRC emacs-lisp
(use-package ox-asciidoc
  :after org)
#+END_SRC


** Clipboard

Necesita =xclip=

#+BEGIN_SRC shell  :dir /sudo::
apt install -y xclip
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ox-clip
    :after ox)
#+END_SRC

* Presentaciones

** Reveal


[[https://github.com/yjwen/org-reveal][ox-reveal]] para crear slides en *HTML*

#+BEGIN_SRC shell :dir /tmp
wget -O reveal.tar.gz https://github.com/hakimel/reveal.js/archive/3.7.0.tar.gz && \
tar zxf /tmp/reveal.tar.gz -C ~/software/js/revealjs --strip-component 1
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle no
(use-package ox-reveal
  :disabled t
  :after org
  :custom
  (org-reveal-mathjax t)
  (org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
                                        ;(org-reveal-root (concat "file://" (getenv "HOME") "/software/js/revealjs"))
  (org-reveal-postamble "Adolfo De Unánue"))
#+END_SRC

Al parecer =ox-reveal= [[https://github.com/yjwen/org-reveal/issues/363#issuecomment-460270780][no está siendo mantenido]], la alternativa
propuesta en el mismo lugar es el [[https://gitlab.com/oer/org-re-reveal][fork]] =org-re-reveal=:

#+begin_src emacs-lisp
(use-package org-re-reveal
  :config
  (require 'org-re-reveal)
  :custom
  (org-re-reveal-mathjax t)
  (org-re-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
                                        ;(org-reveal-root (concat "file://" (getenv "HOME") "/software/js/revealjs"))
  (org-re-reveal-postamble "Adolfo De Unánue"))
#+end_src

** epresent

/Simple presentation mode for Emacs Org-mode/

 - Call epresent-run on an org-buffer.
 - press t / 1 to view the top level of the presentation
 - navigate the presentation with n/f, p/b
 - go to a specific page with v <num> RET
 - scroll with k and l
 - use c and C to navigate between code blocks, e to edit them, x to
  make it run, and s / S to toggle their visibility
 - quit with q



#+begin_src emacs-lisp
(use-package epresent)
#+end_src

** [[https://zck.me/zpresent][zpresent]]

/A presentation framework for Emacs/

[[https://bitbucket.org/zck/zpresent.el/src/default/tutorial.org][Tutorial]]

#+begin_src emacs-lisp
(use-package zpresent)
#+end_src

* Apariencia

Los /bullets/ hacen más presentable =org-mode=

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
       ;ensure t
       :after org
       :hook
       (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC

* Tomar notas

** =interleave=

Del sitio [[https://github.com/rudolfochrist/interleave][web]]:

#+BEGIN_QUOTE
Some history, what this is all about

In the past, textbooks were sometimes published as interleaved
editions. That meant, each page was followed by a blank page and
ambitious students/scholars had the ability to take their notes
directly in their copy of the textbook. Newton and Kant were prominent
representatives of this technique [fn:blumbach].

Nowadays textbooks (or lecture material) come in PDF format. Although
almost every PDF Reader has the ability to add some notes to the PDF
itself, it is not as powerful as it could be. This is what this Emacs
minor mode tries to accomplish. It presents your PDF side by side to
an Org Mode buffer with you notes. Narrowing down to just those
passages that are relevant to this particular page in the document
viewer.

In a later step it should be possible to create truly interleaved PDFs of your notes.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package interleave
    :defer t
    :after org
    :bind ("C-x i" . interleave-mode)
    :config
    (setq interleave-split-direction 'horizontal
          interleave-split-lines 20
          interleave-disable-narrowing t))
#+END_SRC


** [[https://github.com/weirdNox/org-noter][org-noter]]

#+begin_src emacs-lisp
(use-package org-noter
  :after org
  ;ensure t
  :config
  (setq org-noter-default-notes-file-names '("notes.org")
        org-noter-notes-search-path '("~/Sync/org/research/notes"))
  (setq org-noter-separate-notes-from-heading t)
  )
#+end_src

**  =org-ref=

#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :defer t
  :after org
  :demand t
  :init
  (setq reftex-default-bibliography '("~/Sync/org/research/research.bib"))

  ;; see org-ref for use of these variables
  (setq org-ref-bibliography-notes "~/Sync/org/research/notes.org"
        org-ref-pdf-directory "~/Sync/org/referencias/"
        org-latex-prefer-user-labels t
        bibtex-completion-pdf-field "file"
        org-ref-default-citation-link "parencite"
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")))
:config

  (defun org-ref-grep-pdf (&optional _candidate)
    "Search pdf files of marked CANDIDATEs."
    (interactive)
    (let ((keys (helm-marked-candidates))
          (get-pdf-function org-ref-get-pdf-filename-function))
      (helm-do-pdfgrep-1
       (-remove (lambda (pdf)
                  (string= pdf ""))
                (mapcar (lambda (key)
                          (funcall get-pdf-function key))
                        keys)))))

  (defun org-ref-open-pdf-at-point-in-emacs ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
           (key (car results))
           (pdf-file (funcall org-ref-get-pdf-filename-function key)))
      (if (file-exists-p pdf-file)
          (find-file-other-window pdf-file)
        (message "no pdf found for %s" key))))

#+END_SRC



* [[https://github.com/sprig/org-capture-extension][Org protocol]]

** Preparando el sistema operativo para el [[https://addons.mozilla.org/en-US/firefox/addon/org-capture/?src=search][add-on in de firefox]]

Registramos =emacs= como el encargado de manejar las peticiones de la
extensión de Firefox

#+BEGIN_SRC shell
mkdir -p ~/.local/share/applications
#+END_SRC


#+BEGIN_SRC shell :dir ~/.local/share/applications
cat > "org-protocol.desktop" << EOF
[Desktop Entry]
Name=org-protocol
Exec=emacsclient %u
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;
EOF
#+END_SRC

Actualizamos la base de datos de manejadores

#+BEGIN_SRC shell
update-desktop-database ~/.local/share/applications/
#+END_SRC

** Configuración *en* emacs

#+BEGIN_SRC emacs-lisp
(use-feature org-protocol
  :config
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat
     (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
    )


  (add-to-list 'org-capture-templates
               '("p" "Protocol" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
                 "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?"))

  (add-to-list 'org-capture-templates
               '("L" "Protocol Link" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
                 "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")))
#+END_SRC



* Misceláneos

** [[https://github.com/rexim/org-cliplink][org-cliplink]]

#+begin_quote
A simple command that takes a URL from the clipboard and inserts an
org-mode link with a title of a page found by the URL into the current
buffer.
#+end_quote

#+begin_src emacs-lisp
(use-package org-cliplink)
#+end_src

** [[https://github.com/gizmomogwai/org-kanban][org-kanban]]

#+BEGIN_SRC emacs-lisp
(use-package org-kanban
  :after org)
#+END_SRC

** [[https://github.com/abo-abo/org-download][org-download]]

#+BEGIN_SRC emacs-lisp
(use-package org-download
  ;ensure t
  :after org
  :init
  (require 'org-download)
  :commands (org-download-enable
             org-download-yank
             org-download-screenshot)

  :config
  (setq-default org-download-image-dir "./img")
  (setq org-download-screenshot-method "screencapture -i %s")
  :hook ((org-mode dired-mode) . org-download-enable))
#+END_SRC



** =org-attach-screenshot=

#+BEGIN_SRC emacs-lisp
(use-package org-attach-screenshot
  :diminish
  :after org
  :bind
  (("C-c S" . org-attach-screenshot)))
#+END_SRC

** ox-extra
#+begin_src emacs-lisp
;; Feature `ox-extra' is a library from the org-plus-contrib package.
;; It adds extra keywords and tagging functionality for org export.
(use-feature ox-extra
  ;; Demand so that ignore headlines is always active.
  :demand t
  :after ox
  ;; The ignore-headlines allows Org to understand the tag :ignore: and simply
  ;; remove tagged headings on export, but leave their content in.
  ;; See my blog post about writing thesis with org mode here:
  ;; https://write.as/dani/writing-a-phd-thesis-with-org-mode
  :config (ox-extras-activate '(ignore-headlines)))
#+end_src

**  org-compat

#+begin_src emacs-lisp
;; Feature `org-compat' is a adapter layer so that org can communicate with other Emacs
;; built-in packages.
(use-feature org-compat
  :demand t
  :after org
  :config (setq org-imenu-depth 3))
#+end_src

** Table of Contents

#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :after org
  :hook (org-mode . toc-org-enable))
#+END_SRC

* Proveer

  #+BEGIN_SRC emacs-lisp
  (provide 'setup-org-mode)
  #+END_SRC
