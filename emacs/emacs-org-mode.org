#+TITLE: Configuración de Org Mode
#+AUTHOR: Adolfo De Unánue
#+EMAIL: nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/elisp/init-org-mode.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+TAGS: emacs

* Configuración inicial

  #+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t
      :mode
      ("\\.org\\'" . org-mode)
      ("\\.txt\\'" . org-mode)
      (".*/[0-9]*$" . org-mode)
      :init
      (setq org-use-speed-commands t
            org-return-follows-link t
            org-hide-emphasis-markers t
            org-completion-use-ido t
            org-outline-path-complete-in-steps nil
            org-src-fontify-natively t   ;; Pretty code blocks
            org-src-tab-acts-natively t
            org-confirm-babel-evaluate nil  ;; No quiero que me pregunte, si quiero ejecutar
            org-directory "~/Dropbox/org"
            org-confirm-elisp-link-function nil
            org-confirm-shell-link-function nil
            org-pretty-entities t   ;; Enable pretty entities - shows e.g. α β γ as UTF-8 characters.
            org-image-actual-width 800   ;; I can display inline images. Set them to have a maximum size so large images don't fill the screen.
            org-src-preserve-indentation t
            org-todo-keywords '((sequence "TODO(t)" "DOING(g)" "|" "DONE(d)")
                                (sequence "|" "CANCELED(c)")))

      (add-hook 'org-mode-hook 'yas-minor-mode-on)
      :bind (("C-c l" . org-store-link)
             ("C-c c" . org-capture)
             ("C-c a" . org-agenda)
             ("C-c C-w" . org-refile)
             ("C-c C-v t" . org-babel-tangle)
             ("C-c C-v f" . org-babel-tangle-file)
             ("C-M-|" . indent-rigidly))
      :hook
      (org-babel-after-execute . org-display-inline-images)
      (org-mode . org-display-inline-images)
      (org-mode . org-babel-result-hide-all)
      (org-mode . turn-on-auto-fill)
      (org-mode . flyspell-mode)
      :config
      ;; Hace más grandes las imágenes de ecuaciones de LaTeX cuando tienes activado
      ;; #+OPTIONS: LaTeX:t
      ;; #+OPTIONS: tex:imagemagick
      ;; Solución tomada desde: https://tex.stackexchange.com/a/78587/24453
      (plist-put org-format-latex-options :scale 1.5)

      (defun org-file-path (filename)
        "Return the absolute address of an org file, given its relative name."
        (concat (file-name-as-directory org-directory) filename))

      (font-lock-add-keywords            ; A bit silly but my headers are now
       'org-mode `(("^\\*+ \\(TODO\\) "  ; shorter, and that is nice canceled
                    (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚑")
                              nil)))
                   ("^\\*+ \\(DOING\\) "
                    (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚐")
                              nil)))
                   ("^\\*+ \\(CANCELED\\) "
                    (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘")
                              nil)))
                   ("^\\*+ \\(DONE\\) "
                    (1 (progn (compose-region (match-beginning 1) (match-end 1) "✔")
                              nil)))))

      (define-key org-mode-map (kbd "M-C-n") 'org-end-of-item-list)
      (define-key org-mode-map (kbd "M-C-p") 'org-beginning-of-item-list)
      (define-key org-mode-map (kbd "M-C-u") 'outline-up-heading)
      (define-key org-mode-map (kbd "M-C-w") 'org-table-copy-region)
      (define-key org-mode-map (kbd "M-C-y") 'org-table-paste-rectangle)

      (define-key org-mode-map [remap org-return] (lambda () (interactive)
                                                    (if (org-in-src-block-p)
                                                        (org-return)
                                                      (org-return-indent)))))
  #+END_SRC


* /Key bindings/

  #+BEGIN_SRC emacs-lisp
    (use-package org
      :config
       (bind-keys :map org-mode-map
       ("A-b" . (surround-text-with "+"))
       ("s-b" . (surround-text-with "*"))
       ("A-i" . (surround-text-with "/"))
       ("s-i" . (surround-text-with "/"))
       ("A-=" . (surround-text-with "="))
       ("s-=" . (surround-text-with "="))
       ("A-`" . (surround-text-with "~"))
       ("s-`" . (surround-text-with "~"))

       ("C-s-f" . forward-sentence)
       ("C-s-b" . backward-sentence)))
  #+END_SRC

* /Display/

Los /bullets/ hacen más presentable =org-mode=

  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
       :ensure t
       :init (add-hook 'org-mode-hook 'org-bullets-mode))
  #+END_SRC


* Speed commands

  *Speed Commands:* If point is at the beginning of a headline or
  code block in org-mode, single keys do fun things. See
  =org-speed-command-help= for details (or hit the ? key at a
  headline).


#+BEGIN_SRC emacs-lisp
(use-package org
  :config

  (add-to-list 'org-speed-commands-user (cons "P" 'org-set-property))
  (add-to-list 'org-speed-commands-user (cons "d" 'org-deadline))

  ;; Mark a subtree
  (add-to-list 'org-speed-commands-user (cons "m" 'org-mark-subtree))

  ;; Widen
  (add-to-list 'org-speed-commands-user (cons "S" 'widen))

  ;; kill a subtree
  (add-to-list 'org-speed-commands-user (cons "k" (lambda ()
                                                    (org-mark-subtree)
                                                    (kill-region
                                                     (region-beginning)
                                                     (region-end))))))
#+END_SRC


* /Pasting/

Si =pandoc= está instalado, podemos copiar código HTML, ponerlo en el
/clipboard/ y convertirlo a =org-mode= antes de /yanking it/ al /buffer/


  #+BEGIN_SRC emacs-lisp
    (defun nanounanue/paste-html-to-org ()
      "Assumes the contents of the system clip/paste-board to be
    HTML, this calls out to `pandoc' to convert it for the org-mode
    format."
      (interactive)
      (let* ((clip (if (eq system-type 'darwin)
                       "pbpaste -Prefer rts"
                     "xclip -out -selection 'clipboard' -t text/html"))
             (format (if (eq mode-name "Org") "org" "markdown"))
             (pandoc (concat "pandoc -f rts -t " format))
             (cmd    (concat clip " | " pandoc))
             (text   (shell-command-to-string cmd)))
        (kill-new text)
        (yank)))
  #+END_SRC


* Org agenda

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-agenda-files (list (org-file-path "research.org")
                               (org-file-path "dsapp.org")
                               (org-file-path "proyectos.org")
                               (org-file-path "diary.org")
                               (org-file-path "refile.org")
			       (org-file-path "personal")
			       (org-file-path "research")
			       (org-file-path "projects")
                               ))

  ;; No queremos ver aquello que ya acabó en la agenda
  ;; http://orgmode.org/manual/Global-TODO-list.html#Global-TODO-list
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-timestamp-if-done t)
  (setq org-agenda-todo-ignore-scheduled t)
  (setq org-agenda-todo-ignore-deadlines t)
  (setq org-agenda-todo-ignore-timestamp t)
  (setq org-agenda-todo-ignore-with-date t)
  (setq org-agenda-start-on-weekday nil) ;; start on current day
)
#+END_SRC


* Org clock


#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  ;; Org-clock
  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;;
  ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
  (setq org-clock-history-length 23)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  ;; Save clock data and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer t)
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Do not prompt to resume an active clock
  (setq org-clock-persist-query-resume nil)
  ;; Enable auto clock resolution for finding open clocks
  (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  ;; Include current clocking task in clock reports
  (setq org-clock-report-include-clocking-task t))
#+END_SRC


* /TODO Keywords/

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-todo-keywords '(
                            (sequence
                             "TODO(t)"
                             "WORKING(w)"
                             "BLOCKED(b)"
                             "REVIEW(r)"
                             "|"
                             "DONE(d)")
                            (sequence "|" "CANCELLED(c@/!)"
                                      "SOMEDAY(f)"
                                      )))
  (setq org-todo-keyword-faces
        '(("TODO" . "tomato")
	  ("WORKING" . "gold2")
	  ("REVIEW" . "goldenrod")
	  ("BLOCKED" . "magenta")
	  ("CANCELLED" . "dark red")
	  ("DONE" . "green")
	  ("SOMEDAY" . "sienna"))))
#+END_SRC


* Capture-refile-archive

Si estoy trabajando en algo y quiero anotar algo que se me acaba de
ocurrir o que recordé (me pasa muy seguido), sin que afecte el archivo
en el que estoy trabajando (/capture/)

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  ;; Capture
  (setq org-capture-templates
        (quote (("t" "todo" entry (file "~/Dropbox/org/refile.org")
                 "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                ("r" "research" entry (file "~/Dropbox/org/research.org")
                 "* %? :IDEA:\n%U\n%a\n" :clock-in t :clock-resume t)
                ("j" "journal" entry (file+datetree "~/Dropbox/org/diary.org")
                 "* %?\n%U\n" :clock-in t :clock-resume t)
                ("x" "org-protocol" entry (file "~/Dropbox/org/refile.org")
                 "* TODO Review %c \n Added:%T\n")
                )))
  ;; Refile
  (setq org-default-notes-file (org-file-path "personal/@SUMMARY.org"))
  (setq org-default-tasks-file (org-file-path "personal/tasks.org"))

  ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
  ;; Use full outline paths for refile targets
  (setq org-refile-use-outline-path t)

  ;; Allow refile to create parent tasks with confirmatio
  (setq org-refile-allow-creating-parent-nodes (quote confirm)))
#+END_SRC

Luego de seleccionar el /template/ adecuado, tecleas la nota, =C-c C-c=
para guardar.

Por último, recuerda hacer =C-c C-w= para /refile/ la nota al lugar correspondiente.


* Exportar

** HTML

#+BEGIN_SRC emacs-lisp
(use-package ox-html
  :init
  (setq org-html-postamble nil)
  (setq org-export-with-section-numbers nil)
  (setq org-export-with-toc nil)
  (setq org-html-head-extra "
          <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700,400italic,700italic&subset=latin,latin-ext' rel='stylesheet' type='text/css'>
          <link href='http://fonts.googleapis.com/css?family=Source+Code+Pro:400,700' rel='stylesheet' type='text/css'>
          <style type='text/css'>
             body {
                font-family: 'Source Sans Pro', sans-serif;
             }
             pre, code {
                font-family: 'Source Code Pro', monospace;
             }
          </style>"))
#+END_SRC


** LaTeX

#+BEGIN_SRC emacs-lisp

(use-package org
  :config
  (setq org-export-latex-listings 'minted)
  (setq org-export-latex-minted-options
        '(("frame" "lines")
          ("fontsize" "\\scriptsize")
          ("linenos" "")
          ))
  (setq org-latex-to-pdf-process
        '("latexmk -xelatex='xelatex --shell-escape -interaction nonstopmode' -f  %f")) ;; for multiple passes
  ;; avoid getting \maketitle right after begin{document}
  ;; you should put \maketitle if and where you want it.
  (setq org-latex-title-command "")

  (setq org-latex-prefer-user-labels t)

  (setq org-latex-default-packages-alist
        '(("AUTO" "inputenc" t)
          ("" "lmodern" nil)
          ("T1" "fontenc" t)
          ("" "fixltx2e" nil)
          ("" "graphicx" t)
          ("" "longtable" nil)
          ("" "float" nil)
          ("" "wrapfig" nil)
          ("" "rotating" nil)
          ("normalem" "ulem" t)
          ("" "amsmath" t)
          ("" "textcomp" t)
          ("" "marvosym" t)
          ("" "wasysym" t)
          ("" "amssymb" t)
          ("" "amsmath" t)
          ("version=3" "mhchem" t)
          ("numbers,super,sort&compress" "natbib" nil)
          ("" "natmove" nil)
          ("" "url" nil)
          ("" "minted" nil)
          ("" "underscore" nil)
          ("linktocpage,pdfstartview=FitH,colorlinks,
linkcolor=blue,anchorcolor=blue,
citecolor=blue,filecolor=blue,menucolor=blue,urlcolor=blue"
           "hyperref" nil)
          ("" "attachfile" nil)))

  )

(add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
(add-to-list 'org-latex-default-packages-alist
             '("linktocpage,pdfstartview=FitH,colorlinks
-linkcolor=black,anchorcolor=black,
-citecolor=black,filecolor=blue,menucolor=black,urlcolor=blue"
               "hyperref" nil)
             t)

#+END_SRC

Borrar archivos intermedios automáticamente al exportar

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-latex-logfiles-extensions
        '("lof" "lot" "tex=" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb"
          "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl")))
#+END_SRC

Templates para LaTeX

#+BEGIN_SRC emacs-lisp
(use-package org

  :config
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "color"))
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (setq org-latex-listings 'listings) ;; For nice blocks

  (add-to-list 'org-latex-classes
               '("IEEEtran" "\\documentclass[11pt]{IEEEtran}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
               t)

  (add-to-list 'org-latex-classes
     '(("tufte-book"
	"\\documentclass[a4paper, sfsidenotes, justified, notitlepage]{tufte-book}
          \\input{/full/path/to/.templates/tufte-book.tex}"
	("\\part{%s}" . "\\part*{%s}")
	("\\chapter{%s}" . "\\chapter*{%s}")
	("\\section{%s}" . "\\section*{%s}")
	("\\subsection{%s}" . "\\subsection*{%s}"))))

  ;; https://github.com/fniessen/refcard-org-beamer
  (add-to-list 'org-latex-classes
                `("beamer"
                  ,(concat "\\documentclass[presentation]{beamer}\n"
                           "[DEFAULT-PACKAGES]"
                           "[PACKAGES]"
                           "[EXTRA]\n")
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+END_SRC

Para usar un /template/ agregar al archivo

#+BEGIN_SRC org :tangle no
#+LATEX_CLASS: tufte-book
#+END_SRC


** Pandoc

Para aprovechar [[https://github.com/kawabata/ox-pandoc][ox-pandoc]] es necesario tener una versión reciente de =pandoc=.

#+BEGIN_SRC shell :dir /sudo::
VERSION=$(curl --silent "https://api.github.com/repos/jgm/pandoc/releases/latest" | jq -r .tag_name) && \
wget  -q -O /tmp/pandoc.deb https://github.com/jgm/pandoc/releases/download/${VERSION}/pandoc-${VERSION}-1-amd64.deb && \
dpkg -i /tmp/pandoc.deb
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc :config (require 'ox-pandoc))
#+END_SRC


** TWBS

#+BEGIN_SRC emacs-lisp
(use-package ox-twbs :config (require 'ox-twbs))
#+END_SRC



** Github Markdown
#+BEGIN_SRC emacs-lisp
(use-package ox-gfm :config (require 'ox-gfm))
#+END_SRC


** Tufte

#+BEGIN_SRC emacs-lisp
(use-package ox-tufte :config (require 'ox-tufte))
#+END_SRC


** EPUB

#+BEGIN_SRC emacs-lisp
(use-package ox-epub :config (require 'ox-epub))
#+END_SRC


** RST

#+BEGIN_SRC emacs-lisp
(use-package ox-rst :config (require 'ox-rst))
#+END_SRC

** AsciiDoc

#+BEGIN_SRC emacs-lisp
(use-package ox-asciidoc :config (require 'ox-asciidoc))
#+END_SRC


** Clipboard

Necesita =xclip=

#+BEGIN_SRC shell  :dir /sudo::
apt install -y xclip
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ox-clip
    :ensure t
    :after ox)
#+END_SRC


* Presentaciones

** Reveal

[[https://github.com/yjwen/org-reveal][ox-reveal]] para crear slides en *HTML*

#+BEGIN_SRC shell :dir /tmp
wget -O reveal.tar.gz https://github.com/hakimel/reveal.js/archive/3.7.0.tar.gz && \
tar zxf /tmp/reveal.tar.gz -C ~/software/js/revealjs --strip-component 1
#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
   :init
   (setq org-reveal-root (concat "file://" (getenv "HOME") "/software/js/revealjs"))
   (setq org-reveal-postamble "Adolfo De Unánue"))
#+END_SRC

** Tree Slide

   A quick way to display an org-mode file is using [[https://github.com/takaxp/org-tree-slide][org-tree-slide]].

   * org-tree-slide-move-next-tree (C->)
   * org-tree-slide-move-previous-tree (C-<)
   * org-tree-slide-content (C-x s c)


   #+BEGIN_SRC emacs-lisp
     (use-package org-tree-slide
        :ensure t
        :init
        (setq org-tree-slide-skip-outline-level 4)
        (org-tree-slide-simple-profile))
   #+END_SRC


** =org-present=

#+BEGIN_SRC emacs-lisp
(use-package org-present
  :defer t
  :after (org)
  :init
  (progn

    (add-hook 'org-present-mode-hook
              (lambda ()
                (global-linum-mode -1)
                (org-present-big)
                (org-display-inline-images)
                (org-present-hide-cursor)
                (org-present-read-only)))
    (add-hook 'org-present-mode-quit-hook
              (lambda ()
                (global-linum-mode -1)
                (org-present-small)
                (org-remove-inline-images)
                (org-present-show-cursor)
                (org-present-read-write)))))
#+END_SRC


* /Literate Programming/

Larga vida al [[http://orgmode.org/worg/org-contrib/babel/intro.html][proyecto Babel]], el cual permite la ejecución de bloques
códigos y /tangle out/ bloques hacia archivos




#+BEGIN_SRC emacs-lisp
    (use-package org
      :config
      ;; Paths a ditaa y plantuml
      (setq org-ditaa-jar-path "~/software/org-libs/ditaa.jar")
      (setq org-plantuml-jar-path "~/software/org-libs/plantuml.jar")

      (add-to-list 'org-src-lang-modes '("dot" . "graphviz-dot"))

      (org-babel-do-load-languages 'org-babel-load-languages
                                   '((shell      . t)
				       (awk        . t)
				       (sed        . t)
                                     (js         . t)
                                     (emacs-lisp . t)
                                     (perl       . t)
                                     (R          . t)
                                     (scala      . t)
                                     (clojure    . t)
				     (latex      . t)
				     (C          . t)
				     (fortran    . t)
				     (stan       . t)
				     (ipython    . t)
				     (sqlite     . t)
				     (sql        . t)
				     (mongo      . t)
				     (cypher     . t)
				     ;; (redis      . t)
				     (blockdiag  . t)
                                     (python     . t)
                                     (ruby       . t)
                                     (dot        . t)
                                     (css        . t)
                                     (plantuml   . t)))

      ;; Org-babel no muestra el stderr
      ;; http://kitchingroup.cheme.cmu.edu/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks/
      (setq org-babel-default-header-args:sh
            '((:prologue . "exec 2>&1") (:epilogue . ":"))
            )
      )
  #+END_SRC




** Templates para bloques =org-babel=

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"
                 "<src lang=\"shell\">\n?\n</src>"))

  (add-to-list 'org-structure-template-alist
	           '("p" "#+BEGIN_SRC ipython :results output org drawer\n?\n#+END_SRC"
	             "<src lang=\"ipython\">\n?\n</src>"))

  ;; add <por for python expansion with raw output
  (add-to-list 'org-structure-template-alist
	           '("por" "#+BEGIN_SRC ipython :results output raw\n?\n#+END_SRC"
	             "<src lang=\"ipython\">\n?\n</src>"))

  ;; add <pv for python expansion with value
  (add-to-list 'org-structure-template-alist
	           '("pv" "#+BEGIN_SRC ipython :results value\n?\n#+END_SRC"
                 "<src lang=\"ipython\">\n?\n</src>")))
#+END_SRC


** Dependencias

*NOTA* Para [[https://github.com/corpix/ob-blockdiag.el][ob-blockdiag]] es necesario ejecutar lo siguiente:

#+BEGIN_SRC shell
pip install blockdiag seqdiag actdiag nwdiag
#+END_SRC

El formato se puede consultar en la página de [[http://blockdiag.com/en/][blockdiag]].

*NOTA* PAra [[https://github.com/krisajenkins/ob-browser][ob-browser]]  es necesario tener =phantomjs=:

#+BEGIN_SRC sh :dir /sudo::
apt install -y phantomjs
#+END_SRC

Esto también lo vamos a ocupar

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :mode ("\\.restclient\\'" . restclient-mode))

(use-package company-restclient
  :config (add-to-list 'company-backends 'company-restclient))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'ob-emacs-lisp)

(use-package ob-http
  :config
  (require 'ob-http)
  )

(use-package ob-async
  :config
  (require 'ob-async)
  )

(use-package ob-ipython
  :ensure t
  :config
  (require 'ob-ipython)
  )

(use-package ob-mongo
  :config
  (require 'ob-mongo)
  )

(use-package ob-cypher
  :config
  (require 'ob-cypher)
  )

(use-package ob-sql-mode
  :config
  (require 'ob-sql-mode)
  )

(use-package ob-prolog
  :config
  (require 'ob-prolog))


(use-package ob-blockdiag
  :config
  (require 'ob-blockdiag))

(use-package ob-browser
  :config
  (require 'ob-browser))

(use-package ob-async :ensure t)

(use-package ob-restclient :ensure t)

#+END_SRC


* Imágenes

Habilitando mas tipos de imágenes a desplegar en =org-mode=

#+BEGIN_SRC emacs-lisp

(use-package org
  :config
  ;; * Enable pdf and eps images in org-mode
  ;; Suggested on the org-mode maillist by Julian Burgos
  (add-to-list 'image-file-name-extensions "pdf")
  (add-to-list 'image-file-name-extensions "eps")

  (add-to-list 'image-type-file-name-regexps '("\\.eps\\'" . imagemagick))
  (add-to-list 'image-file-name-extensions "eps")
  (add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
  (add-to-list 'image-file-name-extensions "pdf")

  (setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
  )
#+END_SRC

* Misceláneos

** [[https://github.com/gizmomogwai/org-kanban][org-kanban]]

#+BEGIN_SRC emacs-lisp
(use-package org-kanban
 :ensure t)
#+END_SRC

** [[https://github.com/abo-abo/org-download][org-download]]

#+BEGIN_SRC emacs-lisp
(use-package org-download
  :init
  (require 'org-download)
  :config
  ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable))
#+END_SRC

** =interleave=

Del sitio [[https://github.com/rudolfochrist/interleave][web]]:

#+BEGIN_QUOTE
Some history, what this is all about

In the past, textbooks were sometimes published as interleaved
editions. That meant, each page was followed by a blank page and
ambitious students/scholars had the ability to take their notes
directly in their copy of the textbook. Newton and Kant were prominent
representatives of this technique [fn:blumbach].

Nowadays textbooks (or lecture material) come in PDF format. Although
almost every PDF Reader has the ability to add some notes to the PDF
itself, it is not as powerful as it could be. This is what this Emacs
minor mode tries to accomplish. It presents your PDF side by side to
an Org Mode buffer with you notes. Narrowing down to just those
passages that are relevant to this particular page in the document
viewer.

In a later step it should be possible to create truly interleaved PDFs of your notes.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package interleave
  :defer t
  :bind ("C-x i" . interleave-mode)
  :config
  (setq interleave-split-direction 'horizontal
        interleave-split-lines 20
        interleave-disable-narrowing t))
#+END_SRC



** =org-attach-screenshot=

#+BEGIN_SRC emacs-lisp
(use-package org-attach-screenshot
  :diminish
  :after (org)
  :bind
  (("C-c S" . org-attach-screenshot)))
#+END_SRC




**  =org-ref=

#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :defer t
  :init
  (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))

  ;; see org-ref for use of these variables
  (setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
        org-ref-default-bibliography '("~/Dropbox/bibliography/references.bib")
        org-ref-pdf-directory "~/Dropbox/bibliography/bibtex-pdfs/"
        org-latex-prefer-user-labels t
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")))
#+END_SRC

* Proveer

  #+BEGIN_SRC emacs-lisp
    (provide 'init-org-mode)
  #+END_SRC
