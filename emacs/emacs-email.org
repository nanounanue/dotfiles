#+TITLE: Email
#+AUTHOR: Adolfo De Unánue
#+EMAIL:  nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY:    header-args:emacs-lisp  :tangle ~/.emacs.d/elisp/setup-email.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args:python :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+TAGS:   emacs python

* Dependencias

** [[https://www.djcbsoftware.nl/code/mu/mu4e.html][=mu=]]

*** Clonar el repositorio
#+begin_src shell :dir ~/software
git clone https://github.com/djcb/mu.git
#+end_src

*** [[https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html#Installation][Dependencias]]

#+begin_src shell :dir /sudo::
apt install -y libgmime-3.0-dev libxapian-dev \
               guile-2.0-dev html2text xdg-utils \
               libwebkitgtk-3.0-dev
#+end_src


*** Instalar

#+begin_src shell :dir ~/software/mu
./autogen.sh && ./configure && make
#+end_src

#+begin_src emacs-lisp :dir /sudo::~/software/mu
make install
#+end_src

** Cifrado de /passwords/

#+begin_src shell :dir /sudo::
apt install gpg2 gpg
#+end_src

*** SMTP
Las contraseñas están cifradas en los arhivo =.authinfo.gpg= de la
siguiente manera:

#+begin_example
machine smtp.gmail.com login <cuenta> port 587 password <password>
machine smtp.gmail.com login <cuenta> port 993 password <password>
#+end_example

Primero hay que crear un archivo =.authinfo= con esa estructura, dos
líneas por cuenta. Al terminar, hay que cifrar con:

#+begin_example
gpg2 -c .authinfo
#+end_example

Esto generará el archivo =.authinfo.gpg=. Ahora puedes borrar el
archivo =.authinfo=.

*NOTA*: También es posible hacerlo desde =Emacs= con
=epa-encrypt-file=.

*NOTA*: Este archivo también puede contener otras claves para
conectarse a otros equipos.

*** IMAP

Existen otros dos archivos que contienen el /password/ (y nada más) de
IMAP.

El procedimiento para cifrarlo es el mismo que en el caso de =SMTP=

En particular, estamos usando [[file:~/dotfiles/mbsyncrc.org][=mbsync=]].



** Paquete para convertir =html= a =texto=
(aunque está /deprecado/)

#+begin_src shell :dir /sudo::
apt install html2text
#+end_src

** Directorio para /encolar/ mensajes (cuando estoy /off-line/)

#+begin_src shell :dir ~
mu mkdir ~/Maildir/adolfoaz-gmail/queue && touch ~/Maildir/adolfoaz-gmail/queue/.noindex
#+end_src

#+begin_src shell :dir ~
mu mkdir ~/Maildir/nanounanue-gmail/queue && touch ~/Maildir/nanounanue-gmail/queue/.noindex
#+end_src

#+begin_src shell :dir ~
mu mkdir ~/Maildir/uchicago/queue && touch ~/Maildir/uchicago/queue/.noindex
#+end_src

#+begin_src shell :dir ~
mu mkdir ~/Maildir/itam/queue && touch ~/Maildir/itam/queue/.noindex
#+end_src


#+begin_src shell :dir ~
mu mkdir ~/pCloudDrive/Maildir/fmail/queue && touch ~/pCloudDrive/Maildir/fmail/queue/.noindex
#+end_src


* Mu4e

- [[https://www.djcbsoftware.nl/code/mu/mu4e/EV-Keybindings.html#EV-Keybindings][/Keybindings/ en el mensaje a enviar]]
- [[https://www.djcbsoftware.nl/code/mu/mu4e/MSGV-Keybindings.html#MSGV-Keybindings][/Keybindings/ en el cuerpo del mensaje]]
- [[https://www.djcbsoftware.nl/code/mu/mu4e/Keybindings.html#Keybindings][/Keybindings/ en el header]]
- [[https://www.djcbsoftware.nl/code/mu/mu4e/Queries.html#Queries][Queries]]


#+begin_src emacs-lisp
(use-package org-mime)

(use-feature mu4e
  :init (require 'mu4e)
  :load-path "/usr/local/share/emacs/site-lisp/mu4e"
  :config
  (setq mu4e-use-fancy-chars nil)
  (setq mail-user-agent 'mu4e-user-agent) ;; Mu4e como el cliente de correo por /default/ de GNU/Emacs
  (setq mu4e-mu-binary "/usr/local/bin/mu")
  (setq mu4e-maildir "~/pCloudDrive/Maildir")
  (setq mu4e-get-mail-command "mbsync -c ~/pCloudDrive/config/mbsyncrc -a -q")
  (setq mu4e-headers-skip-duplicates t)
  (setq
   mu4e-index-cleanup nil      ;; don't do a full cleanup check
   mu4e-index-lazy-check t)    ;; don't consider up-to-date dirs
  (setq mu4e-view-prefer-html t)
  (setq mu4e-update-interval 300)    ;; nil = No actualizar
  (setq mu4e-compose-format-flowed t)
  (setq mu4e-headers-include-related t)
  (setq message-ignored-cited-headers nil)
  (setq mu4e-headers-auto-update t)
  (setq mu4e-attachment-dir  "~/Downloads")
  ;; This prevents saving the email to the Sent folder since gmail will do this for us on their end.
  ;;(setq mu4e-sent-messages-behavior 'delete)
  (setq message-kill-buffer-on-exit t)
  ;; Enable inline images.
  (setq mu4e-view-show-images t)
  (setq mu4e-view-show-addresses t)
  (setq mu4e-maildir (expand-file-name "~/pCloudDrive/Maildir/fmail"))


  (setq
   mu4e-refile-folder "/Archive"
   mu4e-trash-folder  "/Trash"
   mu4e-sent-folder   "/Sent"
   mu4e-drafts-folder "/Drafts"
   )

  ;; setup some handy shortcuts
  (setq mu4e-maildir-shortcuts
        '(("/INBOX"   . ?i)
	  ("/Sent"    . ?s)
	  ("/Archive" . ?a)
	  ("/Trash"   . ?t)))



   ;; Use imagemagick, if available.
   (when (fboundp 'imagemagick-register-types)
     (imagemagick-register-types))

   ;; to view selected message in the browser, no signin, just html mail
   (add-to-list 'mu4e-view-actions
                '("open in browser" . mu4e-action-view-in-browser) t)

   (setq mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")


   (add-hook 'mu4e-view-mode-hook #'visual-line-mode)
   (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)

   ;; every new email composition gets its own frame!
   (setq mu4e-compose-in-new-frame nil)

   ;; list of my email addresses.
   (setq mu4e-user-mail-address-list '("adolfoaz@gmail.com"
                                       "nanounanue@gmail.com"
                                       "adolfo@uchicago.edu"
                                       "adolfo@unanue.mx"
                                       "a@unanue.mx"
                                       "unanue@itam.mx"))


   ;; from https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/elgoumx
   (add-hook 'mu4e-headers-mode-hook
             (defun nanounanue/mu4e-change-headers ()
	       (interactive)
	       (setq mu4e-headers-fields
	             `((:human-date . 25) ;; alternatively, use :date
		       (:flags . 6)
		       (:from . 22)
		       (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
		       (:size . 7)))))

   ;; Try to automatically decrypt emails
   (setq mu4e-decryption-policy t)

   ;;Kill message buffer after sending the email
   (setq message-kill-buffer-on-exit t)

   (setq  mu4e-headers-date-format "%Y-%m-%d %H:%M")

   ;; don't ask when quitting
   (setq mu4e-confirm-quit nil)


   ;; Use the correct account context when sending mail based on the from header.
   (setq message-sendmail-envelope-from 'header)
   (add-hook 'message-send-mail-hook 'choose-msmtp-account)


   ;; This sets up my two different context for my personal and work emails.
   (setq mu4e-context-policy 'pick-first)
   (setq mu4e-compose-context-policy 'always-ask)
   (setq mu4e-contexts
         (list
          (make-mu4e-context
           :name "adolfoaz"
           :match-func (lambda (msg)
                         (when msg
                           (mu4e-message-contact-field-matches msg '(:from :to :cc :bcc) "adolfoaz@gmail.com")))
           :vars '((user-mail-address     . "adolfoaz@gmail.com")
                   (user-full-name        . "Adolfo De Unanue")
                   (mu4e-compose-signature . "Adolfo De Unanue")
           ))
          (make-mu4e-context
           :name "nanounanue"
           :match-func (lambda (msg)
                         (when msg
                           (mu4e-message-contact-field-matches msg '(:from :to :cc :bcc) "nanounanue@gmail.com")))
           :vars '((user-mail-address     . "nanounanue@gmail.com")
                   (user-full-name        . "Adolfo De Unánue")
                   (mu4e-compose-signature . "Adolfo De Unánue")

           ))
          (make-mu4e-context
           :name "chicago"
           :match-func (lambda (msg)
                         (when msg
                           (mu4e-message-contact-field-matches msg '(:from :to :cc :bcc) "adolfo@uchicago.edu")))
           :vars '((user-mail-address     . "adolfo@uchicago.edu")
                   (user-full-name        . "Adolfo De Unánue")
                   (mu4e-compose-signature . "Adolfo De Unánue")
            	   )
           )
          (make-mu4e-context
           :name "itam"
           :enter-func (lambda () (mu4e-message "Switch to the itam context"))
           :match-func (lambda (msg)
                         (when msg
                           (mu4e-message-contact-field-matches msg '(:from :to :cc :bcc) "unanue@itam.mx")))
           :leave-func (lambda () (mu4e-clear-caches))
           :vars '((user-mail-address     . "unanue@itam.mx")
                   (user-full-name        . "Adolfo De Unánue")
                   (mu4e-compose-signature .
                                           (concat
		                            "Adolfo De Unánue\n"
		                            "ITAM, Maestría en Ciencia de Datos\n"
                                            "Director Académico\n"
                                            "Tel. (+52) 555628-4000 ext. 4052\n"
                                            ))
           ))

          (make-mu4e-context
           :name "unanue.mx"
           :enter-func (lambda () (mu4e-message "Switch to the unanue.mx context"))
           :match-func (lambda (msg)
                         (when msg
                           (mu4e-message-contact-field-matches msg '(:from :to :cc :bcc) "unanue.mx")))
           :leave-func (lambda () (mu4e-clear-caches))
           :vars '((user-mail-address     . "adolfo@unanue.mx")
                   (user-full-name        . "Adolfo De Unánue")
                   (mu4e-compose-signature .
                                           (concat
		                            "Adolfo De Unánue\n"
		                            "ITAM, Maestría en Ciencia de Datos\n"
                                            "Director Académico\n"
                                            "Tel. (+52) 555628-4000 ext. 4052\n"
                                            ))
           ))

           ))

   ;; Bookmarks for common searches that I use.
   (setq mu4e-bookmarks
      `( ,(make-mu4e-bookmark
       :name  "Mensajes sin leer"
       :query "flag:unread AND NOT flag:trashed"
       :key ?u)
     ,(make-mu4e-bookmark
       :name "Mensajes de hoy"
       :query "date:today..now"
       :key ?t)
     ,(make-mu4e-bookmark
       :name "Última semana"
       :query "date:7d..now"
       :key ?w)
     ,(make-mu4e-bookmark
       :name "Mensajes con documentos de office"
       :query "mime:application/vnd*"
       :key ?O)
     ,(make-mu4e-bookmark
       :name "Mensajes con PDFs"
       :query "mimeÑapplication/pdf"
       :key ?p)
     ,(make-mu4e-bookmark
       :name "Finance News"
       :query (concat "from:etnotifications@indiatimes.com OR "
              "from:newsletters@valueresearchonline.net"
              "from:value research")
       :key ?f)
     ,(make-mu4e-bookmark
       :name "Science and Technology"
       :query (concat "from:googlealerts-noreply@google.com OR "
              "from:reply@email.engineering360.com OR "
              "from:memagazine@asme.org"
              "from:action@ifttt.com"
              "from:digitaleditions@techbriefs.info")
       :key ?S)
         )))
#+end_src

* mu4e-contrib

#+begin_src emacs-lisp
(use-feature mu4e-contrib
  :load-path "/usr/local/share/emacs/site-lisp/mu4e"
  :demand t)
#+end_src

* Org-mu4e

#+begin_src emacs-lisp
(use-feature org-mu4e
  :load-path "/usr/local/share/emacs/site-lisp/mu4e"
  :demand t
  :init
  (require 'org-mu4e)
  :after (org mu4e)
  :custom
  (org-mu4e-convert-to-html t) ;; org -> html
  :config
;;store link to message if in header view, not to header query
  (setq org-mu4e-link-query-in-headers-mode nil)
  ;; Agregando un template para contestar correos luego
  (add-to-list 'org-capture-templates
               '("P" "contestar pronto" entry
                (file+headline "~/Sync/org/refile.org" "Todo")
                "* TODO 📪 %a %?\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))" :empty-lines 1))
  (add-to-list 'org-capture-templates
               '("L" "link a correo" entry
                (file+headline "~/Sync/org/refile.org" "Correos")
                "* 📧: %? (%a)" :empty-lines 1))
  (add-hook 'mu4e-compose-mode-hook 'org-mu4e-compose-org-mode)
  ;; Org capture en header and view mode
  (define-key mu4e-headers-mode-map (kbd "C-c c") 'org-mu4e-store-and-capture)
  (define-key mu4e-view-mode-map    (kbd "C-c c") 'org-mu4e-store-and-capture))
#+end_src

* Send mail

#+begin_src emacs-lisp
(use-package smtpmail)

(use-feature mu4e
  :config
  ;; Config for sending email
  (setq
   message-send-mail-function 'message-send-mail-with-sendmail
   send-mail-function 'sendmail-send-it
   message-kill-buffer-on-exit t
   )

  ;;rename files when moving
  ;;NEEDED FOR MBSYNC
  (setq mu4e-change-filenames-when-moving t)

  ;;set up queue for offline email
  ;;use mu mkdir  ~/Maildir/acc/queue to set up first
  (setq smtpmail-queue-mail nil)  ;; start in normal mode

  ;;from the info manual
  (setq mu4e-attachment-dir  "~/pCloudDrive/Downloads/mail-attachments")

  (setq message-kill-buffer-on-exit t)
  (setq mu4e-compose-dont-reply-to-self t)

  ;; don't ask when quitting
  (setq mu4e-confirm-quit nil)
  (setq smtpmail-queue-dir "~/pCloudDrive/Maildir/fmail/queue/cur")
  (setq smtpmail-smtp-user  "adolfo@unanue.mx")
  ;;(setq smtpmail-starttls-credentials . (("smtp.fastmail.com" 587 nil nil)))
  (setq smtpmail-auth-credentials (expand-file-name "~/.authinfo.gpg"))
  (setq smtpmail-default-smtp-server "smtp.fastmail.com")
  (setq smtpmail-smtp-server "smtp.fastmail.com")
  (setq smtpmail-smtp-service 587)
  (setq smtpmail-debug-info t)
  (setq smtpmail-debug-verbose t)

  )
#+end_src


* Alerts
#+begin_src emacs-lisp
(use-package mu4e-alert
  :after mu4e
  :hook ((after-init . mu4e-alert-enable-mode-line-display)
         (after-init . mu4e-alert-enable-notifications))
;  :config (mu4e-alert-set-default-style 'libnotify)
)
#+end_src

* [[https://github.com/flexibeast/org-vcard][Contactos]]

#+begin_src emacs-lisp
(use-package org-vcard
  :after mu4e
  :config
  (setq org-contacts-files '("~/Sync/org/contactos.org"))
  (setq mu4e-org-contacts-file '("~/Sync/org/contactos.org"))
  (add-to-list 'mu4e-headers-actions
               '("agregar contacto" . mu4e-action-add-org-contact) t)
  (add-to-list 'mu4e-view-actions
               '("agregar contacto" . mu4e-action-add-org-contact) t))
#+end_src

* Calendario

#+begin_src emacs-lisp
(use-feature mu4e
  :demand t
  :config
  (setq mu4e-view-use-gnus t)
  (require 'mu4e-icalendar)
  (mu4e-icalendar-setup)
  (setq mu4e-icalendar-trash-after-reply t)
  (require 'org-agenda)
  (setq gnus-icalendar-org-capture-file "~/Sync/org/notes.org")
  (setq gnus-icalendar-org-capture-headline '("Calendar"))
  (gnus-icalendar-org-setup)
  )
#+end_src

* /Workflow/

I am trying to avoid use C-x m to write/sent email directy, unless it
is really short. otherwise, if it relates to a project, I will make an
org headline to keep track the project communciation, to do that, I
compose email/message in org mode, then sent the whole subtree by C-c
M-o.

#+begin_src emacs-lisp
  (use-package org-mime
    :config
    (setq org-mime-library 'mml)
    (add-hook 'message-mode-hook
              (lambda ()
                (local-set-key "\C-c\M-o" 'org-mime-htmlize)))
    (add-hook 'org-mode-hook
              (lambda ()
                (local-set-key "\C-c\M-o" 'org-mime-org-buffer-htmlize)))
    (add-hook 'org-mime-html-hook
              (lambda ()
                (insert-file-contents "~/Sync/css/office.css")
                ;; (goto-char 5)
                )
              t)

    (add-hook 'org-mode-hook
              (lambda ()
                (local-set-key (kbd "C-c M-o") 'org-mime-subtree))
              'append))
#+end_src

* Fin

#+BEGIN_SRC emacs-lisp
(provide 'setup-email)
#+END_SRC
