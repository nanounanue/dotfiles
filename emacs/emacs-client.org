#+TITLE:  Emacs: Configuración de clientes
#+AUTHOR: Adolfo De Unánue
#+EMAIL:  nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY:    header-args:emacs-lisp  :tangle ~/.config/emacs/elisp/setup-client.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+TAGS:   emacs

Configuración para clientes gráficos

* Generalidades

No usar /dialog-boxes/

#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
#+END_SRC


* Default text scale

#+begin_src emacs-lisp
(use-package default-text-scale)
#+end_src

* Fuentes

** Fuente por default

Alternativas: 

- Ubuntu Mono-16
- Source Code Pro Semibold-14
- DejaVu Sans Mono-14
- Fira Sans
- Hack

- EB Garamond -> Para headings, no para código
- Iosevka

#+begin_src emacs-lisp
(setq default-font "Ubuntu Mono-16")
(set-face-attribute 'default nil :font default-font)
;;(set-face-attribute 'default nil :font "Source Code Pro Semibold-14")
(set-face-attribute 'mode-line nil :font "DejaVu Sans Mono")

;;(set-fontset-font "fontset-default" nil
;;                    (font-spec :size 20 :name "Ubuntu Mono"))
;;(set-fontset-font t 'unicode "Ubuntu Mono" nil 'prepend)
#+end_src


Para otras alternativas ver [[file:~/dotfiles/fonts.org][otras fuentes instaladas]]

Org-mode está [[file:emacs-org-mode.org][configurado]] diferente

Para ver que familias de fuentes están disponibles:

#+BEGIN_SRC emacs-lisp :tangle no
(message "%s" (font-family-list))
#+END_SRC

** Ajustes

#+BEGIN_SRC emacs-lisp
  (use-feature text-mode
    :demand t
    :hook (text-mode . (lambda ()
                         (variable-pitch-mode 1))))
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle no
(use-package typo
  ;ensure t
  :config
  (typo-global-mode 1)
  (add-hook 'text-mode-hook 'typo-mode))
#+END_SRC

Por último habilitamos en el mismo /buffer/ paralabras con /pitch/
variable (para texto) y fijas (para código)

#+begin_src emacs-lisp
(use-package mixed-pitch
  :demand t
  :hook
  (text-mode . mixed-pitch-mode))
#+end_src



** Activar /syntax highlighting/ globalmente

 #+BEGIN_SRC emacs-lisp
 (global-font-lock-mode 1)
 #+END_SRC


** Paréntesis

Agrega /face/ a los paréntesis, de tal manera que los temas puedan oscurecerlos

#+BEGIN_SRC emacs-lisp
(use-package paren-face
  ;ensure t
  :init (global-paren-face-mode))
#+END_SRC

*  Temas

Para temas populares ver [[https://emacsthemes.com/popular/index.html][aquí]]

** Spacemacs
#+begin_src emacs-lisp
(use-package spacemacs-theme)
#+end_src

** Zenburn

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    ;ensure t
    :config
    ;; use variable-pitch fonts for some headings and titles
    (setq zenburn-use-variable-pitch t)

    ;; scale headings in org-mode
    (setq zenburn-scale-org-headlines t)

    ;; scale headings in outline-mode
    (setq zenburn-scale-outline-headlines t))
#+END_SRC

** Solarized

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    ;ensure t
    :config
    (setq x-underline-at-descent-line t))
#+END_SRC

** Gruvbox

#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme)
#+END_SRC


** Poet

#+BEGIN_SRC emacs-lisp
(use-package poet-theme)
#+END_SRC

** Nord

#+BEGIN_SRC emacs-lisp
(use-package nord-theme
  :config
  (add-to-list 'custom-theme-load-path (expand-file-name "~/.config/emacs/themes/"))
  (load-theme 'nord t))

(use-package doom-modeline
  :defer 0.1
  :config (doom-modeline-mode))

(use-package fancy-battery
  :after doom-modeline
  :hook (after-init . fancy-battery-mode))
#+END_SRC

** Zerodark

#+begin_src emacs-lisp
(use-package zerodark-theme)
#+end_src

** [[https://github.com/vbuzin/berrys-theme][Berrys]]

#+begin_src emacs-lisp :tangle no
(use-package berrys-theme)
#+end_src

** [[https://github.com/anler/minimal-theme][Minimal]]

#+begin_src emacs-lisp
(use-package minimal-theme)
#+end_src

** Doom themes

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  ;; (doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src


** [[https://github.com/osener/emacs-afternoon-theme][Afternoon]]

#+begin_src emacs-lisp
(use-package afternoon-theme)
#+end_src


** [[https://github.com/alezost/alect-themes][Alect]]

#+begin_src emacs-lisp
(use-package alect-themes)
#+end_src

** [[https://github.com/jordonbiondo/ample-theme][Ample]]

#+begin_src emacs-lisp
(use-package ample-theme)
#+end_src


** [[https://gitlab.com/protesilaos/modus-themes][Modus]]

#+begin_src emacs-lisp 
(use-package modus-vivendi-theme)
(use-package modus-operandi-theme)
#+end_src



** Selección del tema 


#+begin_src emacs-lisp
(if (display-graphic-p)
    (load-theme 'alect-dark 'no-confirm)
  (load-theme 'wheatgrass))  ;; wheatgrass included in emacs
#+end_src


* all-the-icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(all-the-icons-install-fonts)
#+END_SRC

Integrarlo con [[file:emacs-ivy.org][ivy y counsel]]
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-ivy
  :demand t
  :after (all-the-icons ivy)
  :custom (all-the-icons-ivy-file-commands '(counsel-dired-jump
                                             counsel-find-file
                                             counsel-file-jump
                                             counsel-find-library
                                             counsel-git
                                             counsel-projectile-find-dir
                                             counsel-projectile-find-file
                                             counsel-recentf))
  (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window))
  :config
  (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
  (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
  (all-the-icons-ivy-setup))
#+END_SRC

 =dired=

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :demand t
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

#+END_SRC

Y finalmente =company-box= (/Front end/ con íconos para =company=)

#+BEGIN_SRC emacs-lisp
(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+END_SRC


* mode-line

Por el momento uso [[https://github.com/Malabarba/smart-mode-line/][smart-mode-line]]

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :demand t
  :config
  (setq sml/shorten-directory t)
  (setq sml/shorten-modes t)
  (setq sml/no-confirm-load-theme t)
  (sml/setup))
#+END_SRC


* Dashboard

|----------------------------+------------------|
| Shortcut                   | Function         |
|----------------------------+------------------|
| Tab Or C-i                 | Next Item        |
| Shift-Tab                  | Previous Item    |
| Return / Mouse Click / C-m | Open             |
| r                          | Recent files     |
| m                          | Bookmarks        |
| p                          | Projects         |
| a                          | Org-Mode Agenda  |
| e                          | Registers        |
| g                          | Refresh contents |
| {                          | Previous section |
| }                          | Next section     |

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :demand t
  :preface
  (defun nanounanue/dashboard-banner ()
    "Sets a dashboard banner including information on package initialization
     time and garbage collections."
    (setq dashboard-banner-logo-title
          (format "Emacs ready in %.2f seconds with %d garbage collections."
                  (float-time
                   (time-subtract after-init-time before-init-time)) gcs-done)))
  :hook
  (dashboard-mode . nanounanue/dashboard-banner)
  :custom
  (dashboard-startup-banner 'official)
  ;; Content is not centered by default. To center, set
  (dashboard-center-content t)

  ;; To disable shortcut "jump" indicators for each section, set
  (dashboard-show-shortcuts t)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-items '((recents  . 5)
                     (projects . 5)))

  ;;To show info about the packages loaded and the init time:
  (dashboard-set-init-info t)

  :config
  (dashboard-setup-startup-hook))
#+END_SRC

* Zoom

#+begin_src emacs-lisp
(use-package zoom-frm)
#+end_src

* Tabs

*NOTA*: Deshabilitado, no agrega valor y ocupa mucho espacio

#+begin_src emacs-lisp
(use-package centaur-tabs
  :disabled t
  :config
  (setq centaur-tabs-style "bar")
  (setq centaur-tabs-height 30)
  (setq centaur-tabs-modified-marker "●")
  (setq centaur-tabs-set-icons t)
  (setq centaur-tabs-set-bar 'over)
  (setq centaur-tabs-set-modified-marker t)
  (centaur-tabs-headline-match)
  (centaur-tabs-mode t)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward))
#+end_src

* Clientes

** [[https://github.com/syohex/emacs-emamux/][Emamux]]

¡Controla =tmux= desde Emacs!

#+begin_src emacs-lisp
(use-package emamux)
#+end_src

** Pocket Reader

Uno de los elementos *indispensables* para una experiencia de lectura
rica es =pocket=:

#+begin_src emacs-lisp :tangle no
(use-package pocket-reader)
#+end_src

La primera vez, ejecuta

#+begin_src emacs-lisp :tangle no
(pocket-reader)
#+end_src


Y luego sigue las instrucciones.


* Al final

#+BEGIN_SRC emacs-lisp
(provide 'setup-client)
#+END_SRC
