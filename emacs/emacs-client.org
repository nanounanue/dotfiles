#+TITLE:  Emacs: Configuración de clientes
#+AUTHOR: Adolfo De Unánue
#+EMAIL:  nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY:    header-args:elisp  :tangle ~/.emacs.d/elisp/init-client.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+TAGS:   emacs

Configuración para clientes gráficos

* /Key Bindings/

El artículo [[http://emacsninja.com/posts/making-emacs-more-presentable.html][Making Emacs More Presentable]], muestra este truco que
cambia el tamaño de la fuente, en la /window/ no el /buffer/

  #+BEGIN_SRC elisp
    (defun nanounanue/text-scale-frame-change (fn)
      (let* ((current-font-name (frame-parameter nil 'font))
             (decomposed-font-name (x-decompose-font-name current-font-name))
             (font-size (string-to-int (aref decomposed-font-name 5))))
        (aset decomposed-font-name 5 (int-to-string (funcall fn font-size)))
        (set-frame-font (x-compose-font-name decomposed-font-name))))

    (defun nanounanue/text-scale-frame-increase ()
      (interactive)
      (nanounanue/text-scale-frame-change '1+))

    (defun nanounanue/text-scale-frame-decrease ()
      (interactive)
      (nanounanue/text-scale-frame-change '1-))

    (bind-keys
     ("s-C-+" . nanounanue/text-scale-frame-increase)
     ("A-C-+" . nanounanue/text-scale-frame-increase)
     ("s-C-=" . nanounanue/text-scale-frame-increase)
     ("A-C-=" . nanounanue/text-scale-frame-increase)
     ("s-C--" . nanounanue/text-scale-frame-decrease)
     ("A-C--" . nanounanue/text-scale-frame-decrease))
  #+END_SRC

Nunca abandonamos Emacs...


#+BEGIN_SRC elisp
(setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC


* Fuentes

Activar /syntax highlighting/ globalmente

 #+BEGIN_SRC elisp
 (global-font-lock-mode 1)
 #+END_SRC

¡Hay tantas opciones! Y yo  nunca me decido. Ver [[file:~/dotfiles/fonts.org][aquí]] para instalarlas.

** Fixed Font

  #+BEGIN_SRC elisp
    (defvar nanounanue/fixed-font-family
      (cond ((x-list-fonts "Hasklig")         "Hasklig")
            ((x-list-fonts "Source Code Pro") "Source Code Pro")
            ((x-list-fonts "Anonymous Pro")   "Anonymous Pro")
            ((x-list-fonts "Overpass Mono")   "Overpass Mono")
            ((x-list-fonts "M+ 1mn")          "M+ 1mn"))
      "Fixed width font, si es que está instalada, `nil' si no lo está.")
  #+END_SRC

** Variable font

  #+BEGIN_SRC  elisp
    (defvar nanounanue/variable-font-tuple
      (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
            ((x-list-fonts "Iosevka")         '(:font "Iosevka"))
            ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
            ((x-list-fonts "Verdana")         '(:font "Verdana"))
            ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
            (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro.")))
      "Variable fonts, principalmente para Org-mode (si están instaladas).")
  #+END_SRC



  
** [[https://gitlab.com/jabranham/mixed-pitch][Mixed-pitch]]

#+BEGIN_SRC emacs-lisp 
(use-package mixed-pitch
  :hook
  ;; If you want it in all text modes:
  (text-mode . mixed-pitch-mode))
#+END_SRC
  
*  [[https://emacsthemes.com/popular/index.html][Temas]]

** Zenburn

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config
    ;; use variable-pitch fonts for some headings and titles
    (setq zenburn-use-variable-pitch t)

    ;; scale headings in org-mode
    (setq zenburn-scale-org-headlines t)

    ;; scale headings in outline-mode
    (setq zenburn-scale-outline-headlines t)
    (load-theme 'zenburn t))
#+END_SRC

** Solarized

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :ensure t
  :disabled t
  :config
  (load-theme 'solarized-light t))
#+END_SRC


* all-the-icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
:ensure t)
#+END_SRC

Integrarlo con [[file:emacs-ivy.org][ivy y counsel]] 

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-ivy
    :after (all-the-icons ivy)
    :custom (all-the-icons-ivy-file-commands '(counsel-dired-jump
                                               counsel-find-file
                                               counsel-file-jump
                                               counsel-find-library
                                               counsel-git
                                               counsel-projectile-find-dir
                                               counsel-projectile-find-file
                                               counsel-recentf))
    :config (all-the-icons-ivy-setup))
#+END_SRC

Y =dired=

#+BEGIN_SRC emacs-lisp
 (use-package all-the-icons-dired
        :ensure t
        :config
        (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
        )
#+END_SRC

* Al final

#+BEGIN_SRC elisp
(provide 'init-client)
#+END_SRC
