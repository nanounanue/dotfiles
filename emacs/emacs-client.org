#+TITLE:  Emacs: Configuración de clientes
#+AUTHOR: Adolfo De Unánue
#+EMAIL:  nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY:    header-args:emacs-lisp  :tangle ~/.emacs.d/elisp/setup-client.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+TAGS:   emacs

Configuración para clientes gráficos

* Generalidades

No usar /dialog-boxes/

#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
#+END_SRC


* /Key Bindings/

El artículo [[http://emacsninja.com/posts/making-emacs-more-presentable.html][Making Emacs More Presentable]], muestra este truco que
cambia el tamaño de la fuente, en la /window/ no el /buffer/

  #+BEGIN_SRC emacs-lisp
    (defun nanounanue/text-scale-frame-change (fn)
      (let* ((current-font-name (frame-parameter nil 'font))
             (decomposed-font-name (x-decompose-font-name current-font-name))
             (font-size (string-to-int (aref decomposed-font-name 5))))
        (aset decomposed-font-name 5 (int-to-string (funcall fn font-size)))
        (set-frame-font (x-compose-font-name decomposed-font-name))))

    (defun nanounanue/text-scale-frame-increase ()
      (interactive)
      (nanounanue/text-scale-frame-change '1+))

    (defun nanounanue/text-scale-frame-decrease ()
      (interactive)
      (nanounanue/text-scale-frame-change '1-))

    (bind-keys
     ("s-C-+" . nanounanue/text-scale-frame-increase)
     ("A-C-+" . nanounanue/text-scale-frame-increase)
     ("s-C-=" . nanounanue/text-scale-frame-increase)
     ("A-C-=" . nanounanue/text-scale-frame-increase)
     ("s-C--" . nanounanue/text-scale-frame-decrease)
     ("A-C--" . nanounanue/text-scale-frame-decrease))
  #+END_SRC

Nunca abandonamos Emacs...


#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC


* Fuentes

Activar /syntax highlighting/ globalmente

 #+BEGIN_SRC emacs-lisp
 (global-font-lock-mode 1)
 #+END_SRC

¡Hay tantas opciones! Y yo  nunca me decido. Ver [[file:~/dotfiles/fonts.org][aquí]] para instalarlas.


Para ver que familias de fuentes están disposnibles:

#+BEGIN_SRC emacs-lisp :tangle no
(message "%s" (font-family-list))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Iosevka" :height 130)
(set-face-attribute 'fixed-pitch nil :family "Iosevka")
(set-face-attribute 'variable-pitch nil :family "Baskerville")
#+END_SRC


#+BEGIN_SRC emacs-lisp
    (add-hook 'text-mode-hook
               (lambda ()
                (variable-pitch-mode 1)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package typo
  :ensure t
  :config
  (typo-global-mode 1)
  (add-hook 'text-mode-hook 'typo-mode))
#+END_SRC

** Paréntesis

Agrega /face/ a los paréntesis, de tal manera que los temas puedan oscurecerlos

#+BEGIN_SRC emacs-lisp
(use-package paren-face
  :ensure t
  :init (global-paren-face-mode))
#+END_SRC

*  [[https://emacsthemes.com/popular/index.html][Temas]]

** Zenburn

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config
    ;; use variable-pitch fonts for some headings and titles
    (setq zenburn-use-variable-pitch t)

    ;; scale headings in org-mode
    (setq zenburn-scale-org-headlines t)

    ;; scale headings in outline-mode
    (setq zenburn-scale-outline-headlines t))
#+END_SRC

** Solarized

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (setq x-underline-at-descent-line t))
#+END_SRC

** Gruvbox

#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme
  :ensure t)
#+END_SRC


** Poet

#+BEGIN_SRC emacs-lisp
(use-package poet-theme
:ensure t)
#+END_SRC


** Tema según horario

Esto es una /excelente/ idea

#+BEGIN_SRC emacs-lisp
(use-package theme-changer
:ensure t
:config
(change-theme 'gruvbox-light-medium 'zenburn)  ;; day and night theme
)
#+END_SRC


* all-the-icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
:ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(all-the-icons-install-fonts)
#+END_SRC

Integrarlo con [[file:emacs-ivy.org][ivy y counsel]]


#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy
    :ensure t
    :after (all-the-icons ivy)
    :custom (all-the-icons-ivy-file-commands '(counsel-dired-jump
                                               counsel-find-file
                                               counsel-file-jump
                                               counsel-find-library
                                               counsel-git
                                               counsel-projectile-find-dir
                                               counsel-projectile-find-file
                                               counsel-recentf))
    :config (all-the-icons-ivy-setup))
#+END_SRC

 =dired=

#+BEGIN_SRC emacs-lisp
 (use-package all-the-icons-dired
        :ensure t
        :config
        (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
        )
#+END_SRC

Y finalmente =company-box= (/Front end/ con íconos para =company=)

#+BEGIN_SRC emacs-lisp
(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+END_SRC


* mode-line

Por el momento uso [[https://github.com/Malabarba/smart-mode-line/][smart-mode-line]]

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :init
  (sml/setup)
  :config
  (setq sml/shorten-directory t
        sml/shorten-modes t))
#+END_SRC

* Dashboard

|----------------------------+------------------|
| Shortcut                   | Function         |
|----------------------------+------------------|
| Tab Or C-i                 | Next Item        |
| Shift-Tab                  | Previous Item    |
| Return / Mouse Click / C-m | Open             |
| r                          | Recent files     |
| m                          | Bookmarks        |
| p                          | Projects         |
| a                          | Org-Mode Agenda  |
| e                          | Registers        |
| g                          | Refresh contents |
| {                          | Previous section |
| }                          | Next section     |

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :preface
  (defun nanounanue/dashboard-banner ()
    "Sets a dashboard banner including information on package initialization
     time and garbage collections."
    (setq dashboard-banner-logo-title
          (format "Emacs ready in %.2f seconds with %d garbage collections."
                  (float-time
                   (time-subtract after-init-time before-init-time)) gcs-done)))
  :init
  (add-hook 'after-init-hook 'dashboard-refresh-buffer)
  (add-hook 'dashboard-mode-hook 'nanounanue/dashboard-banner)
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner 'official)
  ;; Content is not centered by default. To center, set
  (setq dashboard-center-content t)

  ;; To disable shortcut "jump" indicators for each section, set
  (setq dashboard-show-shortcuts t)
  (setq dashboard-items '((recents  . 5)
                          (projects . 5)))
  (setq dashboard-banner-logo-title "")

  ;; Muestra el dashboard en los frames de emacsclient
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+END_SRC


* Al final

#+BEGIN_SRC emacs-lisp
(provide 'setup-client)
#+END_SRC
