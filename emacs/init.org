#+TITLE: Archivo de inicio de GNU/Emacs
#+AUTHOR: Adolfo De Unánue
#+EMAIL: nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+TAGS: emacs

Basado en

- https://github.com/zzamboni/dot-emacs/blob/master/init.org

* Instalar GNU/Emacs

#+begin_src shell :dir ~/software
git clone --depth 1 git://git.sv.gnu.org/emacs.git
#+end_src

#+begin_src shell :tangle no :dir /sudo::
  apt install autoconf make gcc texinfo libgtk-3-dev \
      libxpm-dev libjpeg-dev libgif-dev libtiff5-dev \
      libgnutls28-dev libncurses5-dev librsvg2-dev \
      liblcms2-dev imagemagick libmagick++-dev libgpm-dev \
      libxml2-dev libotf-dev libsystemd-dev libjansson-dev \
      libwebkit2gtk-4.0-dev libm17n-dev
#+end_src

#+begin_src shell :tangle no :dir ~/software/emacs
./autogen.sh && \
./configure --with-modules --with-xwidgets && \
make
#+end_src

#+begin_src shell :tangle no :dir ~/software/emacs/lisp
make autoloads
#+end_src

#+begin_src shell :tangle no :dir /sudo::~/software/emacs
make install
#+end_src


#+begin_src emacs-lisp :tangle no
(emacs-version)
#+end_src

* /Bytecode/ viejo?

Si la versión de =GNU/Emacs= cambió, el bytecode ya no es válido
y debe de ser recompilado.

([[https://github.com/raxod502/radian/blob/1ce41f45932b35291cc746e35d47b2798120cc22/emacs/radian.el#L14][Fuente]])

#+begin_src emacs-lisp
(eval
 `(unless (equal
           (list
            (emacs-version)
            )
           ',(eval-when-compile
               (list
                (emacs-version)
                )))
    (throw 'stale-bytecode nil)))
#+end_src

* Mejorando el desempeño

/Hook/ para contar el número de /garbage-collections/ que ocurrieron durante el /startup/

#+begin_src emacs-lisp
;; Use a hook so the message doesn't get clobbered by other messages.
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src


Por si ocurre un error

#+begin_src emacs-lisp
(setq debug-on-error t)
#+end_src

No queremos que ocurra /garbage-collection/ durante el inicio de Emacs, así que lo hacemos muy grande.
Al acabar, lo regresamos a un tamaño razonable.

#+begin_src emacs-lisp
  (setq gc-cons-threshold  most-positive-fixnum)
  (add-hook 'emacs-startup-hook
            (lambda () (setq gc-cons-threshold  (* 20 1024 1024))))
#+end_src

* Network


*NOTA*: Estamos usando =with-eval-after-load= en lugar de =use-package= porque aún
no sea configurado el administrador de paquetes

#+begin_src emacs-lisp
;; Feature `gnutls' provides support for SSL/TLS connections, using
;; the GnuTLS library.
(with-eval-after-load 'gnutls
  (eval-when-compile
    (require 'gnutls))

  ;; Do not allow insecure TLS connections.
  (setq gnutls-verify-error t)

  ;; Bump the required security level for TLS to an acceptably modern
  ;; value.
(setq gnutls-min-prime-bits 3072))
#+end_src

* /Load path/

#+begin_src emacs-lisp
(defconst nanounanue/emacs-directory (concat (getenv "HOME") "/.config/emacs/"))

(defun nanounanue/emacs-subdirectory (d) (expand-file-name d nanounanue/emacs-directory))

(defconst temp-dir (format "%s/cache" nanounanue/emacs-directory)
  "Hostname-based elisp temp directories")
#+end_src

#+begin_src emacs-lisp
(add-to-list 'load-path (nanounanue/emacs-subdirectory "elisp"))
#+end_src

* Gestión de paquetes

#+begin_src emacs-lisp
(require 'setup-package-manager)
#+end_src


* /Global Keybindings/

#+begin_src emacs-lisp
(require 'setup-global-keys)
#+end_src

* Funciones

#+begin_src emacs-lisp
(require 'setup-functions)
#+end_src

* Generalidades

#+begin_src emacs-lisp
(require 'setup-main)
#+end_src

* [[file:emacs-ivy.org][Ivy]]

#+begin_src emacs-lisp
(require 'setup-ivy)
#+end_src

* Programación

#+begin_src emacs-lisp
(require 'setup-coding)
#+end_src

* [[file:emacs-org-mode.org][Org-Mode]]

=Org-mode= sobre todas las cosas

#+begin_src emacs-lisp
(require 'setup-org-mode)
#+end_src

* [[file:emacs-eshell.org][Eshell]]

#+begin_src emacs-lisp
(require 'setup-eshell)
#+end_src

* Elfeed

#+begin_src emacs-lisp
(require 'setup-elfeed)
#+end_src

* Tramp

#+begin_src emacs-lisp
(require 'setup-remote)
#+end_src

* [[file:emacs-i3wm.org][Integración con i3wm]]

#+begin_src emacs-lisp :tangle no
(require 'setup-i3wm)
#+end_src


* Configuración del servidor

#+begin_src emacs-lisp
(require 'setup-server)
#+end_src

* /Heil Hydra!/

#+begin_src emacs-lisp
(require 'setup-hydra)
#+end_src

* Email client

#+begin_src emacs-lisp
(require 'setup-email)
#+end_src

* PDF tools

#+begin_src emacs-lisp
(require 'setup-pdftools)
#+end_src

* Configuración gráfica

#+begin_src emacs-lisp
(require 'setup-client)
#+end_src
