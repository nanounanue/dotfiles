#+TITLE: Configuración de PDF-tools
#+AUTHOR: Adolfo De Unánue
#+EMAIL: nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/elisp/setup-pdftools.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+TAGS: emacs

* PDF Tools
[[https://github.com/politza/pdf-tools][
Github page]]

Dependencias:

#+BEGIN_SRC shell :dir /sudo::
apt install -y libpng-dev zlib1g-dev libpoppler-glib-dev libpoppler-private-dev
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package  pdf-tools
    :after org
    ;ensure t
    :config
    (add-to-list 'org-file-apps
         '("\\.pdf\\'" . (lambda (file link)
                   (org-pdfview-open link))))
    (add-to-list 'org-file-apps
         '("\\.pdf::\\([[:digit:]]+\\)\\'" . org-pdfview-open))

    (setq ess-pdf-viewer-pref 'emacsclient)
    (pdf-tools-install :no-query))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-feature pdf-view
  :after pdf-tools
  :bind (:map pdf-view-mode-map
              ("C-s" . isearch-forward)
              ("d" . pdf-annot-delete)
              ("h" . pdf-annot-add-highlight-markup-annotation)
              ("t" . pdf-annot-add-text-annotation))
  :custom
  (pdf-view-display-size 'fit-page)
  (pdf-view-resize-factor 1.1)
  (pdf-view-use-unicode-ligther nil))
#+END_SRC


** Integración con =org-mode=

Para usr este paquete con  =org-mode=:

#+BEGIN_EXAMPLE
[[pdfview:~/Descargas/01688199.pdf::42][PDF Link]]
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package org-pdfview
    :after org
    :config
    (delete '("\\.pdf\\'" . default) org-file-apps)
    (add-to-list
     'org-file-apps
     '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))
    )
#+END_SRC


* Funciones de soporte

Tomadas de [[https://github.com/munen/emacs.d#convenience-functions-when-working-with-pdf-exports][aquí]] y del video https://youtu.be/gfZDwYeBlO4

#+begin_src emacs-lisp
(use-feature org-pdftools-funcs
:after org
:config
(defun nanounanue/md-compile ()
  "Compiles the currently loaded markdown file using pandoc into a PDF"
  (interactive)
  (save-buffer)
  (shell-command (concat "pandoc " (buffer-file-name) " -o "
                         (replace-regexp-in-string "md" "pdf" (buffer-file-name)))))

(defun nanounanue/update-other-buffer ()
  (interactive)
  (other-window 1)
  (revert-buffer nil t)
  (other-window -1))

(defun nanounanue/md-compile-and-update-other-buffer ()
  "Has as a premise that it's run from a markdown-mode buffer and the
   other buffer already has the PDF open"
  (interactive)
  (nanounanue/md-compile)
  (nanounanue/update-other-buffer))

(defun nanounanue/latex-compile-and-update-other-buffer ()
  "Has as a premise that it's run from a latex-mode buffer and the
   other buffer already has the PDF open"
  (interactive)
  (save-buffer)
  (shell-command (concat "pdflatex " (buffer-file-name)))
  (switch-to-buffer (other-buffer))
  (kill-buffer)
  (nanounanue/update-other-buffer))

(defun nanounanue/org-compile-beamer-and-update-other-buffer ()
  "Has as a premise that it's run from an org-mode buffer and the
   other buffer already has the PDF open"
  (interactive)
  (org-beamer-export-to-pdf)
  (nanounanue/update-other-buffer))

(defun nanounanue/org-compile-latex-and-update-other-buffer ()
  "Has as a premise that it's run from an org-mode buffer and the
   other buffer already has the PDF open"
  (interactive)
  (org-latex-export-to-pdf)
  (nanounanue/update-other-buffer))

(eval-after-load 'latex-mode
  '(define-key latex-mode-map (kbd "C-c r") 'nanounanue/latex-compile-and-update-other-buffer))

(define-key org-mode-map (kbd "C-c lr") 'nanounanue/org-compile-latex-and-update-other-buffer)
(define-key org-mode-map (kbd "C-c br") 'nanounanue/org-compile-beamer-and-update-other-buffer)

(eval-after-load 'markdown-mode
  '(define-key markdown-mode-map (kbd "C-c r") 'nanounanue/md-compile-and-update-other-buffer)))
#+end_src

* Finito
#+begin_src emacs-lisp
(provide 'setup-pdftools)
#+end_src
