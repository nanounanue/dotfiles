#+TITLE: Mi Configuración de GNU EMACS
#+AUTHOR: Adolfo De Unánue
#+EMAIL: nanounanue@gmail.com
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent

* Intro

  Mi configuración de emacs está en este archivo.
  Por supuesto, nunca está estable, siempre estoy agregando y probando cosas
  nuevas que me hagan la vida más fácil y divertida.

** Tweak del garbage collector

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 50000000
      gc-cons-percentage 0.6)

#+END_SRC

#+RESULTS:
: 0.6

** Editar este archivo

#+BEGIN_SRC emacs-lisp
(defun nanounanue/config-open ()
  (interactive)
  (find-file "~/dotfiles/emacs/nano-emacs.org"))
(global-set-key (kbd "C-c e") 'nanounanue/config-open)

(defun nanounanue/config-reload ()
  "Reloads ~/dotfiles/emacs/nano-emacs.org"
  (interactive)
  (org-babel-load-file (expand-file-name "~/dotfiles/emacs/nano-emacs.org")))
(global-set-key (kbd "C-c r") 'nanounanue/config-reload)
#+END_SRC

#+RESULTS:
: config-reload

** Configuración de paquetes

Es necesario preparar =emacs= para poder instalar paquetes


#+BEGIN_SRC emacs-lisp
                                        ; Enable "package", for installing packages
                                        ; Add some common package repositories
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))

;; (package-initialize) Not needed in Emacs 27
                                        ; Disable loading package again after init.el
(setq package-enable-at-startup nil)

#+END_SRC

#+RESULTS:

*** =use-package=

    Esto hará que todo sea más ordenado.

    #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-when-compile
      (require 'use-package))

    (setq use-package-always-ensure t)

    (use-package delight :ensure t)
    (use-package diminish :ensure t)
    (use-package use-package-ensure-system-package :ensure t)
    #+END_SRC

    #+RESULTS:

*** Init file support

#+BEGIN_SRC emacs-lisp
(require 'cl)

(use-package dash
  :ensure t
  :config (eval-after-load "dash" '(dash-enable-font-lock)))

(use-package s
  :ensure t)

(use-package f
  :ensure t)
#+END_SRC

#+RESULTS:

*** =paradox=

[[https://github.com/Malabarba/paradox][Paradox]] moderniza la lista de paquetes de Emacs


#+BEGIN_SRC emacs-lisp
(use-package paradox
  :ensure t
  :config
  (paradox-enable)
  (setq paradox-spinner-type 'progress-bar))
#+END_SRC

#+RESULTS:
: t

*** Formato de reloj

#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")

(display-time-mode 1)
#+END_SRC

#+RESULTS:
: t



** Personal info

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Adolfo De Unánue")
(setq user-mail-address "nanounanue@gmail.com")
(setq auth-sources '("~/.gnupg/shared/.authinfo.gpg"
                     "~/.authinfo.gpg"
                     "~/.authinfo"
                     "~/.netrc"))
#+END_SRC

#+RESULTS:
| ~/.gnupg/shared/.authinfo.gpg | ~/.authinfo.gpg | ~/.authinfo | ~/.netrc |

** Interfaz

*** Defaults

#+BEGIN_SRC emacs-lisp
  (setq
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   display-time-default-load-average nil            ; Don't display load average
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   load-prefer-newer t                              ; Prefers the newest version of a file
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   tab-width 4                                      ; Set width for tabs
   use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
   vc-follow-symlinks t)                            ; Always follow the symlinks
  (cd "~/")                                         ; Move to the user directory
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (show-paren-mode 1)                               ; Show the parent
#+END_SRC

#+RESULTS:
: t

*** whitespace

#+BEGIN_SRC emacs-lisp
;; force consistent font height by using the biggest font for spaces:
(global-whitespace-mode t)
(setq whitespace-style '(face tabs spaces trailing empty newline))
#+END_SRC


*** Fuentes

Tomadas desde [[https://github.com/hbin/top-programming-fonts][top-programming-fonts]]

#+BEGIN_SRC emacs-lisp

;; Click [here](https://github.com/hbin/dotfiles-for-emacs) to take a further look.
;; Hack font: https://sourcefoundry.org/hack/
(set-frame-font "Hack:pixelsize=18")

;; If you use Emacs Daemon mode
(add-to-list 'default-frame-alist
               (cons 'font "Hack:pixelsize=18"))
#+END_SRC

#+RESULTS:
: ((font . Hack:pixelsize=18) (vertical-scroll-bars))


*** UTF-8
#+begin_src emacs-lisp
(when (fboundp 'set-charset-priority)
  (set-charset-priority 'unicode))
(prefer-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
(set-selection-coding-system 'utf-8)
(setq-default buffer-file-coding-system 'utf-8)
#+end_src

#+RESULTS:
: utf-8

*** Acentos

#+BEGIN_SRC emacs-lisp
(load-library "iso-transl")
#+END_SRC

#+RESULTS:
: t

*** Backups

#+BEGIN_SRC emacs-lisp
(setq-default auto-save-default nil
              create-lockfiles nil
              make-backup-files nil)
#+END_SRC

#+RESULTS:

*** highlights

#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :ensure t
  :commands highlight-symbol-mode
  :init
  (add-hook 'prog-mode-hook #'highlight-symbol-mode)
  (add-hook 'matlab-mode-hook #'highlight-symbol-mode))
(use-package highlight-parentheses
  :ensure t
  :commands highlight-parentheses-mode
  :init
  (add-hook 'org-mode-hook 'highlight-parentheses-mode)
  (add-hook 'LaTeX-mode-hook 'highlight-parentheses-mode)
  (add-hook 'python-mode-hook 'highlight-parentheses-mode))
#+END_SRC

#+RESULTS:
| highlight-parentheses-mode |

*** Cosas a quitar

By default every text editor should display line and column number, and not wrap text.

#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines t)
(add-hook 'prog-mode-hook 'column-number-mode)
(add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

#+RESULTS:
| linum-mode | column-number-mode | highlight-symbol-mode |

No me gusta que el =scratch buffer= contenga texto

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message "")
#+END_SRC

#+RESULTS:

No me gusta que tenga que escribir =yes/no=, prefiero =y/n=

#+BEGIN_SRC emacs-lisp
 (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

#+RESULTS:
: yes-or-no-p

Y por supuesto no me gusta que haya /toolbar/, /menubar/, etc

#+begin_src emacs-lisp
(tool-bar-mode -1)

(menu-bar-mode -1)

(unless (frame-parameter nil 'tty)
    (scroll-bar-mode -1))

(setq inhibit-splash-screen t
      ring-bell-function 'ignore)

;; Turn off the blinking cursor
(blink-cursor-mode -1)
#+end_src

#+RESULTS:

*** =ag= silversearcher

Requiere la instalación de =ag=:

#+BEGIN_EXAMPLE
sudo  apt install silversearcher-ag
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(use-package ag
  :ensure t)
#+END_SRC

#+RESULTS:


*** =smartparens=

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :after circe
  :diminish smartparens-mode
  :config

  ;; Activate smartparens globally
  (smartparens-global-mode t)
  (show-smartparens-global-mode t)

  ;; Activate smartparens in minibuffer
  (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode)

  ;; Do not pair simple quotes
  (sp-pair "'" nil :actions :rem)
  (sp-pair "*" nil :actions :rem)
  (sp-pair "_" nil :actions :rem)
  (sp-pair "/" nil :actions :rem)

  ;; smart pairing for all
  (require 'smartparens-config)
  (setq sp-base-key-bindings 'paredit)
  (setq sp-autoskip-closing-pair 'always)
  (setq sp-hybrid-kill-entire-symbol nil)
  (sp-use-paredit-bindings)

  (show-smartparens-global-mode +1)
  )
#+END_SRC

#+RESULTS:
: t

*** =rainbowdelimiters=

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :commands rainbow-delimiters-mode
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'LaTex-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

#+RESULTS:

*** =rainbow mode=
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
    :ensure t
    :config
    (setq rainbow-x-colors nil)
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

#+RESULTS:
: t

*** =all-the-icons=

    #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
      ;; (use-package all-the-icons-dired
      ;;   :config
      ;;   (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
      ;;   )
      ;; (use-package all-the-icons-ivy :ensure t)
      )
    (use-package all-the-icons-dired
      ;; M-x all-the-icons-install-fonts
      :ensure t
      :config
      (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
      :commands (all-the-icons-dired-mode))

    #+END_SRC

    #+RESULTS:
    : t

*** =gitter=

    Muestra los cambios en archivos controlados por =git=

    #+BEGIN_SRC emacs-lisp
      (use-package git-gutter+
        :diminish
        :defer t
        :config
        (global-git-gutter+-mode)
        )
    #+END_SRC

    #+RESULTS:

*** Símbolos (=pretty-mode=)

    #+BEGIN_SRC emacs-lisp
    (use-package pretty-mode
      :ensure t
      :config
      (global-pretty-mode t)

      ;; (pretty-deactivate-groups
      ;;  '(:equality :ordering :ordering-double :ordering-triple
      ;;              :arrows :arrows-twoheaded :punctuation
      ;;              :logic :sets))

      ;; (pretty-activate-groups
      ;;  '(:sub-and-superscripts :greek :arithmetic-nary :parentheses
      ;;                          :types :arrows-tails  :arrows-tails-double
      ;;                          :logic :sets :equality :ordering
      ;;                          :arrows :arrows-twoheaded ))
      )
    #+END_SRC

    #+RESULTS:
    : t

    Además activamos otros símbolos en =prettify-symbols-alist=

    #+BEGIN_SRC emacs-lisp
    (add-hook
     'prog-mode-hook
     (lambda ()
       (setq prettify-symbols-alist
             '(;; Syntax
               ("not in" . ?∉)
               ("return" .   #x27fc)
               ("yield" .    #x27fb)
               ("for" . "∀")
               ("function" . ?λ)
               ("<>" . ?≠)
               ("!=" . ?≠)
               ("exists" . ?Ǝ)
               ("in" . ?∈)
               ("sum" . ?Ʃ)
               ("complex numbers" . ?ℂ)
               ("integer numbers" . ?ℤ)
               ("natural numbers" . ?ℕ)
               ("class" . ?𝑪)
               ("and" . ?∧)
               ("AND" . ?∧)
               ("or" . ?∨)
               ("OR" . ?∨)
               ("not" . ?￢)
               ("NOT" . ?￢)
               ;; Base Types
               ;; ("int" .      #x2124)
               ;; ("INT" .      #x2124)
               ;; ("float" .    #x211d)
               ;; ("str" .      #x1d54a)
               ("True" .     #x1d54b)
               ("False" .    #x1d53d)
               ("true" .     #x1d54b)
               ("false" .    #x1d53d)
               ("null"  .    #x2205)
               ("NULL"  .    #x2205)
               ("Null"  .    #x2205)
               ;; python
               ;; ("Dict" .     #x1d507)
               ;; ("List" .     #x2112)
               ;; ("Tuple" .    #x2a02)
               ;; ("Set" .      #x2126)
               ;; ("Iterable" . #x1d50a)
               ;; ("Any" .      #x2754)
               ;; ("union" .    #x22c3)
               ;; ("Union" .    #x22c3)
               ))))
          (global-prettify-symbols-mode t)

    #+END_SRC

    #+RESULTS:
    : t

*** Recent files

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :init
  (recentf-mode 1)

  :config

  ;;
  (setq
   recentf-max-saved-items 500
   recentf-max-menu-items 15
   ;; disable recentf-cleanup on Emacs start, because it can cause
   ;; problems with remote files
   recentf-auto-cleanup 'never)

  ;; Emacs
  (add-to-list 'recentf-exclude (format "%s/.orhc-bibtex-cache" (getenv "HOME")))
  (add-to-list 'recentf-exclude (format "%s/configuration/emacs\\.d/\\(?!\\(main.org\\)\\)" (getenv "HOME")))
  (add-to-list 'recentf-exclude (format "%s/\\.emacs\\.d/.*" (getenv "HOME")))

  ;; Some caches
  (add-to-list 'recentf-exclude (format "%s/\\.ido\\.last" (getenv "HOME")))
  (add-to-list 'recentf-exclude (format "%s/\\.recentf" (getenv "HOME")))


  ;; Org/todo/calendars
  (add-to-list 'recentf-exclude ".*todo.org")
  (add-to-list 'recentf-exclude (format "%s/Calendars/.*" (getenv "HOME")))

  ;; Maildir
  (add-to-list 'recentf-exclude (format "%s/maildir.*" (getenv "HOME")))

  )
#+END_SRC

#+RESULTS:
: t


*** Clipboard

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-primary nil)
(setq x-select-enable-clipboard t)
#+END_SRC

#+RESULTS:
: t


*** Buffers

#+BEGIN_SRC emacs-lisp
;; Open Large files
(use-package vlf :ensure t)

;; Delete trailing-whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Unify the buffer name style
(eval-after-load "uniquify"
  '(progn
     (setq uniquify-buffer-name-style 'forward)))
#+END_SRC

#+RESULTS:
: forward

*** =Key chords=

=Key chords= liga funciones a secuencias de teclas, como =jj=.

#+BEGIN_SRC emacs-lisp
(use-package use-package-chords
  :ensure t
  :config
  (key-chord-mode 1))
#+END_SRC

#+RESULTS:
: t

*** =wgrep=

#+BEGIN_SRC emacs-lisp
(use-package wgrep
  :ensure t
  )
#+END_SRC

#+RESULTS:


*** =ivy=, =counsel=, =swiper=

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))

(use-package smex
  :ensure t
  :commands (smex smex-major-mode-commands)
  :config
  (smex-initialize)
  )

(use-package ivy
  :defer 0.1
  :ensure t
  :diminish ivy-mode
  :config
  (setq ivy-height 10                                 ; length of ivy completions list
        ivy-wrap t                                    ; wrap around at end of completions list
        ivy-count-format "%d/%d "
        ivy-fixed-height-minibuffer t                  ; use consistent height for ivy
        projectile-completion-system 'ivy              ; use ivy for projectile
        smex-completion-method 'ivy                    ; use ivy for smex
        ivy-initial-inputs-alist nil                   ; don't use ^ as initial input
        ivy-format-function #'ivy-format-function-line ; highlight til EOL
        ivy-use-virtual-buffers nil                    ; dont' show recent files in switch-buffer
        ivy-virtual-abbreviate 'full                   ; show full path if showing virtual buffer
        ivy-magic-slash-non-match-action nil           ; disable magic slash on non-match
        ivy-on-del-error-function nil                  ; don't quit minibuffer on delete-error
        ivy-use-selectable-prompt t)                   ; allow input prompt value to be selectable
  (ivy-mode)
  )

(use-package ivy-rich
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
                          ivy-rich-switch-buffer-align-virtual-buffer t
                          ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))

(use-package counsel
  :after ivy
  :ensure t
  :chords (("yy" . counsel-yank-pop))
  )
#+END_SRC

#+RESULTS:
: counsel-yank-pop


*** =Projectile=

#+BEGIN_SRC emacs-lisp
(use-package perspective
  :disabled t
  :ensure t
  :config
  (persp-mode)
  )
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand t
  :ensure t
  :init
  (setq projectile-enable-caching t
        projectile-indexing-method 'alien
        projectile-globally-ignored-files '(".DS_Store" "Icon" "TAGS")
        projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o" ".class"))
  :config
  (projectile-mode)
  (setq projectile-completion-system 'ivy)
  ;;(setq projectile-switch-project-action 'projectile-dired) ;; The action by default is open dired
  (setq projectile-switch-project-action 'projectile-find-dir) ;; The action by default is select a directory inside the project
  (setq projectile-find-dir-includes-top-level t)              ;; including the top directory
  )
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :ensure t
  :after projectile
  :bind (
         ("C-c p SPC" . counsel-projectile)
         ("C-c p p" . counsel-projectile-switch-project)
         ("C-c p f" . counsel-projectile-find-file)
         ("C-c p d" . counsel-projectile-find-dir)
         ("C-c p b" . counsel-projectile-switch-to-buffer)
         ("C-c p s g" . counsel-projectile-grep)
         ("C-c p s s" . counsel-projectile-ag)
         ("C-c p O c" . counsel-projectile-org-capture)
         ("C-c p O a" . counsel-projectile-org-capture)
         )
  :config
  (counsel-projectile-mode)
  )
#+END_SRC

#+RESULTS:
: counsel-projectile-org-capture

#+BEGIN_SRC emacs-lisp
(use-package persp-projectile
  :ensure t
  :disabled t
  :after projectile
  :config
  ;;(define-key projectile-mode-map [d] 'projectile-persp-switch-project)
  )
#+END_SRC

#+RESULTS:


***  =dumb-jump=

/"Zero or almost-zero configuration tags replacement"/

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind (( "M-g o" . dumb-jump-go-other-window)
           ( "M-g j" . dumb-jump-go)
           ( "M-g x" . dumb-jump-go-prefer-external)
           ( "M-g z" . dumb-jump-go-prefer-external-other-window))
    :config
    (setq dumb-jump-selector 'ivy)
    :ensure)
#+END_SRC

#+RESULTS:
: dumb-jump-go-prefer-external-other-window


**** Diff

#+BEGIN_SRC emacs-lisp
(setq diff-switches "-u")
(autoload 'diff-mode "diff-mode" "Diff major mode" t)
(setq ediff-auto-refine-limit (* 2 14000))
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq ediff-split-window-function (lambda (&optional arg)
                    (if (> (frame-width) 160)
                    (split-window-horizontally arg)
                      (split-window-vertically arg))))
#+END_SRC

#+RESULTS:
| lambda | (&optional arg) | (if (> (frame-width) 160) (split-window-horizontally arg) (split-window-vertically arg)) |


**** =Tramp=

#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
(setq password-cache-expiry 60)
(setq tramp-auto-save-directory temporary-file-directory)

;; Debug
;;(setq tramp-verbose 9)
(setq tramp-debug-buffer nil)

#+END_SRC

#+RESULTS:

*** Temas

#+BEGIN_SRC emacs-lisp
(use-package material-theme :defer t)
(use-package ubuntu-theme :defer t)
(use-package gotham-theme :defer t)
(use-package django-theme :defer t)
(use-package color-theme-sanityinc-tomorrow :defer t)
(use-package creamsody-theme :defer t)
(use-package monokai-theme :defer t)
(use-package blackboard-theme :defer t)
(use-package bubbleberry-theme :defer t)
(use-package gruvbox-theme
  :disabled t
  :ensure t
  :config (load-theme 'gruvbox-dark-medium t))

(use-package darkokai-theme
  :disabled t
  :ensure t
  :config
  (setq darkokai-mode-line-padding 1)
  (load-theme 'darkokai t))

(use-package moe-theme
  :disabled t
  :ensure t
  :config
  (setq moe-theme-highlight-buffer-id nil)
  (moe-dark))

(use-package dracula-theme
  :disabled t
  :ensure t
  :config
  (load-theme 'dracula t))

(use-package doom-themes
  :ensure t
  :config
  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Enable custom neotree theme
  (doom-themes-neotree-config)  ; all-the-icons fonts must be installed!

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  )

#+END_SRC

#+RESULTS:
: t


*** =avy=

/Quick text navigation!/ =avy= permite "brincar" a cualquier lugar del
/búfer/

    #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :bind (("M-s" . avy-goto-word-1))
      )
    #+END_SRC

    #+RESULTS:
    : avy-goto-word-1

*** =ace-window=

Parecido a =avy= pero para ventanas

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :chords ("jk" . ace-window)
  :bind   ("M-o" . ace-window)
  :config
  (setq aw-dispatch-always 1)
                                        ;(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  )

#+END_SRC

#+RESULTS:
: ace-window

*** =switch-window=

#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
    ([remap other-window] . switch-window))
#+END_SRC

#+RESULTS:
: switch-window

*** =expand-region=

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC

#+RESULTS:
: er/expand-region



*** Acomodo /agresivo/

    #+BEGIN_SRC emacs-lisp
      ;; Aggressive-fill
      (use-package aggressive-fill-paragraph
        :ensure t
        :disabled
        :config
        (afp-setup-recommended-hooks)
        ;; to enable the minor mode in all places where it might be useful. Alternatively use
        ;;(add-hook '[major-mode-hook] #'aggressive-fill-paragraph-mode)
        )

      ;; Aggressive-indent
      (use-package aggressive-indent
        :ensure t
        :config
        ;; (global-aggressive-indent-mode 1)
        (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
        (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
        (add-hook 'clojure-mode-hook #'aggressive-indent-mode)
        (add-hook 'ruby-mode-hook #'aggressive-indent-mode)
        ;(add-hook 'python-mode-hook #'aggresive-indent-mode)
        (add-hook 'css-mode-hook #'aggressive-indent-mode)
        )
    #+END_SRC

    #+RESULTS:
    : t

*** Edición multi-línea

    [[http://emacsrocks.com/e13.html][Ejemplo de uso]]

    #+BEGIN_SRC emacs-lisp
      ;; Edición de múltiples líneas
      (use-package multiple-cursors
        :diminish multiple-cursors-mode
        :defer t
        :init
        (global-set-key (kbd "C->") 'mc/mark-next-like-this)
        (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
        (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
        )
    #+END_SRC

    #+RESULTS:

*** =undo-tree=

    Recorre el /buffer/ mostrando un árbol

    #+BEGIN_SRC emacs-lisp
    (use-package undo-tree  ;; C-x u
      :ensure t
      :chords (("uu . undo-tree-visualize"))
      :diminish undo-tree-mode
      :config
      (progn
        (global-undo-tree-mode)
        (setq undo-tree-visualizer-timestamps t))
      )
    #+END_SRC

    #+RESULTS:

*** Company mode

Set up company, i.e. code autocomplete


#+BEGIN_SRC emacs-lisp
(use-package company
  :defer 2
  :diminish
  :init
  (global-company-mode 1)
  (add-hook 'prog-mode-hook 'company-mode)
  (add-hook 'LaTeX-mode-hook 'company-mode)
  (add-hook 'org-mode-hook 'company-mode)
  :config
  ;; Enable company mode everywhere
  (add-hook 'after-init-hook 'global-company-mode)
  ;; Set up TAB to manually trigger autocomplete menu
                                        ;(define-key company-mode-map (kbd "TAB") 'company-complete)
                                        ;(define-key company-active-map (kbd "TAB") 'company-complete-common)
  ;; Set up M-h to see the documentation for items on the autocomplete menu
  (define-key company-active-map (kbd "M-h") 'company-show-doc-buffer)

  (setq company-show-numbers t)

  (setq company-idle-delay t)
  (setq company-tooltip-limit 10)
  (setq company-minimum-prefix-length 3)
  ;; invert the navigation direction if the the completion popup-isearch-match
  ;; is displayed on top (happens near the bottom of windows)
  (setq company-tooltip-flip-when-above t)

  )

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+END_SRC

#+RESULTS:
| company-box-mode | company-mode-set-explicitly |


*** Yasnippet


#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :after company
  :diminish yas-minor-mode
  :config


  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")

  ;; Adding yasnippet support to company
  (add-to-list 'company-backends '(company-yasnippet))

  ;; Activate global
  (yas-global-mode)

  (global-set-key (kbd "M-/") 'company-yasnippet)
  )
#+END_SRC



#+RESULTS:
: t

**** =yasnippet-snippets=

#+BEGIN_SRC emacs-lisp
  (use-package  yasnippet-snippets
    :ensure t)
#+END_SRC

#+RESULTS:


*** Arreglando otras cosas de GNU/Emacs

Muestra el paréntesis que hace /match/

#+BEGIN_SRC emacs-lisp
  (defvar show-paren-delay)
  (setq show-paren-delay 0.0)
  (show-paren-mode t)
#+END_SRC

#+RESULTS:
: t

Número de columnas

#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
#+END_SRC

#+RESULTS:
: t


Indicador de la columna 80

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :ensure t
  :config
  (setq fci-rule-column 80)
  (add-hook 'prog-mode-hook 'fci-mode))
#+END_SRC

#+RESULTS:
: t


Archivos temporales de GNU/Emacs, todos a un sólo lugar

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `((".*" . "/tmp/.emacs"))
        auto-save-file-name-transforms `((".*" , "/tmp/.emacs" t)))
#+END_SRC

#+RESULTS:
| .* | /tmp/.emacs | t |

Si algún programa cambia un archivo que está abierto en GNU/Emacs,
automáticamente actualizar los cambios

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

#+RESULTS:
: t

Si un archivo empieza con /she-bang/ =#!= , volverlo ejecutable

#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook
        'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

#+RESULTS:
| executable-make-buffer-file-executable-if-script-p | rmail-after-save-hook |

*** Flycheck / Flyspell

Por último, validadores

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :commands flycheck-mode
  :init
  (add-hook 'prog-mode-hook 'flycheck-mode)
  :config
  (setq flycheck-highlighting-mode 'lines)
  (setq flycheck-indication-mode nil)
  (setq flycheck-display-errors-delay 1.5)
  (setq flycheck-idle-change-delay 3)
  (setq flycheck-check-syntax-automatically '(mode-enabled save))

  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message) line-end))
    :modes (text-mode markdown-mode gfm-mode))

  (add-to-list 'flycheck-checkers 'proselint))

(use-package flyspell
  :commands flyspell-mode
  :init
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  :config
  (setq ispell-program-name "hunspell")
  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)
          ("es_MX" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))
  (flyspell-mode 1))
(use-package flyspell-correct-ivy
  :ensure t
  :after flyspell
  :bind (:map flyspell-mode-map
              ("C-c C-SPC" . flyspell-correct-word-generic)))
#+END_SRC

#+RESULTS:
: flyspell-correct-word-generic


** Major modes

*** TeX

****  AucTeX

#+BEGIN_SRC emacs-lisp
                                        ; Point auctex to my central .bib file
(use-package tex
  :ensure auctex
  :hook
  (LaTeX-mode . reftex-mode)
  :config

  ;; Subpackages
  (let ((byte-compile-warnings '(not free-vars)))
    (use-package latex-extra
      :ensure t
      :config
      (add-hook 'LaTeX-mode-hook #'latex-extra-mode)))

  ;; Pdf activated by default
  (TeX-global-PDF-mode 1)
  (TeX-PDF-mode t)
  (TeX-auto-save t)
  (TeX-byte-compile t)
  (TeX-clean-confirm nil)
  (TeX-master 'dwim)
  (TeX-parse-self t)
  (TeX-source-correlate-mode t)
  (TeX-view-program-selection '((output-pdf "Evince")
                                (output-html "xdg-open")))
  (setq Tex-parse-self t)
  (setq TeX-save-query nil)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))

  (setq LaTeX-indent-level 4
	    LaTeX-item-indent 0
	    TeX-brace-indent-level 4
	    TeX-newline-function 'newline-and-indent)

  ;; Some usefull hooks
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'outline-minor-mode)

  ;; PDF/Tex correlation
  (setq TeX-source-correlate-method 'synctex)
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)

  ;; Keys
  (define-key LaTeX-mode-map (kbd "C-c C-=") 'align-current)

  (setq-default TeX-engine 'xetex)
  )

#+END_SRC


**** Bibtex

#+BEGIN_SRC emacs-lisp
(use-package bibtex
  :config
  (defun bibtex-generate-autokey ()
    (let* ((bibtex-autokey-names nil)
           (bibtex-autokey-year-length 2)
           (bibtex-autokey-name-separator "\0")
           (names (split-string (bibtex-autokey-get-names) "\0"))
           (year (bibtex-autokey-get-year))
           (name-char (cond ((= (length names) 1) 4)
                            ((= (length names) 2) 2)
                            (t 1)))
           (existing-keys (bibtex-parse-keys))
           key)
      (setq names (mapconcat (lambda (x)
                               (substring x 0 name-char))
                             names
                             ""))
      (setq key (format "%s%s" names year))
      (let ((ret key))
        (loop for c from ?a to ?z
              while (assoc ret existing-keys)
              do (setq ret (format "%s%c" key c)))
        ret)))

  (setq bibtex-align-at-equal-sign t
        bibtex-autokey-name-year-separator ""
        bibtex-autokey-year-title-separator ""
        bibtex-autokey-titleword-first-ignore '("the" "a" "if" "and" "an")
        bibtex-autokey-titleword-length 100
        bibtex-autokey-titlewords 1))
#+END_SRC

#+RESULTS:
: t

**** Company (again)

#+BEGIN_SRC emacs-lisp
(use-package auctex-latexmk
  :ensure t
  :after auctex
  :init (add-hook 'LaTeX-mode-hook 'auctex-latexmk-setup))


;; Completion
;;(setq TeX-auto-global (format "%s/auctex/style" generated-basedir))
;; (add-to-list 'TeX-style-path TeX-auto-global) ;; FIXME: what is this variable


(use-package company-auctex
  :ensure t
  :after company
  :after auctex
  :config
  (company-auctex-init))


(use-package company-bibtex
  :ensure t
  :after company
  :after auctex
  :config
  (add-to-list 'company-backends 'company-bibtex))


(use-package company-math
  :ensure t
  :after company
  :after auctex
  :config
  ;; global activation of the unicode symbol completion
  (add-to-list 'company-backends 'company-math-symbols-unicode))

(use-package company-anaconda
  :ensure t
  :config
  (add-to-list 'company-backends 'company-anaconda))
#+END_SRC

#+RESULTS:
: t

**** Compilation

#+BEGIN_SRC emacs-lisp
;; Escape mode
(defun TeX-toggle-escape nil
  (interactive)
  "Toggle Shell Escape"
  (setq LaTeX-command
        (if (string= LaTeX-command "latex") "latex -shell-escape"
          "latex"))
  (message (concat "shell escape "
                   (if (string= LaTeX-command "latex -shell-escape")
                       "enabled"
                     "disabled"))
           )
  )
;;(add-to-list 'TeX-command-list
;;             '("Make" "make" TeX-run-command nil t))
(setq TeX-show-compilation nil)

;; Redine TeX-output-mode to get the color !
(define-derived-mode TeX-output-mode TeX-special-mode "LaTeX Output"
  "Major mode for viewing TeX output.
  \\{TeX-output-mode-map} "
  :syntax-table nil
  (set (make-local-variable 'revert-buffer-function)
       #'TeX-output-revert-buffer)

  (set (make-local-variable 'font-lock-defaults)
       '((("^!.*" . font-lock-warning-face) ; LaTeX error
          ("^-+$" . font-lock-builtin-face) ; latexmk divider
          ("^\\(?:Overfull\\|Underfull\\|Tight\\|Loose\\).*" . font-lock-builtin-face)
          ;; .....
          )))

  ;; special-mode makes it read-only which prevents input from TeX.
  (setq buffer-read-only nil))
#+END_SRC

#+RESULTS:
: TeX-output-mode

**** =RefTeX=

#+BEGIN_SRC emacs-lisp
(use-package reftex
  :after auctex
  :config
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
  (setq reftex-save-parse-info t
        reftex-enable-partial-scans t
        reftex-use-multiple-selection-buffers t
        reftex-plug-into-AUCTeX t
        reftex-vref-is-default t
        reftex-cite-format
        '((?\C-m . "\\cite[]{%l}")
          (?t . "\\textcite{%l}")
          (?a . "\\autocite[]{%l}")
          (?p . "\\parencite{%l}")
          (?f . "\\footcite[][]{%l}")
          (?F . "\\fullcite[]{%l}")
          (?x . "[]{%l}")
          (?X . "{%l}"))

        font-latex-match-reference-keywords
        '(("cite" "[{")
          ("cites" "[{}]")
          ("footcite" "[{")
          ("footcites" "[{")
          ("parencite" "[{")
          ("textcite" "[{")
          ("fullcite" "[{")
          ("citetitle" "[{")
          ("citetitles" "[{")
          ("headlessfullcite" "[{"))

        reftex-cite-prompt-optional-args nil
        reftex-cite-cleanup-optional-args t))
#+END_SRC

#+RESULTS:

**** Preview

#+BEGIN_SRC emacs-lisp
(use-package latex-math-preview
  :ensure t
  :config
  (autoload 'LaTeX-preview-setup "preview")
  (setq preview-scale-function 1.2)
  (add-hook 'LaTeX-mode-hook 'LaTeX-preview-setup))
#+END_SRC

#+RESULTS:
: t


*** Emacs string manipulation

Esto es requerido por algunos paquetes

#+BEGIN_SRC emacs-lisp
(use-package s)
#+END_SRC

#+RESULTS:

*** =cider=

#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t
  :config

  ;; REPL history file
  (setq cider-repl-history-file "~/.emacs.d/cider-history")

  ;; nice pretty printing
  (setq cider-repl-use-pretty-printing t)

  ;; nicer font lock in REPL
  (setq cider-repl-use-clojure-font-lock t)

  ;; result prefix for the REPL
  (setq cider-repl-result-prefix ";; => ")

  ;; never ending REPL history
  (setq cider-repl-wrap-history t)

  ;; looong history
  (setq cider-repl-history-size 3000)

  ;; eldoc for clojure
  (add-hook 'cider-mode-hook #'eldoc-mode)


  ;; error buffer not popping up
  (setq cider-show-error-buffer nil)

  ;; company mode for completion
  (add-hook 'cider-repl-mode-hook #'company-mode)
  (add-hook 'cider-mode-hook #'company-mode)
  )
#+END_SRC

#+RESULTS:
: t

Continuando con la configuración necesaria para =clojure=

#+BEGIN_SRC emacs-lisp
(use-package clj-refactor
  :ensure t
  :config
  (add-hook 'clojure-mode-hook
	        (lambda ()
	          (clj-refactor-mode 1)
	          ;; insert keybinding setup here
	          (cljr-add-keybindings-with-prefix "C-c RET")))

  (add-hook 'clojure-mode-hook #'yas-minor-mode)

  ;; no auto sort
  (setq cljr-auto-sort-ns nil)

  ;; do not prefer prefixes when using clean-ns
  (setq cljr-favor-prefix-notation nil)
  )
#+END_SRC

#+RESULTS:
: t


#+BEGIN_SRC emacs-lisp
(use-package let-alist
  :ensure t
  )

(use-package flycheck-clojure
  :ensure t
  )
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
(use-package hl-sexp
  :ensure t
  :config
  (add-hook 'clojure-mode-hook #'hl-sexp-mode)
  (add-hook 'lisp-mode-hook #'hl-sexp-mode)
  (add-hook 'emacs-lisp-mode-hook #'hl-sexp-mode)
  )
#+END_SRC

#+RESULTS:
: t



*** =org-mode=

Una de las grandes ventajas de GNU/Emacs es =org-mode=


**** /Embellecedor/

     #+BEGIN_SRC emacs-lisp
       ;(ignore-errors
       ;  (use-package org-beautify-theme
       ;    :ensure t)
       ;  )
     #+END_SRC

     #+RESULTS:

**** Componentes de =org-babel=

     *NOTA* Para [[https://github.com/corpix/ob-blockdiag.el][ob-blockdiag]] es necesario ejecutar lo siguiente:

     #+BEGIN_EXAMPLE shell
     pip install blockdiag seqdiag actdiag nwdiag
     #+END_EXAMPLE

     El formato se puede consultar en la página de [[http://blockdiag.com/en/][blockdiag]].

     *NOTA* PAra [[https://github.com/krisajenkins/ob-browser][ob-browser]]  es necesario tener =phantomjs=:

     #+BEGIN_EXAMPLE shell
     sudo apt install phantomjs
     #+END_EXAMPLE


     #+BEGIN_SRC emacs-lisp
       (use-package cider
         :config
         (require 'cider)
         )

       (require 'ob-emacs-lisp)

       (use-package ob-http
         :config
         (require 'ob-http)
         )

       (use-package ob-ipython
         :ensure t
         :config
         (require 'ob-ipython)
         )

       (use-package ob-mongo
         :config
         (require 'ob-mongo)
         )

       (use-package ob-cypher
         :config
         (require 'ob-cypher)
         )

       (use-package ob-sql-mode
         :config
         (require 'ob-sql-mode)
         )

       (use-package ob-prolog
         :config
         (require 'ob-prolog))


       (use-package ob-blockdiag
         :config
         (require 'ob-blockdiag))

       (use-package ob-browser
         :config
         (require 'ob-browser))

       (use-package ob-async :ensure t)

     #+END_SRC

     #+RESULTS:

**** Cuerpo principal

     #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure t
       :mode ("\\.org\\'" . org-mode)
       :bind (("C-c l" . org-store-link)
              ("C-c c" . org-capture)
              ("C-c a" . org-agenda)
              ("C-c b" . org-iswitchb)
              ("C-c C-w" . org-refile)
              ("C-c C-v t" . org-babel-tangle)
              ("C-c C-v f" . org-babel-tangle-file)
              ("C-c j" . org-clock-goto)
              ("C-c C-x C-o" . org-clock-out)
              )

       :init
       (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
       (add-hook 'org-mode-hook 'org-display-inline-images)
       (add-hook 'org-mode-hook 'org-babel-result-hide-all)
       (add-hook 'org-mode-hook 'turn-on-auto-fill)


       (add-hook 'org-mode-hook
                 (lambda ()
                   (let ((lines (count-lines (point-min) (point-max))))
                     (when (< lines 500)
                       (linum-mode)))))

       :config

       (setq org-directory "~/Dropbox/org")



       ;; Enable pretty entities - shows e.g. α β γ as UTF-8 characters.
       (setq org-pretty-entities t)
       ;; Ensure native syntax highlighting is used for inline source blocks in org files
       (setq org-src-fontify-natively t)
       (setq org-src-tab-acts-natively t)
       (setq org-edit-src-content-indentation 0)

       (setq org-hide-emphasis-markers t)
       ;; I can display inline images. Set them to have a maximum size so large images don't fill the screen.
       (setq org-image-actual-width 800)
       (setq org-ellipsis "⤵");; ⤵ ≫ ⚡⚡⚡

       ;; make available "org-bullet-face" such that I can control the font size individually
       (setq org-bullets-face-name (quote org-bullet-face))

       ;; Agenda
       ;; Todo part
       ;;(setq org-agenda-files '())

       (setq org-agenda-files (quote ("~/Dropbox/org"
                                      "~/Dropbox/org/research.org"
                                      "~/Dropbox/org/consultancy.org"
                                      "~/Dropbox/org/previta.org"
                                      "~/Dropbox/org/anglobal.org"
                                      "~/Dropbox/org/datank.org"
                                      "~/Dropbox/org/dsapp.org"
                                      "~/Dropbox/org/gasolinerias.org"
                                      "~/Dropbox/org/ligamx.org"
                                      "~/Dropbox/org/vigilamos.org"
                                      "~/Dropbox/org/personal.org"
                                      "~/Dropbox/org/proyectos.org"
                                      )))



       (when (file-exists-p "~/Dropbox/org/todo/todo.org")
         (setq org-agenda-files
               (append org-agenda-files '("~/Dropbox/org/todo/todo.org"))))

       (when (file-exists-p "~/Dropbox/org/organisation/bookmarks.org")
         (setq org-agenda-files
               (append org-agenda-files '("~/Dropbox/org/organisation/bookmarks.org"))))

       (when (file-exists-p "~/Calendars")
         (setq org-agenda-files
               (append org-agenda-files (directory-files "~/Calendars/" t "^.*\\.org$"))))


       ;; I don't want to see things that are done. turn that off here.
       ;; http://orgmode.org/manual/Global-TODO-list.html#Global-TODO-list
       (setq org-agenda-skip-scheduled-if-done t)
       (setq org-agenda-skip-deadline-if-done t)
       (setq org-agenda-skip-timestamp-if-done t)
       (setq org-agenda-todo-ignore-scheduled t)
       (setq org-agenda-todo-ignore-deadlines t)
       (setq org-agenda-todo-ignore-timestamp t)
       (setq org-agenda-todo-ignore-with-date t)
       (setq org-agenda-start-on-weekday nil) ;; start on current day

       (setq org-upcoming-deadline '(:foreground "blue" :weight bold))

       ;; record time I finished a task when I change it to DONE
       (setq org-log-done 'time)

       ;; use timestamps in date-trees. for the journal
       (setq org-datetree-add-timestamp 'active)

       ;; Org-clock
       ;; Resume clocking task when emacs is restarted
       (org-clock-persistence-insinuate)
       ;;
       ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
       (setq org-clock-history-length 23)
       ;; Resume clocking task on clock-in if the clock is open
       (setq org-clock-in-resume t)
       ;; Separate drawers for clocking and logs
       (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
       ;; Save clock data and state changes and notes in the LOGBOOK drawer
       (setq org-clock-into-drawer t)
       ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
       (setq org-clock-out-remove-zero-time-clocks t)
       ;; Clock out when moving task to a done state
       (setq org-clock-out-when-done t)
       ;; Save the running clock and all clock history when exiting Emacs, load it on startup
       (setq org-clock-persist t)
       ;; Do not prompt to resume an active clock
       (setq org-clock-persist-query-resume nil)
       ;; Enable auto clock resolution for finding open clocks
       (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
       ;; Include current clocking task in clock reports
       (setq org-clock-report-include-clocking-task t)

       ;; Capture
       (setq org-capture-templates
             (quote (("t" "todo" entry (file "~/Dropbox/org/refile.org")
                      "* ▶ TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                     ("r" "research" entry (file "~/Dropbox/org/research.org")
                      "* %? :IDEA:\n%U\n%a\n" :clock-in t :clock-resume t)
                     ("j" "Journal" entry (file+datetree "~/Dropbox/org/diary.org")
                      "* %?\n%U\n" :clock-in t :clock-resume t)
                     )))

       ;; Refile
       (setq org-default-notes-file "~/Dropbox/org/refile.org")

       ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
       (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                        (org-agenda-files :maxlevel . 9))))
       ;; Use full outline paths for refile targets
       (setq org-refile-use-outline-path t)

       ;;
       (setq org-outline-path-complete-in-steps nil)

       ;; Allow refile to create parent tasks with confirmatio
       (setq org-refile-allow-creating-parent-nodes (quote confirm))

       (setq org-todo-keywords '(
                                 (sequence
                                  "TODO(t)"
                                  "WORKING(w)"
                                  "BLOCKED(b)"
                                  "REVIEW(r)"
                                  "|"
                                  "✔ DONE(d)")
                                 (sequence "|" "✘ CANCELLED(c@/!)"
                                           "SOMEDAY(f)"
                                           )))
       (setq org-todo-keyword-faces
             '(("TODO" . "tomato") ("WORKING" . "gold2") ("REVIEW" . "goldenrod") ("BLOCKED" . "magenta") ("✘ CANCELLED" . "dark red") ("✔ DONE" . "green") ("SOMEDAY" . "sienna"))
             )

       ;; Org-babel

       ;; No preguntar para confirmar la evaluación
       (setq org-confirm-babel-evaluate nil)

       ;; O en la exportación
       (setq org-export-babel-evaluate nil)

       (setq org-confirm-elisp-link-function nil)
       (setq org-confirm-shell-link-function nil)

       ;; Paths a ditaa y plantuml
       (setq org-ditaa-jar-path "~/software/org-libs/ditaa.jar")
       (setq org-plantuml-jar-path "~/software/org-libs/plantuml.jar")

       (org-babel-do-load-languages
        'org-babel-load-languages
        '(

          (shell      . t)
          (R          . t)
          (awk        . t)
          (sed        . t)
          (org        . t)
          (latex      . t)
          (emacs-lisp . t)
          (clojure    . t)
          (stan       . t)
          (ipython    . t)
          (ruby       . t)
          (dot        . t)
          ;; (scala      . t)
          (sqlite     . t)
          (sql        . t)
          (ditaa      . t)
          (plantuml   . t)
          (mongo      . t)
          (cypher     . t)
          ;; (redis      . t)
          (blockdiag  . t)
          )
        )

       ;; LaTeX
       (setq org-export-latex-listings 'minted)
       (setq org-export-latex-minted-options
             '(("frame" "lines")
               ("fontsize" "\\scriptsize")
               ("linenos" "")
               ))
       (setq org-latex-to-pdf-process
             '("latexmk -xelatex='xelatex --shell-escape -interaction nonstopmode' -f  %f")) ;; for multiple passes

       ;; Org-babel no muestra el stderr
       ;; http://kitchingroup.cheme.cmu.edu/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks/
       (setq org-babel-default-header-args:sh
             '((:prologue . "exec 2>&1") (:epilogue . ":"))
             )


       (add-to-list 'org-structure-template-alist
                    '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))


       )  ;; Fin de use-package org
     #+END_SRC

     #+RESULTS:
     : org-clock-out

**** [[https://github.com/Rahi374/org-notebook][org-notebook]]

#+BEGIN_SRC emacs-lisp
(use-package org-notebook :ensure t)
#+END_SRC

#+RESULTS:

**** [[https://www.emacswiki.org/emacs/OrgJournal][org-journal]]

#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :ensure t
   :init
   (setq org-journal-dir "~/journal/")
   (setq org-journal-date-format "#+TITLE: Journal Entry- %e %b %Y (%A)")
   (setq org-journal-time-format ""))
#+END_SRC

A function to easily load today (and yesterday’s) journal entry.

#+BEGIN_SRC emacs-lisp
(defun get-journal-file-today ()
  "Return filename for today's journal entry."
  (let ((daily-name (format-time-string "%Y%m%d")))
    (expand-file-name (concat org-journal-dir daily-name))))

(defun journal-file-today ()
  "Create and load a journal file based on today's date."
  (interactive)
  (find-file (get-journal-file-today)))

(global-set-key (kbd "C-c f j") 'journal-file-today)

(defun get-journal-file-yesterday ()
  "Return filename for yesterday's journal entry."
  (let* ((yesterday (time-subtract (current-time) (days-to-time 1)))
         (daily-name (format-time-string "%Y%m%d" yesterday)))
    (expand-file-name (concat org-journal-dir daily-name))))

(defun journal-file-yesterday ()
  "Creates and load a file based on yesterday's date."
  (interactive)
  (find-file (get-journal-file-yesterday)))

(global-set-key (kbd "C-c f y") 'journal-file-yesterday)
#+END_SRC

**** Meeting notes

#+BEGIN_SRC emacs-lisp
(defun meeting-notes ()
  "Call this after creating an org-mode heading for where the notes for the meeting
should be. After calling this function, call 'meeting-done' to reset the environment."
  (interactive)
  (outline-mark-subtree)                              ;; Select org-mode section
  (narrow-to-region (region-beginning) (region-end))  ;; Only show that region
  (deactivate-mark)
  (delete-other-windows)                              ;; Get rid of other windows
  (text-scale-set 2)                                  ;; Text is now readable by others
  (fringe-mode 0)
  (message "When finished taking your notes, run meeting-done."))
#+END_SRC

and then "undo"

#+BEGIN_SRC emacs-lisp
(defun meeting-done ()
  "Attempt to 'undo' the effects of taking meeting notes."
  (interactive)
  (widen)                                       ;; Opposite of narrow-to-region
  (text-scale-set 0)                            ;; Reset the font size increase
  (fringe-mode 1)
  (winner-undo))                                ;; Put the windows back in place
#+END_SRC

**** [[https://github.com/gizmomogwai/org-kanban][org-kanban]]

#+BEGIN_SRC emacs-lisp
(use-package org-kanban
 :ensure t)
#+END_SRC

#+RESULTS:

**** Exportadores

#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :ensure t            ;Auto-install the package from Melpa (optional)
  :after ox)
(use-package ox-hugo-auto-export) ;If you want the auto-exporting on file saves
(use-package ox-twbs :config (require 'ox-twbs))
(use-package ox-gfm :config (require 'ox-gfm))
(use-package ox-tufte :config (require 'ox-tufte))
(use-package ox-textile :config (require 'ox-textile))
(use-package ox-rst :config (require 'ox-rst))
(use-package ox-asciidoc :config (require 'ox-asciidoc))
(use-package ox-epub :config (require 'ox-epub))
;;(use-package ox-reveal :config (require 'ox-reveal))
#+END_SRC

#+RESULTS:
: t


#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
   :init
   (setq org-reveal-root (concat "file://" (getenv "HOME") "/software/js/reveal.js"))
   (setq org-reveal-postamble "Adolfo De Unánue"))
#+END_SRC

#+RESULTS:

Al exportar a =HTML= aparecen algunos errores raros debido al paquete
=fci= (ver [[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-htmlize.el][aquí para la solución]] y mi pregunta [[https://emacs.stackexchange.com/questions/44361/org-mode-export-gets-weird-symbols-at-he-end-of-each-line-while-exporting-to-htm][aquí]])

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :defer t
  :config
  (progn

    ;; It is required to disable `fci-mode' when `htmlize-buffer' is called;
    ;; otherwise the invisible fci characters show up as funky looking
    ;; visible characters in the source code blocks in the html file.
    ;; http://lists.gnu.org/archive/html/emacs-orgmode/2014-09/msg00777.html
    (with-eval-after-load 'fill-column-indicator
      (defvar modi/htmlize-initial-fci-state nil
        "Variable to store the state of `fci-mode' when `htmlize-buffer' is called.")

      (defun modi/htmlize-before-hook-fci-disable ()
        (setq modi/htmlize-initial-fci-state fci-mode)
        (when fci-mode
          (fci-mode -1)))

      (defun modi/htmlize-after-hook-fci-enable-maybe ()
        (when modi/htmlize-initial-fci-state
          (fci-mode 1)))

      (add-hook 'htmlize-before-hook #'modi/htmlize-before-hook-fci-disable)
      (add-hook 'htmlize-after-hook #'modi/htmlize-after-hook-fci-enable-maybe))

    ;; `flyspell-mode' also has to be disabled because depending on the
    ;; theme, the squiggly underlines can either show up in the html file
    ;; or cause elisp errors like:
    ;; (wrong-type-argument number-or-marker-p (nil . 100))
    (with-eval-after-load 'flyspell
      (defvar modi/htmlize-initial-flyspell-state nil
        "Variable to store the state of `flyspell-mode' when `htmlize-buffer' is called.")

      (defun modi/htmlize-before-hook-flyspell-disable ()
        (setq modi/htmlize-initial-flyspell-state flyspell-mode)
        (when flyspell-mode
          (flyspell-mode -1)))

      (defun modi/htmlize-after-hook-flyspell-enable-maybe ()
        (when modi/htmlize-initial-flyspell-state
          (flyspell-mode 1)))

      (add-hook 'htmlize-before-hook #'modi/htmlize-before-hook-flyspell-disable)
      (add-hook 'htmlize-after-hook #'modi/htmlize-after-hook-flyspell-enable-maybe)
      )
    )
  )
#+END_SRC


**** Otros paquetes relacionados con org

   #+BEGIN_SRC emacs-lisp
   (use-package org-dashboard :ensure t)
   (use-package org-download :ensure t)
   #+END_SRC

   #+RESULTS:


**** [[https://github.com/alphapapa/org-web-tools][org-web-tools]]

#+BEGIN_QUOTE
org-web-tools-insert-link-for-url: Insert an Org-mode link to the URL
in the clipboard or kill-ring. Downloads the page to get the HTML
title.
org-web-tools-insert-web-page-as-entry: Insert the web page for the
URL in the clipboard or kill-ring as an Org-mode entry, as a sibling
heading of the current entry.
org-web-tools-read-url-as-org: Display the web page for the URL in the
clipboard or kill-ring as Org-mode text in a new buffer, processed
with eww-readable.
org-web-tools-convert-links-to-page-entries: Convert all URLs and Org
links in current Org entry to Org headings, each containing the web
page content of that URL, converted to Org-mode text and processed
with eww-readable. This should be called on an entry that solely
contains a list of URLs or links.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package org-web-tools :ensure t)
#+END_SRC

#+RESULTS:

**** =org-tree-slide=

     #+BEGIN_SRC emacs-lisp
       (use-package org-tree-slide
         :defer t
         :after (org)
         :bind (("C-<right>" . org-tree-slide-move-next-tree)
                ("C-<left>" . org-tree-slide-move-previous-tree)
                ("C-<up>" . org-tree-slide-content)
                )
         :init
         (setq org-tree-slide-skip-outline-level 4)
         (org-tree-slide-narrowing-control-profile)
         (setq org-tree-slide-skip-done nil)
         (org-tree-slide-presentation-profile)
         )
     #+END_SRC

     #+RESULTS:
     : org-tree-slide-content

**** =org-projectile=

     #+BEGIN_SRC emacs-lisp

       (use-package org-projectile
         :bind (("C-c n p" . org-projectile-project-todo-completing-read)
                ("C-c c" . org-capture))
         :after (org)
         :config
         (progn
           (setq org-projectile-projects-file
                 "~/Dropbox/org/projects.org")
           (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
           (push (org-projectile-project-todo-entry) org-capture-templates))
         :ensure t)

     #+END_SRC

     #+RESULTS:
     : org-capture

**** =ivy-bibtex=

#+BEGIN_SRC emacs-lisp
(use-package ivy-bibtex
  :ensure t
  :config
  (setq ivy-bibtex-bibliography "~/Dropbox/bibliography/references.bib" ;; where your references are stored
        ivy-bibtex-library-path "~/Dropbox/bibliography/bibtex-pdfs/" ;; where your pdfs etc are stored
        ivy-bibtex-notes-path "~/Dropbox/bibliography/notes.org" ;; where your notes are stored
        bibtex-completion-bibliography "~/Dropbox/bibliography/references.bib" ;; writing completion
        bibtex-completion-notes-path "~/Dropbox/bibliography/notes.org"))
#+END_SRC

#+RESULTS:
: t


**** =org-ref=

     #+BEGIN_SRC emacs-lisp
       (use-package org-ref
         :defer t
         :init
         (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))

         ;; see org-ref for use of these variables
         (setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
               org-ref-default-bibliography '("~/Dropbox/bibliography/references.bib")
               org-ref-pdf-directory "~/Dropbox/bibliography/bibtex-pdfs/")
         )
     #+END_SRC

     #+RESULTS:
     : ~/Dropbox/bibliography/bibtex-pdfs/

**** =interleave=

Del sitio [[https://github.com/rudolfochrist/interleave][web]]:

#+BEGIN_QUOTE
Some history, what this is all about…

In the past, textbooks were sometimes published as interleaved
editions. That meant, each page was followed by a blank page and
ambitious students/scholars had the ability to take their notes
directly in their copy of the textbook. Newton and Kant were prominent
representatives of this technique [fn:blumbach].

Nowadays textbooks (or lecture material) come in PDF format. Although
almost every PDF Reader has the ability to add some notes to the PDF
itself, it is not as powerful as it could be. This is what this Emacs
minor mode tries to accomplish. It presents your PDF side by side to
an Org Mode buffer with you notes. Narrowing down to just those
passages that are relevant to this particular page in the document
viewer.

In a later step it should be possible to create truly interleaved PDFs of your notes.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package interleave
  :defer t
  :bind ("C-x i" . interleave-mode)
  :config
  (setq interleave-split-direction 'horizontal
        interleave-split-lines 20
        interleave-disable-narrowing t))
#+END_SRC

#+RESULTS:
: interleave-mode


**** =org-present=

     #+BEGIN_SRC emacs-lisp
     ;; (use-package org-present
     ;;   :defer t
     ;;   :after (org)
     ;;   :init
     ;;   (progn

     ;;     (add-hook 'org-present-mode-hook
     ;;               (lambda ()
     ;;                 (global-linum-mode -1)
     ;;                 (org-present-big)
     ;;                 (org-display-inline-images)
     ;;                 (org-present-hide-cursor)
     ;;                 (org-present-read-only)))
     ;;     (add-hook 'org-present-mode-quit-hook
     ;;               (lambda ()
     ;;                 (global-linum-mode -1)
     ;;                 (org-present-small)
     ;;                 (org-remove-inline-images)
     ;;                 (org-present-show-cursor)
     ;;                 (org-present-read-write))))
     ;;   )

     #+END_SRC

     #+RESULTS:

**** =org-bullets=

     #+BEGIN_SRC emacs-lisp
       (use-package org-bullets
         :defer t
         :diminish
         :disabled
         :after (org)
         :init
         (setq org-bullets-bullet-list
               '("■" "◆" "▲" "○" "☉" "◎" "◉" "○" "◌" "◎" "●" "◦" "◯" "⚪" "⚫" "⚬" "❍" "￮" "⊙" "⊚" "⊛" "∙" "∘"))
         (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
         )
     #+END_SRC

     #+RESULTS:

**** =org-attach-screenshot=

     #+BEGIN_SRC emacs-lisp
       (use-package org-attach-screenshot
         :diminish
         :after (org)
         :bind
         (("C-c S" . org-attach-screenshot))
         )
     #+END_SRC

     #+RESULTS:
     : org-attach-screenshot


*** Elisp

#+BEGIN_SRC emacs-lisp
;; Disable checking doc
(use-package flycheck
  :config
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))


;; Package lint
(use-package package-lint :ensure t)

;; Pretty print for lisp
(use-package ipretty :ensure t)
#+END_SRC

#+RESULTS:

*** =sql=

#+begin_src emacs-lisp
(add-to-list 'same-window-buffer-names "*SQL*")

(setq sql-postgres-login-params
      '((user :default "postgres")
        (database :default "postgres")
        (server :default "localhost")
        (port :default 5432)))

(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (setq sql-prompt-regexp "^[_[:alpha:]]*[=][#>] ")
            (setq sql-prompt-cont-regexp "^[_[:alpha:]]*[-][#>] ")
            (toggle-truncate-lines t)))

(use-package sql-indent
  :delight sql-mode "Σ"
  :mode "\\.sql\\'"
  :interpreter ("sql" . sql-mode))
#+end_src

#+RESULTS:
: ((sql . sql-mode) (r . R-mode) (Rscript . R-mode) (ruby1.8 . ruby-mode) (ruby1.9 . ruby-mode) (jruby . ruby-mode) (rbx . ruby-mode) (ruby . ruby-mode) (python[0-9.]* . python-mode) (rhino . js-mode) (gjs . js-mode) (nodejs . js-mode) (node . js-mode) (gawk . awk-mode) (nawk . awk-mode) (mawk . awk-mode) (awk . awk-mode) (pike . pike-mode) (\(mini\)?perl5? . perl-mode) (wishx? . tcl-mode) (tcl\(sh\)? . tcl-mode) (expect . tcl-mode) (octave . octave-mode) (scm . scheme-mode) ([acjkwz]sh . sh-mode) (r?bash2? . sh-mode) (dash . sh-mode) (mksh . sh-mode) (\(dt\|pd\|w\)ksh . sh-mode) (es . sh-mode) (i?tcsh . sh-mode) (oash . sh-mode) (rc . sh-mode) (rpm . sh-mode) (sh5? . sh-mode) (tail . text-mode) (more . text-mode) (less . text-mode) (pg . text-mode) (make . makefile-gmake-mode) (guile . scheme-mode) (clisp . lisp-mode) (emacs . emacs-lisp-mode))

*** Scala

#+BEGIN_SRC emacs-lisp
(use-package ensime
:ensure t)
(setq ensime-startup-notification nil
      ensime-startup-snapshot-notification nil)
#+END_SRC

#+RESULTS:


*** =R=: [[https://ess.r-project.org/][Emacs Speaks Statistics]]

    #+BEGIN_SRC emacs-lisp

    (use-package ess-site
      :ensure ess
      :config
      ;; Subpackage
      (use-package ess-R-data-view :ensure t)
      (use-package ess-smart-equals :disabled)
      (use-package ess-smart-underscore :ensure t)
      (use-package ess-view :ensure t)

      ;;(ess-toggle-underscore nil) ; http://stackoverflow.com/questions/2531372/how-to-stop-emacs-from-replacing-underbar-with-in-ess-mode
      (setq ess-fancy-comments nil) ; http://stackoverflow.com/questions/780796/emacs-ess-mode-tabbing-for-comment-region
                        ; Make ESS use RStudio's indenting style
      (add-hook 'ess-mode-hook (lambda() (ess-set-style 'RStudio)))
                        ; Make ESS use more horizontal screen
                        ; http://stackoverflow.com/questions/12520543/how-do-i-get-my-r-buffer-in-emacs-to-occupy-more-horizontal-space
      (add-hook 'ess-R-post-run-hook 'ess-execute-screen-options)
      (define-key inferior-ess-mode-map "\C-cw" 'ess-execute-screen-options)
                        ; Add path to Stata to Emacs' exec-path so that Stata can be found
      )
    #+END_SRC

	#+RESULTS:
	: t

**** Company

#+BEGIN_SRC emacs-lisp
(use-package company-statistics
  :ensure t
  :after company
  :init
  (add-hook 'after-init-hook 'company-statistics-mode))
#+END_SRC

#+RESULTS:

*** =ssh=

#+BEGIN_SRC emacs-lisp
(use-package ssh :ensure t)
(use-package ssh-deploy :ensure t)
#+END_SRC

#+RESULTS:

*** Configuration files
    #+BEGIN_SRC emacs-lisp
    (use-package nginx-mode
      :ensure t)

    (use-package apache-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.htaccess\\'"   . apache-mode))
      (add-to-list 'auto-mode-alist '("httpd\\.conf\\'"  . apache-mode))
      (add-to-list 'auto-mode-alist '("srm\\.conf\\'"    . apache-mode))
      (add-to-list 'auto-mode-alist '("access\\.conf\\'" . apache-mode))
      (add-to-list 'auto-mode-alist '("sites-\\(available\\|enabled\\)/" . apache-mode)))


    (use-package syslog-mode
      :mode "\\.log$")

    (use-package config-general-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.conf$" . config-general-mode))
      (add-to-list 'auto-mode-alist '("\\.*rc$"  . config-general-mode)))

    ;; (use-package authinfo-mode
    ;;   :ensure t
    ;;   :config
    ;;   (add-to-list 'auto-mode-alist '("\\.authinfo\\(?:\\.gpg\\)\\'" . authinfo-mode)))

    (use-package ssh-config-mode
      :ensure t
      :config
      (autoload 'ssh-config-mode "ssh-config-mode" t)
      (add-to-list 'auto-mode-alist '("/\\.ssh/config\\'"     . ssh-config-mode))
      (add-to-list 'auto-mode-alist '("/system/ssh\\'"        . ssh-config-mode))
      (add-to-list 'auto-mode-alist '("/sshd?_config\\'"      . ssh-config-mode))
      (add-to-list 'auto-mode-alist '("/known_hosts\\'"       . ssh-known-hosts-mode))
      (add-to-list 'auto-mode-alist '("/authorized_keys2?\\'" . ssh-authorized-keys-mode))
      (add-hook 'ssh-config-mode-hook 'turn-on-font-lock))

    (use-package logview
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("syslog\\(?:\\.[0-9]+\\)" . logview-mode))
      (add-to-list 'auto-mode-alist '("\\.log\\(?:\\.[0-9]+\\)?\\'" . logview-mode)))
    #+END_SRC

    #+RESULTS:
	: t

*** =emacs lisp=

#+BEGIN_SRC emacs-lisp
(use-package elisp-mode
  :ensure nil
  :delight emacs-lisp-mode "ξ")
#+END_SRC

#+RESULTS:

*** =Docker=

    #+BEGIN_SRC emacs-lisp
    (use-package docker :ensure t)
    (use-package docker-tramp :ensure t)
    (use-package dockerfile-mode
      :ensure t
      :delight dockerfile-mode "δ"
      :mode "Dockerfile$"
      )
    (use-package docker-compose-mode :ensure t :mode "docker-compose.yml")
    #+END_SRC

    Para usar =docker-tramp=

    #+BEGIN_EXAMPLE
    C-x C-f /docker:user@container:/path/to/file

    where
      user           is the user that you want to use (optional)
      container      is the id or name of the container
    #+END_EXAMPLE


**** Links relacionados

     [[https://github.com/fniessen/refcard-org-beamer][Refcard para org-beamer]]

     [[https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/][From helm to ivy]]

     [[http://oremacs.com/2015/04/16/ivy-mode/][Descripción de ivy]]


*** =markdown=

    Keybindings en [[http://jblevins.org/projects/markdown-mode/][Markdown Mode for Emacs]]
    Tutorial: http://jblevins.org/projects/markdown-mode/
    #+BEGIN_SRC emacs-lisp

    (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :delight markdown-mode "μ"
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))
    #+END_SRC

	#+RESULTS:
    : ((\.json\ . json-mode) (\.[pP][dD][fF]\' . pdf-view-mode) (\.cql\' . cypher-mode) (\.[PpTtCc][Ss][Vv]\' . csv-mode) (/vcs/gitconfig' . gitconfig-mode) (/.gitconfig' . gitconfig-mode) (\.ya?ml . yaml-mode) (\.json . json-mode) (README\.md\' . gfm-mode) (docker-compose.yml . docker-compose-mode) (Dockerfile$ . dockerfile-mode) (syslog\(?:\.[0-9]+\) . logview-mode) (/authorized_keys2?\' . ssh-authorized-keys-mode) (/system/ssh\' . ssh-config-mode) (\.*rc$ . config-general-mode) (\.conf$ . config-general-mode) (\.log$ . syslog-mode) (sites-\(available\|enabled\)/ . apache-mode) (access\.conf\' . apache-mode) (srm\.conf\' . apache-mode) (httpd\.conf\' . apache-mode) (\.htaccess\' . apache-mode) (\.jl\' . ess-julia-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (/apache2/sites-\(?:available\|enabled\)/ . apache-mode) (/httpd/conf/.+\.conf\' . apache-mode) (/apache2/.+\.conf\' . apache-mode) (/\(?:access\|httpd\|srm\)\.conf\' . apache-mode) (/\.htaccess\' . apache-mode) (\.[Cc][Ss][Vv]\' . csv-mode) (docker-compose[^/]*\.yml\' . docker-compose-mode) (Dockerfile\(?:\..*\)?\' . dockerfile-mode) (\.lsp\' . XLS-mode) (\.ado\' . STA-mode) (\.do\' . STA-mode) (\.SSC\' . S-mode) (\.ssc\' . S-mode) (\.[qsS]\' . S-mode) (\.sp\' . S-mode) (\.[Ss][Aa][Ss]\' . SAS-mode) (\.Sout . S-transcript-mode) (\.[Ss]t\' . S-transcript-mode) (\.Rd\' . Rd-mode) (/Makevars\(\.win\)?$ . makefile-mode) (\.[Rr]out . R-transcript-mode) (\.[sS]nw\' . Snw-mode) (\.[rR]nw\' . Rnw-mode) (CITATION\' . R-mode) (NAMESPACE\' . R-mode) (\.[rR]profile\' . R-mode) (\.[rR]\' . R-mode) (/R/.*\.q\' . R-mode) (\.hat\' . omegahat-mode) (\.omg\' . omegahat-mode) (\.[Jj][Mm][Dd]\' . ess-jags-mode) (\.[Jj][Oo][Gg]\' . ess-jags-mode) (\.[Jj][Aa][Gg]\' . ess-jags-mode) (\.[Bb][Mm][Dd]\' . ess-bugs-mode) (\.[Bb][Oo][Gg]\' . ess-bugs-mode) (\.[Bb][Uu][Gg]\' . ess-bugs-mode) (\(?:build\|profile\)\.boot\' . clojure-mode) (\.cljs\' . clojurescript-mode) (\.cljc\' . clojurec-mode) (\.\(clj\|dtm\|edn\)\' . clojure-mode) (/git/attributes\' . gitattributes-mode) (/info/attributes\' . gitattributes-mode) (/\.gitattributes\' . gitattributes-mode) (/etc/gitconfig\' . gitconfig-mode) (/\.gitmodules\' . gitconfig-mode) (/git/config\' . gitconfig-mode) (/modules/.*/config\' . gitconfig-mode) (/\.git/config\' . gitconfig-mode) (/\.gitconfig\' . gitconfig-mode) (/git/ignore\' . gitignore-mode) (/info/exclude\' . gitignore-mode) (/\.gitignore\' . gitignore-mode) (\.gv\' . graphviz-dot-mode) (\.dot\' . graphviz-dot-mode) (\(?:\(?:\(?:\.\(?:b\(?:\(?:abel\|ower\)rc\)\|json\(?:ld\)?\)\|composer\.lock\)\)\'\) . json-mode) (\.jl\' . julia-mode) (\.hva\' . latex-mode) (\.drv\' . latex-mode) (/nginx/.+\.conf\' . nginx-mode) (nginx\.conf\' . nginx-mode) (\.cyp\' . cypher-mode) (\.cypher\' . cypher-mode) (\.\(scala\|sbt\)\' . scala-mode) (/authorized_keys\' . ssh-authorized-keys-mode) (/known_hosts\' . ssh-known-hosts-mode) (/sshd?_config\' . ssh-config-mode) (/\.ssh/config\' . ssh-config-mode) (\.md\' . markdown-mode) (\.markdown\' . markdown-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (/git-rebase-todo\' . git-rebase-mode) (\.\(?:3fr\|a\(?:r[tw]\|vs\)\|bmp[23]?\|c\(?:als?\|myka?\|r[2w]\|u[rt]\)\|d\(?:c[mrx]\|ds\|jvu\|ng\|px\)\|exr\|f\(?:ax\|its\)\|gif\(?:87\)?\|hrz\|ic\(?:on\|[bo]\)\|j\(?:\(?:pe\|[np]\)g\)\|k\(?:25\|dc\)\|m\(?:iff\|ng\|rw\|s\(?:l\|vg\)\|tv\)\|nef\|o\(?:rf\|tb\)\|p\(?:bm\|c\(?:ds\|[dltx]\)\|db\|ef\|gm\|i\(?:ct\|x\)\|jpeg\|n\(?:g\(?:24\|32\|8\)\|[gm]\)\|pm\|sd\|tif\|wp\)\|r\(?:a[fs]\|gb[ao]?\|l[ae]\)\|s\(?:c[rt]\|fw\|gi\|r[2f]\|un\|vgz?\)\|t\(?:ga\|i\(?:ff\(?:64\)?\|le\|m\)\|tf\)\|uyvy\|v\(?:da\|i\(?:car\|d\|ff\)\|st\)\|w\(?:bmp\|pg\)\|x\(?:3f\|bm\|cf\|pm\|wd\|[cv]\)\|y\(?:cbcra?\|uv\)\)\' . image-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode) (\.log\(?:\.[0-9]+\)?\' . logview-mode))

Syntax highlight in block

#+BEGIN_SRC emacs-lisp
(use-package polymode
  :ensure t
  :config
  (require 'poly-markdown))
#+END_SRC

#+RESULTS:
: t

*** =json=


#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :delight json-mode "J"
  :mode "\\.json"
  :hook (before-save . nanounanue/json-mode-before-save-hook)
  :preface
  (defun nanounanue/json-mode-before-save-hook ()
    (when (eq major-mode 'json-mode)
      (json-pretty-print-buffer-ordered)))
)

(use-package json-navigator)
(use-package json-reformat)
#+END_SRC


*** =yaml=

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode :ensure t :mode "\\.ya?ml")
(use-package yaml-tomato :ensure t)
#+END_SRC

#+RESULTS:

*** COMMENT =mmm=

#+BEGIN_SRC emacs-lisp
(use-package mmm-mode
  :ensure t
  )

(use-package mmm-jinja2
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.jinja2\\'" . html-mode))
  (mmm-add-mode-ext-class 'html-mode "\\.jinja2\\'" 'jinja2)
  )
#+END_SRC

#+RESULTS:
: t

*** =python=
#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :ensure t
  :config
  (add-hook 'python-mode-hook 'anaconda-mode)
  (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
#+END_SRC

#+RESULTS:
: t

** Blog

   Basado principalmente de [[http://heikkil.github.io/blog/2015/03/28/understanding-org-page/][Understanding org-page]] y del [[https://github.com/kelvinh/org-page/blob/master/doc/quick-guide.org][Quick guide to org-page]]

   #+BEGIN_SRC emacs-lisp
     (use-package org-page
       :ensure t
       :config
       (progn
         (setq op/repository-directory "~/proyectos/nanounanue.github.io")   ;; the repository location
         (setq op/site-domain "http://nanounanue.github.io")         ;; your domain
         ;;; the configuration below you should choose one, not both
         ;;(setq op/personal-disqus-shortname "your_disqus_shortname")    ;; your disqus commenting system
         ;;(setq op/personal-duoshuo-shortname "your_duoshuo_shortname")  ;; your duoshuo commenting system
         ;;(setq op/hashover-comments t)                                   ;; activate hashover self-hosted comment system
         (setq op/personal-avatar "https://avatars2.githubusercontent.com/u/494528?v=3&s=460")
         ;; for commenting; disabled for now
         ;;(setq op/personal-disqus-shortname "your_disqus_shortname")

         ;; analytics set up at ~/.emacs.secrets file
         ;;(setq op/personal-google-analytics-id "UA-NNNNNNNN-N")

         (setq op/personal-github-link "https://github.com/nanounanue")

         (setq op/site-main-title "nanounanue @ home")
         (setq op/site-sub-title "...")

         ;; set up my own theme since a sans option does not exist
         ;;(setq op/theme-root-directory "~/src/org-page/heikkil.github.io/themes")
         ;;(setq op/theme 'sans)  ; mdo is the default

         )
       )

     (use-package blog-admin
       :ensure t
       :defer t
       :commands blog-admin-start
       :init
       (progn
         ;; do your configuration here
         (setq blog-admin-backend-type 'org-page)
         (setq blog-admin-backend-path "~/proyectos/nanounanue.github.io")
         (setq blog-admin-backend-new-post-in-drafts t)
         (setq blog-admin-backend-new-post-with-same-name-dir t)
         (setq blog-admin-backend-org-page-drafts "_drafts") ;; directory to save draft
         ;;(setq blog-admin-backend-org-page-config-file "/path/to/org-page/config.el") ;; if nil init.el is used
         )
       )
   #+END_SRC

   #+RESULTS:
   : _drafts


** Misceláneo

*** Folding

#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure t
  :config
  (add-hook 'c-mode-common-hook   'hs-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
  (add-hook 'java-mode-hook       'hs-minor-mode)
  (add-hook 'lisp-mode-hook       'hs-minor-mode)
  (add-hook 'perl-mode-hook       'hs-minor-mode)
  (add-hook 'sh-mode-hook         'hs-minor-mode)
  (add-hook 'js-mode-hook         'hs-minor-mode))
(use-package fold-dwim :ensure t)
#+END_SRC

#+RESULTS:

*** =fancy-narrow=

    #+BEGIN_SRC emacs-lisp
      (use-package fancy-narrow
        :ensure t
        :diminish
        :config
        (fancy-narrow-mode)
        )
    #+END_SRC

    #+RESULTS:
	: t

*** =demo-it=

    Paquete para hacer demostraciones. Ver por ejemplo:

    - [[https://www.youtube.com/watch?v=WZVZXp-i7jQ][Demostration of demo-it]]
    - [[https://github.com/howardabrams/demo-it][Repositorio de demo-it]]

      #+BEGIN_SRC emacs-lisp
        (use-package demo-it
          :ensure t
          )
      #+END_SRC

      #+RESULTS:

*** =magit=

Configuración tomada de [[https://ekaschalk.github.io/post/pretty-magit/][aquí]]

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :config

  ;; Ignore recent commit
  (setq magit-status-sections-hook
        '(magit-insert-status-headers
          magit-insert-merge-log
          magit-insert-rebase-sequence
          magit-insert-am-sequence
          magit-insert-sequencer-sequence
          magit-insert-bisect-output
          magit-insert-bisect-rest
          magit-insert-bisect-log
          magit-insert-untracked-files
          magit-insert-unstaged-changes
          magit-insert-staged-changes
          magit-insert-stashes
          magit-insert-unpulled-from-upstream
          magit-insert-unpulled-from-pushremote
          magit-insert-unpushed-to-upstream
          magit-insert-unpushed-to-pushremote))


  ;; Update visualization
  (setq pretty-magit-alist nil
        pretty-magit-prompt nil)

  (defmacro pretty-magit (WORD ICON PROPS &optional NO-PROMPT?)
    "Replace sanitized WORD with ICON, PROPS and by default add to prompts."
    `(prog1
         (add-to-list 'pretty-magit-alist
                      (list (rx bow (group ,WORD (eval (if ,NO-PROMPT? "" ":"))))
                            ,ICON ',PROPS))
       (unless ,NO-PROMPT?
         (add-to-list 'pretty-magit-prompt (concat ,WORD ": ")))))

  (pretty-magit "Feature" ? (:foreground "slate gray" :height 1.2) pretty-magit-prompt)
  (pretty-magit ": add"   ? (:foreground "#375E97" :height 1.2) pretty-magit-prompt)
  (pretty-magit ": fix"   ? (:foreground "#FB6542" :height 1.2) pretty-magit-prompt)
  (pretty-magit ": clean" ? (:foreground "#FFBB00" :height 1.2) pretty-magit-prompt)
  (pretty-magit ": docs"  ? (:foreground "#3F681C" :height 1.2) pretty-magit-prompt)
  (pretty-magit "master"  ? (:box t :height 1.2) t)
  (pretty-magit "origin"  ? (:box t :height 1.2) t)

  (defun add-magit-faces ()
    "Add face properties and compose symbols for buffer from pretty-magit."
    (interactive)
    (with-silent-modifications
      (--each pretty-magit-alist
        (-let (((rgx icon props) it))
          (save-excursion
            (goto-char (point-min))
            (while (search-forward-regexp rgx nil t)
              (compose-region
               (match-beginning 1) (match-end 1) icon)
              (when props
                (add-face-text-property
                 (match-beginning 1) (match-end 1) props))))))))

  (advice-add 'magit-status :after 'add-magit-faces)
  (advice-add 'magit-refresh-buffer :after 'add-magit-faces)


  ;; Opening repo externally
  (defun parse-url (url)
    "convert a git remote location as a HTTP URL"
    (if (string-match "^http" url)
        url
      (replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
                                "https://\\2/\\3"
                                url)))
  (defun magit-open-repo ()
    "open remote repo URL"
    (interactive)
    (let ((url (magit-get "remote" "origin" "url")))
      (progn
        (browse-url (parse-url url))
        (message "opening repo %s" url))))


  (add-hook 'magit-mode-hook
            (lambda ()
              (local-set-key (kbd "o") 'magit-open-repo))))


;; Some plugins
(use-package magit-tbdiff :ensure t :after magit)
#+END_SRC

#+RESULTS:

**** Edición

#+BEGIN_SRC emacs-lisp
(use-package git-commit :ensure t)
(use-package gitattributes-mode :ensure t)
(use-package gitignore-mode :ensure t)
(use-package gitconfig-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist
               '("/\.gitconfig\'"    . gitconfig-mode))
  (add-to-list 'auto-mode-alist
               '("/vcs/gitconfig\'"    . gitconfig-mode)))
#+END_SRC

#+RESULTS:
: t


**** =magithub=

    #+BEGIN_SRC emacs-lisp
      (use-package magithub
        :disabled
        :after magit
        :ensure t
        :config
        (magithub-feature-autoinject t)

        (setq ghub-username "nanounanue")

        )

      (use-package magit-gitflow
        :ensure t
        :after magit
        :disabled
        :init
        (progn
          (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)  ;; Keybing: C-f en la ventana de magit
          )
        )
    #+END_SRC

    #+RESULTS:

**** Navegación

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine :ensure t)
#+END_SRC

#+RESULTS:


*** =eshell=

    Puedes cambiar el tema de =eshell= tecleando =use-theme= en la consola
    (esto gracias a =eshell-git-prompt-use-theme=)

    #+BEGIN_SRC emacs-lisp

    (setenv "PAGER" "/bin/cat") ;; fixes git terminal warning
    (add-hook 'eshell-mode-hook #'(lambda () (setenv "PAGER" "/bin/cat")))


    (use-package eshell
      :init
      (setq ;; eshell-buffer-shorthand t ...  Can't see Bug#19391
       eshell-scroll-to-bottom-on-input 'all
       eshell-error-if-no-glob t
       eshell-hist-ignoredups t
       eshell-save-history-on-exit t
       eshell-prefer-lisp-functions nil
       eshell-destroy-buffer-when-process-dies t))

    (use-package eshell
      :init
      (add-hook 'eshell-mode-hook
                (lambda ()
                  (add-to-list 'eshell-visual-commands "ssh")
                  (add-to-list 'eshell-visual-commands "tail")
                  (add-to-list 'eshell-visual-commands "top"))))

    (setq eshell-list-files-after-cd t)
    (setq eshell-ls-initial-args "-lh")

    (use-package eshell-git-prompt
      :config (eshell-git-prompt-use-theme 'robbyrussell))

    (use-package eshell-prompt-extras
      :config
      (progn
        (with-eval-after-load "esh-opt"
          (autoload 'epe-theme-lambda "eshell-prompt-extras")
          (setq eshell-highlight-prompt nil
                eshell-prompt-function 'epe-theme-lambda))
        ))


    ;; pinched from powerline.el
    (defun curve-right-xpm (color1 color2)
      "Return an XPM right curve string representing."
      (create-image
       (format "/* XPM */
    static char * curve_right[] = {
    \"12 18 2 1\",
    \". c %s\",
    \"  c %s\",
    \"           .\",
    \"         ...\",
    \"         ...\",
    \"       .....\",
    \"       .....\",
    \"       .....\",
    \"      ......\",
    \"      ......\",
    \"      ......\",
    \"      ......\",
    \"      ......\",
    \"      ......\",
    \"       .....\",
    \"       .....\",
    \"       .....\",
    \"         ...\",
    \"         ...\",
    \"           .\"};"
               (if color2 color2 "None")
               (if color1 color1 "None"))
       'xpm t :ascent 'center))

    (defun curve-left-xpm (color1 color2)
      "Return an XPM left curve string representing."
      (create-image
       (format "/* XPM */
    static char * curve_left[] = {
    \"12 18 2 1\",
    \". c %s\",
    \"  c %s\",
    \".           \",
    \"...         \",
    \"...         \",
    \".....       \",
    \".....       \",
    \".....       \",
    \"......      \",
    \"......      \",
    \"......      \",
    \"......      \",
    \"......      \",
    \"......      \",
    \".....       \",
    \".....       \",
    \".....       \",
    \"...         \",
    \"...         \",
    \".           \"};"
               (if color1 color1 "None")
               (if color2 color2 "None"))
       'xpm t :ascent 'center))

    ;; TODO memoize those drawing functions

    (defvar eshell-prompt-suffix
      (if (eq system-type 'darwin) "🔥 " "$ ")
      "String at end of prompt")

    (defun eshell-blocky-prompt ()
      (let ((bg (frame-parameter nil 'background-color))
            (fg (frame-parameter nil 'foreground-color)))
        (concat
         (propertize " " 'display (curve-right-xpm bg "#3d3d68"))
         (propertize (eshell/pwd) 'face
                     (list :foreground "white"
                           :background "#3d3d68"))
         (propertize " " 'display (curve-left-xpm "#3d3d68" bg))
         eshell-prompt-suffix)))



    (defconst eshell-blocky-prompt-regexp
      (string-join (list "^[^#\n]* " eshell-prompt-suffix)))

    (unless (frame-parameter nil 'tty)
      ;; TODO fancy prompt in terminal mode also
      (setq eshell-prompt-function 'eshell-blocky-prompt
            eshell-prompt-regexp eshell-blocky-prompt-regexp))

    #+END_SRC

    #+RESULTS:
    : ^[^#
    : ]* $

While deleting and recreating eshell may be just as fast, I always
forget and type clear, so let’s implement it:

#+BEGIN_SRC emacs-lisp
(defun eshell/clear ()
  "Clear the eshell buffer."
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))
#+END_SRC

#+RESULTS:
: eshell/clear

Some aliases

#+BEGIN_SRC emacs-lisp
(add-hook 'eshell-mode-hook (lambda ()
    (eshell/alias "e" "find-file $1")
    (eshell/alias "ff" "find-file $1")
    (eshell/alias "emacs" "find-file $1")
    (eshell/alias "ee" "find-file-other-window $1")

    (eshell/alias "gd" "magit-diff-unstaged")
    (eshell/alias "gds" "magit-diff-staged")
    (eshell/alias "d" "dired $1")

    ;; The 'ls' executable requires the Gnu version on the Mac
    (let ((ls (if (file-exists-p "/usr/local/bin/gls")
                  "/usr/local/bin/gls"
                "/bin/ls")))
      (eshell/alias "ll" (concat ls " -AlohG --color=always")))))
#+END_SRC

#+RESULTS:
| (lambda nil (eshell/alias e find-file $1) (eshell/alias ff find-file $1) (eshell/alias emacs find-file $1) (eshell/alias ee find-file-other-window $1) (eshell/alias gd magit-diff-unstaged) (eshell/alias gds magit-diff-staged) (eshell/alias d dired $1) (let ((ls (if (file-exists-p /usr/local/bin/gls) /usr/local/bin/gls /bin/ls))) (eshell/alias ll (concat ls  -AlohG --color=always)))) | (lambda nil (add-to-list 'eshell-visual-commands ssh) (add-to-list 'eshell-visual-commands tail) (add-to-list 'eshell-visual-commands top)) | tramp-eshell-directory-change | (lambda nil (setenv PAGER /bin/cat)) | ess-r-package-activate-directory-tracker |


#+BEGIN_SRC emacs-lisp
(defun eshell/gst (&rest args)
    (magit-status (pop args) nil)
    (eshell/echo))   ;; The echo command suppresses output
#+END_SRC

#+RESULTS:
: eshell/gst

#+BEGIN_SRC emacs-lisp
(defun eshell/f (filename &optional dir try-count)
  "Searches for files matching FILENAME in either DIR or the
current directory. Just a typical wrapper around the standard
`find' executable.

Since any wildcards in FILENAME need to be escaped, this wraps the shell command.

If not results were found, it calls the `find' executable up to
two more times, wrapping the FILENAME pattern in wildcat
matches. This seems to be more helpful to me."
  (let* ((cmd (concat
               (executable-find "find")
               " " (or dir ".")
               "      -not -path '*/.git*'"
               " -and -not -path '*node_modules*'"
               " -and -not -path '*classes*'"
               " -and "
               " -type f -and "
               "-iname '" filename "'"))
         (results (shell-command-to-string cmd)))

    (if (not (s-blank-str? results))
        results
      (cond
       ((or (null try-count) (= 0 try-count))
        (eshell/f (concat filename "*") dir 1))
       ((or (null try-count) (= 1 try-count))
        (eshell/f (concat "*" filename) dir 2))
       (t "")))))

(defun eshell/ef (filename &optional dir)
  "Searches for the first matching filename and loads it into a
file to edit."
  (let* ((files (eshell/f filename dir))
         (file (car (s-split "\n" files))))
    (find-file file)))
#+END_SRC

#+RESULTS:
: eshell/ef

**** A better prompt...

From http://blog.liangzan.net/blog/2012/12/12/customizing-your-emacs-eshell-prompt/

#+BEGIN_SRC emacs-lisp
(defun curr-dir-git-branch-string (pwd)
  "Returns current git branch as a string, or the empty string if
PWD is not in a git repo (or the git command is not found)."
  (interactive)
  (when (and (not (file-remote-p pwd))
             (eshell-search-path "git")
             (locate-dominating-file pwd ".git"))
    (let* ((git-url (shell-command-to-string "git config --get remote.origin.url"))
           (git-repo (file-name-base (s-trim git-url)))
           (git-output (shell-command-to-string (concat "git rev-parse --abbrev-ref HEAD")))
           (git-branch (s-trim git-output))
           (git-icon  "\xe0a0")
           (git-icon2 (propertize "\xf020" 'face `(:family "octicons"))))
      (concat git-repo " " git-icon2 " " git-branch))))
#+END_SRC

#+RESULTS:
: curr-dir-git-branch-string

#+BEGIN_SRC emacs-lisp
(defun pwd-shorten-dirs (pwd)
  "Shorten all directory names in PWD except the last two."
  (let ((p-lst (split-string pwd "/")))
    (if (> (length p-lst) 2)
        (concat
         (mapconcat (lambda (elm) (if (zerop (length elm)) ""
                               (substring elm 0 1)))
                    (butlast p-lst 2)
                    "/")
         "/"
         (mapconcat (lambda (elm) elm)
                    (last p-lst 2)
                    "/"))
      pwd)))  ;; Otherwise, we just return the PWD
#+END_SRC

#+RESULTS:
: pwd-shorten-dirs

#+BEGIN_SRC emacs-lisp
(defun pwd-replace-home (pwd)
  "Replace home in PWD with tilde (~) character."
  (interactive)
  (let* ((home (expand-file-name (getenv "HOME")))
         (home-len (length home)))
    (if (and
         (>= (length pwd) home-len)
         (equal home (substring pwd 0 home-len)))
        (concat "~" (substring pwd home-len))
      pwd)))
#+END_SRC

#+RESULTS:
: pwd-replace-home

#+BEGIN_SRC emacs-lisp
(defun split-directory-prompt (directory)
  (if (string-match-p ".*/.*" directory)
      (list (file-name-directory directory) (file-name-base directory))
    (list "" directory)))
#+END_SRC

#+RESULTS:
: split-directory-prompt

#+BEGIN_SRC emacs-lisp
(defun python-prompt ()
  "Returns a string (may be empty) based on the current Python
   Virtual Environment. Assuming the M-x command: `pyenv-mode-set'
   has been called."
  (when (fboundp #'pyenv-mode-version)
    (let ((venv (pyenv-mode-version)))
      (when venv
        (concat
         (propertize "\xe928" 'face `(:family "alltheicons"))
         (pyenv-mode-version))))))
#+END_SRC

#+RESULTS:
: python-prompt

#+BEGIN_SRC emacs-lisp
(defun eshell/eshell-local-prompt-function ()
  "A prompt for eshell that works locally (in that is assumes
that it could run certain commands) in order to make a prettier,
more-helpful local prompt."
  (interactive)
  (let* ((pwd        (eshell/pwd))
         (directory (split-directory-prompt
                     (pwd-shorten-dirs
                      (pwd-replace-home pwd))))
         (parent (car directory))
         (name   (cadr directory))
         (branch (curr-dir-git-branch-string pwd))
         (python (when (not (file-remote-p pwd)) (python-prompt)))

         (dark-env (eq 'dark (frame-parameter nil 'background-mode)))
         (for-bars                 `(:weight bold))
         (for-parent  (if dark-env `(:foreground "dark orange") `(:foreground "blue")))
         (for-dir     (if dark-env `(:foreground "orange" :weight bold)
                        `(:foreground "blue" :weight bold)))
         (for-git                  `(:foreground "green"))
         (for-python               `(:foreground "#5555FF")))

    (concat
     (propertize "⟣─ "    'face for-bars)
     (propertize parent   'face for-parent)
     (propertize name     'face for-dir)
     (when branch
       (concat (propertize " ── "    'face for-bars)
               (propertize branch   'face for-git)))
     (when python
       (concat (propertize " ── " 'face for-bars)
               (propertize python 'face for-python)))
     (propertize "\n"     'face for-bars)
     (propertize (if (= (user-uid) 0) " #" " $") 'face `(:weight ultra-bold))
     ;; (propertize " └→" 'face (if (= (user-uid) 0) `(:weight ultra-bold :foreground "red") `(:weight ultra-bold)))
     (propertize " "    'face `(:weight bold)))))

(setq-default eshell-prompt-function #'eshell/eshell-local-prompt-function)
#+END_SRC

#+RESULTS:
: eshell/eshell-local-prompt-function

*** =graphviz=

#+BEGIN_SRC emacs-lisp
(use-package graphviz-dot-mode
  :ensure t
  :init
  (defvar default-tab-width nil)

  :config
  (add-to-list 'auto-mode-alist '("\\.dot\\'" . graphviz-dot-mode)))
#+END_SRC

#+RESULTS:
: t

*** =csv=

    #+BEGIN_SRC emacs-lisp
      (use-package csv-mode
        :ensure t
        :mode "\\.[PpTtCc][Ss][Vv]\\'"

        :config
        (progn
          (setq csv-separators '("," ";" "|" " " "\t"))
          )
        )
    #+END_SRC

    #+RESULTS:
    : ((\.[pP][dD][fF]\' . pdf-view-mode) (\.[PpTtCc][Ss][Vv]\' . csv-mode) (\.[Cc][Ss][Vv]\' . csv-mode) (\.gv\' . graphviz-dot-mode) (\.dot\' . graphviz-dot-mode) (/vcs/gitconfig' . gitconfig-mode) (/.gitconfig' . gitconfig-mode) (/etc/gitconfig\' . gitconfig-mode) (/\.gitmodules\' . gitconfig-mode) (/git/config\' . gitconfig-mode) (/modules/.*/config\' . gitconfig-mode) (/\.git/config\' . gitconfig-mode) (/\.gitconfig\' . gitconfig-mode) (/git/ignore\' . gitignore-mode) (/info/exclude\' . gitignore-mode) (/\.gitignore\' . gitignore-mode) (/git/attributes\' . gitattributes-mode) (/info/attributes\' . gitattributes-mode) (/\.gitattributes\' . gitattributes-mode) (/git-rebase-todo\' . git-rebase-mode) (\.ya?ml . yaml-mode) (\.json . json-mode) (README\.md\' . gfm-mode) (docker-compose.yml . docker-compose-mode) (docker-compose[^/]*\.yml\' . docker-compose-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (Dockerfile$ . dockerfile-mode) (Dockerfile\(?:\..*\)?\' . dockerfile-mode) (\(?:\(?:\(?:\.\(?:b\(?:\(?:abel\|ower\)rc\)\|json\(?:ld\)?\)\|composer\.lock\)\)\'\) . json-mode) (syslog\(?:\.[0-9]+\) . logview-mode) (/authorized_keys\' . ssh-authorized-keys-mode) (/known_hosts\' . ssh-known-hosts-mode) (/sshd?_config\' . ssh-config-mode) (/\.ssh/config\' . ssh-config-mode) (\.*rc$ . config-general-mode) (\.conf$ . config-general-mode) (\.log$ . syslog-mode) (sites-\(available\|enabled\)/ . apache-mode) (access\.conf\' . apache-mode) (srm\.conf\' . apache-mode) (httpd\.conf\' . apache-mode) (\.htaccess\' . apache-mode) (/apache2/sites-\(?:available\|enabled\)/ . apache-mode) (/httpd/conf/.+\.conf\' . apache-mode) (/apache2/.+\.conf\' . apache-mode) (/\(?:access\|httpd\|srm\)\.conf\' . apache-mode) (/\.htaccess\' . apache-mode) (/nginx/.+\.conf\' . nginx-mode) (nginx\.conf\' . nginx-mode) (\.sp\' . S-mode) (/R/.*\.q\' . R-mode) (\.[qsS]\' . S-mode) (\.ssc\' . S-mode) (\.SSC\' . S-mode) (\.[rR]\' . R-mode) (\.[rR]nw\' . Rnw-mode) (\.[sS]nw\' . Snw-mode) (\.[rR]profile\' . R-mode) (NAMESPACE\' . R-mode) (CITATION\' . R-mode) (\.omg\' . omegahat-mode) (\.hat\' . omegahat-mode) (\.lsp\' . XLS-mode) (\.do\' . STA-mode) (\.ado\' . STA-mode) (\.[Ss][Aa][Ss]\' . SAS-mode) (\.[Ss]t\' . S-transcript-mode) (\.Sout . S-transcript-mode) (\.[Rr]out . R-transcript-mode) (\.Rd\' . Rd-mode) (\.[Bb][Uu][Gg]\' . ess-bugs-mode) (\.[Bb][Oo][Gg]\' . ess-bugs-mode) (\.[Bb][Mm][Dd]\' . ess-bugs-mode) (\.[Jj][Aa][Gg]\' . ess-jags-mode) (\.[Jj][Oo][Gg]\' . ess-jags-mode) (\.[Jj][Mm][Dd]\' . ess-jags-mode) (\.jl\' . ess-julia-mode) (/Makevars\(\.win\)?$ . makefile-mode) (\.R$ . R-mode) (\.jl\' . julia-mode) (\.\(scala\|sbt\)\' . scala-mode) (\.cyp\' . cypher-mode) (\.cypher\' . cypher-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\(?:build\|profile\)\.boot\' . clojure-mode) (\.cljs\' . clojurescript-mode) (\.cljc\' . clojurec-mode) (\.\(clj\|dtm\|edn\)\' . clojure-mode) (\.hva\' . latex-mode) (\.drv\' . latex-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.\(?:3fr\|a\(?:r[tw]\|vs\)\|bmp[23]?\|c\(?:als?\|myka?\|r[2w]\|u[rt]\)\|d\(?:c[mrx]\|ds\|jvu\|ng\|px\)\|exr\|f\(?:ax\|its\)\|gif\(?:87\)?\|hrz\|ic\(?:on\|[bo]\)\|j\(?:\(?:pe\|[np]\)g\)\|k\(?:25\|dc\)\|m\(?:iff\|ng\|rw\|s\(?:l\|vg\)\|tv\)\|nef\|o\(?:rf\|tb\)\|p\(?:bm\|c\(?:ds\|[dltx]\)\|db\|ef\|gm\|i\(?:ct\|x\)\|jpeg\|n\(?:g\(?:24\|32\|8\)\|[gm]\)\|pm\|sd\|tif\|wp\)\|r\(?:a[fs]\|gb[ao]?\|l[ae]\)\|s\(?:c[rt]\|fw\|gi\|r[2f]\|un\|vgz?\)\|t\(?:ga\|i\(?:ff\(?:64\)?\|le\|m\)\|tf\)\|uyvy\|v\(?:da\|i\(?:car\|d\|ff\)\|st\)\|w\(?:bmp\|pg\)\|x\(?:3f\|bm\|cf\|pm\|wd\|[cv]\)\|y\(?:cbcra?\|uv\)\)\' . image-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode) (\.log\(?:\.[0-9]+\)?\' . logview-mode) (\.markdown\' . markdown-mode) (\.md\' . markdown-mode))

*** =neo4j=

#+BEGIN_SRC emacs-lisp
(use-package cypher-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.cql\\'" . cypher-mode))
  )
#+END_SRC

#+RESULTS:
: t

*** =pdf-tools=

[[https://github.com/politza/pdf-tools][Github page]]

Para usr este paquete con  =org-mode=:

#+BEGIN_EXAMPLE
[[pdfview:~/Descargas/01688199.pdf::42][PDF Link]]
#+END_EXAMPLE

    #+BEGIN_SRC emacs-lisp
    (use-package org-pdfview
      :after org
      :ensure t
      )


    (use-package  pdf-tools
      :after org
      :ensure t
      :config
      (add-to-list 'org-file-apps
		   '("\\.pdf\\'" . (lambda (file link)
				     (org-pdfview-open link))))
      (add-to-list 'org-file-apps
		   '("\\.pdf::\\([[:digit:]]+\\)\\'" . org-pdfview-open))

      (setq ess-pdf-viewer-pref 'emacsclient)
      )

    (pdf-tools-install)


    ;; Keys
    (bind-keys :map pdf-view-mode-map
	       ("/" . hydra-pdftools/body)
	       ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
	       ("g"  . pdf-view-first-page)
	       ("G"  . pdf-view-last-page)
	       ("l"  . image-forward-hscroll)
	       ("h"  . image-backward-hscroll)
	       ("j"  . pdf-view-next-page)
	       ("k"  . pdf-view-previous-page)
	       ("e"  . pdf-view-goto-page)
	       ("u"  . pdf-view-revert-buffer)
	       ("al" . pdf-annot-list-annotations)
	       ("ad" . pdf-annot-delete)
	       ("aa" . pdf-annot-attachment-dired)
	       ("am" . pdf-annot-add-markup-annotation)
	       ("at" . pdf-annot-add-text-annotation)
	       ("y"  . pdf-view-kill-ring-save)
	       ("i"  . pdf-misc-display-metadata)
	       ("s"  . pdf-occur)
	       ("b"  . pdf-view-set-slice-from-bounding-box)
	       ("r"  . pdf-view-reset-slice))
    #+END_SRC

    #+RESULTS:
    : pdf-view-reset-slice

*** [[https://github.com/joaotavora/darkroom][Darkroom]]

#+BEGIN_SRC emacs-lisp
(use-package darkroom :ensure t)
#+END_SRC

#+RESULTS:


*** Ugly hacks

    #+BEGIN_SRC emacs-lisp
      (setq python-shell-prompt-detect-failure-warning nil)
    #+END_SRC

    #+RESULTS:

    El siguiente código parte la ventana verticalmente por /default/,
    (no me gusta que se parta horizontalmente)

    *NOTA*: No es necesario si ejecuta bien todo el proceso
    #+RESULTS:

    #+BEGIN_SRC emacs-lisp
      ;;(setq split-height-threshold nil)
      ;;(setq split-width-threshold 80)
    #+END_SRC

*** NeoTree

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t

  :config
  (setq neo-smart-open t)
  (setq neo-vc-integration nil)
  ;; Do not allow neotree to be the only open window
  (setq-default neo-dont-be-alone t)
  (setq neo-fit-to-contents nil)
  (setq neo-theme 'arrow)
  (setq neo-window-fixed-size nil)
  )

#+END_SRC

#+RESULTS:
: t

+RESULTS:

Modificando un poquito =dired=

#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-lh --group-directories-first")
#+END_SRC

#+RESULTS:
: -lh --group-directories-first


*** Escribiendo propiamente: [[https://github.com/bnbeckwith/writegood-mode][=writegood-mode=]]

Resalta las malas elecciones de palabras entre otras cosas

#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
    :ensure t
    :bind ("C-c g" . writegood-mode)
    :config
    (add-to-list 'writegood-weasel-words "actionable"))
#+END_SRC

#+RESULTS:
: writegood-mode

*** Stack overflow
#+BEGIN_SRC emacs-lisp
 (use-package sx
    :ensure t
    :config
    (bind-keys :prefix "C-c s"
               :prefix-map my-sx-map
               :prefix-docstring "Global keymap for SX."
               ("q" . sx-tab-all-questions)
               ("i" . sx-inbox)
               ("o" . sx-open-link)
               ("u" . sx-tab-unanswered-my-tags)
               ("a" . sx-ask)
               ("s" . sx-search)))
#+END_SRC

#+RESULTS:
: t

*** Slack

#+BEGIN_SRC emacs-lisp
(use-package slack
  :commands (slack-start)
  :ensure t
  :init
  (setq slack-buffer-emojify t) ;; Para emoticones

  :config
  (setq slack-completing-read-function
        #'ido-completing-read)
  (setq slack-buffer-function #'switch-to-buffer)
  (setq slack-prefer-current-team t)
  (setq slack-display-team-name nil)

  ;; Go to any channel "C-x j"
  (define-key ctl-x-map "j" #'slack-select-rooms)
  ;; Open the most recent link in the current chat room
  (define-key slack-mode-map (kbd "M-o")
    (kbd "<backtab> RET M->"))

  ;;; I thumbs-up a lot. Don't judge me.
  (define-key slack-mode-map (kbd "C-;") ":+1:")
  ;;; Bring up the mentions menu with `@', and insert a
  ;;; space afterwards.
  (define-key slack-mode-map "@"
    (defun nanounanue/slack-message-embed-mention ()
      (interactive)
      (call-interactively #'slack-message-embed-mention)
      (insert " ")))

  ;;; Pretty straightforward.
  (define-key slack-mode-map (kbd "C-c C-d")
    #'slack-message-delete)
  (define-key slack-mode-map (kbd "C-c C-e")
    #'slack-message-edit)
  (define-key slack-mode-map (kbd "C-c C-k")
    #'slack-channel-leave)


  (slack-register-team
   :name "dsapp"
   :default t
   :client-id "3594170968.367531139024"
   :client-secret "4a64a4df2b4eb4f5fe28bb3ffbce0290"
   :token "xoxp-3594170968-191530116597-369279335287-6c3e744df251ea69d69216c89a26595f"
   ;; :subscribed-channels '(test-rename rrrrr)
   :full-and-display-names t
   )

  (slack-register-team
   :name "datank"
   :client-id "92321140659.367517823568"
   :client-secret "5d75d3ff885aa2ec33d62cc1d5ce42ad"
   :token "xoxp-92321140659-112995935796-368132839699-93112efeffc80c36ceff89155a148280"
   ;;#:subscribed-channels '(hoge fuga)
   )
  )

(use-package alert
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))


#+END_SRC

#+RESULTS:
: notifier

=emacs-slack= usa =tracking= para llevar
control de los mensajes. Asignamos
un /shortcut/ para invocarlo.

T

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'tracking
  (define-key tracking-mode-map [f5]
    #'tracking-next-buffer))

;; Ensure the buffer exists when a message arrives on a
;; channel that wasn't open.
(setq slack-buffer-create-on-notify t)
#+END_SRC

#+RESULTS:
: t

*** Google

#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :ensure t)
#+END_SRC

#+RESULTS:

* Documentation

#+BEGIN_SRC emacs-lisp
(use-package helpful :ensure t)

(use-package info-buffer :ensure t)

(use-package which-key
  :ensure t
  :defer 10
  :diminish which-key-mode
  :config
  ;; Replacements for how KEY is replaced when which-key displays
  ;;   KEY → FUNCTION
  ;; Eg: After "C-c", display "right → winner-redo" as "▶ → winner-redo"
  (setq which-key-key-replacement-alist
        '(("<\\([[:alnum:]-]+\\)>" . "\\1")
          ("left"                  . "◀")
          ("right"                 . "▶")
          ("up"                    . "▲")
          ("down"                  . "▼")
          ("delete"                . "DEL") ; delete key
          ("\\`DEL\\'"             . "BS") ; backspace key
          ("next"                  . "PgDn")
          ("prior"                 . "PgUp"))

        ;; List of "special" keys for which a KEY is displayed as just
        ;; K but with "inverted video" face... not sure I like this.
        which-key-special-keys '("RET" "DEL" ; delete key
                                 "ESC" "BS" ; backspace key
                                 "SPC" "TAB")

        ;; Replacements for how part or whole of FUNCTION is replaced:
        which-key-description-replacement-alist
        '(("Prefix Command" . "prefix")
          ("\\`calc-"       . "") ; Hide "calc-" prefixes when listing M-x calc keys
          ("\\`projectile-" . "𝓟/")
          ("\\`org-babel-"  . "ob/"))

        ;; Underlines commands to emphasize some functions:
        which-key-highlighted-command-list
        '("\\(rectangle-\\)\\|\\(-rectangle\\)"
          "\\`org-"))

  ;; Change what string to display for a given *complete* key binding
  ;; Eg: After "C-x", display "8 → +unicode" instead of "8 → +prefix"
  (which-key-add-key-based-replacements
    "C-x 8"   "unicode"
    "C-c T"   "toggles-"
    "C-c p s" "projectile-search"
    "C-c p 4" "projectile-other-buffer-"
    "C-x a"   "abbrev/expand"
    "C-x r"   "rect/reg"
    "C-c /"   "engine-mode-map"
    "C-c C-v" "org-babel")

  (which-key-mode 1))

  (use-package man
    :ensure t
    :config
    (setq Man-notify-method 'pushy)
    (setq woman-manpath
          `(
            "/usr/share/man/" "/usr/local/man/" ;; System
            (format "%s/local/man" config-basedir) ;; Private environment
            )))
#+END_SRC

#+RESULTS:
: t

* Keys / shortcuts

** Global Keybindings

#+BEGIN_SRC emacs-lisp
;; Swiper / ivy / counsel
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "C-r") 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key [f6] 'ivy-resume)
(global-set-key (kbd "C-c hm") 'woman)
(global-set-key (kbd "C-x b") 'ivy-switch-buffer)
(global-set-key (kbd "C-x B") 'ivy-switch-buffer-other-window)
(global-set-key (kbd "C-c u") 'swiper-all)
(global-set-key (kbd "<F1> f") 'counsel-describe-function)
(global-set-key (kbd "<F1> v") 'counsel-describe-variable)
(global-set-key (kbd "<F1> l") 'counsel-find-library)
(global-set-key (kbd "<F2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<F2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)

;; Start eshell or switch to it if it's active.
(global-set-key (kbd "C-x m") 'eshell)

(global-set-key (kbd "M-<") 'beginning-of-buffer)
(global-set-key (kbd "M->") 'end-of-buffer)

;; Start a new eshell even if one is active.
(global-set-key (kbd "C-x M") (lambda () (interactive) (eshell t)))


(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)

(global-set-key [f8] 'neotree-toggle)

(global-set-key (kbd "<F9> b") 'bbdb)
(global-set-key (kbd "<F9> c") 'calendar)
(global-set-key (kbd "<F9> f") 'boxquote-insert-file)

(global-set-key [f7] 'darkroom-tentative-mode)

(global-set-key [f12] 'org-agenda)
#+END_SRC

#+RESULTS:
: org-agenda


** Compilation

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-c") 'compile)
#+END_SRC

#+RESULTS:
: compile

** Tamaño de Texto

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-0") 'text-scale-adjust)
#+END_SRC

#+RESULTS:
: text-scale-adjust

** Comentarios

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-;") 'comment-region)
(global-set-key (kbd "C-c C-:") 'uncomment-region)
#+END_SRC

#+RESULTS:
: uncomment-region

** Archivos

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-r") 'counsel-recentf)
(global-set-key (kbd "C-x C-d") 'dired)

(global-set-key [(control c) ?1] 'find-name-dired)
(global-set-key [(control c) ?2] 'find-grep-dired)
(global-set-key [(control c) ?3] 'grep-find)
#+END_SRC

#+RESULTS:
: grep-find



* Visuales

** Dashboard


#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :disabled
  :demand
  :after projectile
  :config
  (progn
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title ""
          dashboard-startup-banner 'official
          dashboard-items '((agenda . t)
                            (recents  . 5)
                            (projects . 5)
			                )))
  )
#+END_SRC

#+RESULTS:



** Telephone line

#+BEGIN_SRC emacs-lisp
(use-package telephone-line
  :config (progn
            (require 'telephone-line-config)
            (telephone-line-mode 1)
            (setq telephone-line-height 24)))
#+END_SRC

#+RESULTS:
: t

** [[https://github.com/kyanagi/scratch-ext-el][scratch-ext]]

#+BEGIN_SRC emacs-lisp
(use-package scratch-ext
  :ensure t
  :config
  (add-hook 'after-init-hook 'scratch-ext-restore-last-scratch)

  ;; Org-mode + start folded buffer
  (setq initial-major-mode 'org-mode)
  (set-buffer (get-buffer-create "*scratch*"))
  (set (make-local-variable 'org-startup-folded) t))
#+END_SRC

#+RESULTS:
: t

** uniquify

#+begin_src emacs-lisp
(use-package uniquify
  :ensure nil
  :config
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
  (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
)
#+end_src

#+RESULTS:
: t

** savehist

#+begin_src emacs-lisp
(use-package savehist
  :ensure t
  :init
  (savehist-mode +1)
  :config
  ;; savehist keeps track of some history
  (setq savehist-additional-variables
        ;; search entries
        '(search-ring regexp-search-ring)
        ;; save every minute
        savehist-autosave-interval 60
        ;; keep the home clean
        ;;savehist-file (expand-file-name "savehist" prelude-savefile-dir)
)

  )
#+end_src

#+RESULTS:
: t

** windmove

#+begin_src emacs-lisp
(use-package windmove
  :ensure t
  :config
  ;; use shift + arrow keys to switch between visible buffers
  (windmove-default-keybindings)
  )
#+end_src

#+RESULTS:
: t

** Dired

#+begin_src emacs-lisp
;; dired - reuse current buffer by pressing 'a'
(put 'dired-find-alternate-file 'disabled nil)

;; always delete and copy recursively
(setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)

;; if there is a dired buffer displayed in the next window, use its
;; current subdir, instead of the current subdir of this dired buffer
(setq dired-dwim-target t)

;; enable some really cool extensions like C-x C-j(dired-jump)
(require 'dired-x)

;; ediff - don't start another frame
(require 'ediff)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; clean up obsolete buffers automatically
(require 'midnight)
#+end_src

#+RESULTS:
: midnight


* Edición en general

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
(setq-default tab-width 4)            ;; but maintain correct appearance

(setq-default tab-always-indent t) ;; always indent line

;; Newline at end of file
(setq require-final-newline t)

;; delete the selection with a keypress
(delete-selection-mode t)

;; revert buffers automatically when underlying files are changed externally
(global-auto-revert-mode t)

;; disable annoying blink-matching-paren
(setq blink-matching-paren nil)

;; highlight the current line
(global-hl-line-mode +1)

;; saner regex syntax
(require 're-builder)
(setq reb-re-syntax 'string)

#+end_src

#+RESULTS:
: string

Regularmente quiero matar /este/ buffer

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
(global-set-key (kbd "C-x K") 'kill-buffer)
#+END_SRC

#+RESULTS:
: kill-buffer


* Avanzado

** Alert

#+BEGIN_SRC emacs-lisp
(use-package alert
  :custom (alert-default-style 'libnotify))
#+END_SRC

#+RESULTS:

** =engine-mode=

Me gusta hacer las búsquedas sin salir de Emacs

#+BEGIN_SRC emacs-lisp
(use-package engine-mode
  :defer 3
  :config
  (defengine amazon
    "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s"
    :keybinding "a")

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine google-images
    "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
    :keybinding "i")

  (defengine google-maps
    "http://maps.google.com/maps?q=%s"
    :keybinding "m"
    :docstring "Mappin' it up.")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine youtube
    "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
    :keybinding "y")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w"
    :docstring "Searchin' the wikis.")
  (engine-mode t))
#+END_SRC

#+RESULTS:

** =which-key=

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish
  :config (which-key-mode))
#+END_SRC

#+RESULTS:
: t

* Environment

Por /default/ GNU/Emacs no lee las variables de ambiente de la misma
manera que tu terminal, este paquete ayuda a solucionar esto

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :disabled
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

#+RESULTS:
