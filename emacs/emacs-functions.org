#+TITLE: Funciones
#+AUTHOR: Adolfo De Unánue
#+EMAIL: nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/elisp/setup-functions.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

* Variables

#+begin_src emacs-lisp
(setq nanounanue/projects-directory (concat (getenv "HOME") "/projects/"))
#+end_src


* Funciones

** /Bootstrap/

 #+begin_src emacs-lisp
 (defun nanounanue/config-open ()
   (interactive)
   (find-file "~/dotfiles/emacs/init.org"))
 (bind-key "C-c E" 'nanounanue/config-open)

 (defun nanounanue/config-tangle ()
   (interactive)
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-i3wm.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-client.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-clojure.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-elisp.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-eshell.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-ivy.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-org-mode.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-python.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-scala.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-server.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-tex.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-system.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-programming.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-email.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-hydra.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-main.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-remote.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-pdftools.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-package-manager.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-functions.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-elfeed.org"))
   (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/emacs-global-keys.org"))
   ;;(org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/early-init.org"))
  (org-babel-tangle-file (expand-file-name "~/dotfiles/emacs/init.org")))
 (bind-key "C-c T" 'nanounanue/config-tangle)


 (defun nanounanue/config-reload ()
   "Reloads ~/dotfiles/emacs/nano-emacs.org"
   (interactive)
   (org-babel-load-file (expand-file-name "~/dotfiles/emacs/init.org")))
 (bind-key "C-c R" 'nanounanue/config-reload)
 #+end_src


** Regularmente quiero matar /este/ /buffer/

=kill-this-buffer= ya no existe (era inestable)

[[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/][Aquí]] sugieren lo siguiente:

#+begin_src emacs-lisp
(defun nanounanue/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
#+end_src


#+begin_src emacs-lisp
(bind-key "C-x k" 'nanounanue/kill-this-buffer)
(bind-key "C-x K" 'kill-buffer)
#+end_src

** Guardemos todos los archivos si Emacs pierde el foco (tomado de [[http://timothypratley.blogspot.com/2015/07/seven-specialty-emacs-settings-with-big.html][aquí]])

#+BEGIN_SRC emacs-lisp
  (defun nanounanue/save-all ()
    "Save all dirty buffers without asking for confirmation."
    (interactive)
    (save-some-buffers t))

  (add-hook 'focus-out-hook 'nanounanue/save-all)
#+END_SRC

** Org-mode

#+BEGIN_SRC emacs-lisp
  (defun nanounanue/org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))
#+END_SRC

Las siguientes funciones fueron tomadas de [[https://emacs.stackexchange.com/a/29472/10848][aquí]]

#+BEGIN_SRC emacs-lisp
(defun nanounanue/export-tangle ()
  "Shortcut for exporting and tangling the current org-mode buffer."
  (interactive)
  (org-html-export-to-html)
  (org-babel-tangle))


(defun nanounanue/export-tangle-file (filepath)
  "Shortcut for exporting and tangling the org-mode file at `filepath'."
  (find-file (expand-file-name filepath))
  (org-html-export-to-html)
  (org-babel-tangle)
  (kill-buffer))
#+END_SRC


Integrando =org-journal= con =org-capture=

#+begin_src emacs-lisp
(defun nanounanue/org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))
#+end_src


*** Refile

Tomado de [[https://yiming.dev/blog/2018/03/02/my-org-refile-workflow/][aquí]]

#+begin_src emacs-lisp
(defun nanounanue/org-opened-buffer-files ()
  "Return the list of files currently opened in emacs"
  (delq nil
        (mapcar (lambda (x)
                  (if (and (buffer-file-name x)
                           (string-match "\\.org$"
                                         (buffer-file-name x)))
                      (buffer-file-name x)))
                (buffer-list))))

#+end_src


*** Templates

*NOTA* También es posible definir el /template/ en un archivo:
       - [[https://joshrollinswrites.com/help-desk-head-desk/org-capture-in-files/][Org-capture in Files]]
       - [[https://emacsnyc.org/assets/documents/how-i-use-org-capture-and-stuff.pdf][How I use org-capture and stuff, Jonathan E. Magen]]

**** Contactos

Tomado de [[https://www.reddit.com/r/emacs/comments/8toivy/tip_how_to_manage_your_contacts_with_orgcontacts/][aquí]]

#+begin_src emacs-lisp :tangle no
(defvar nanounanue/org-contacts-template "* %^{Name Last Name}
:PROPERTIES:
:ADDRESS: %^{289 Cleveland St. Brooklyn, 11206 NY, USA}
:BIRTHDAY: %^{yyyy-mm-dd}
:EMAIL: %^{email@host.com}
:NOTE: %^{NOTE}
:END:" "Template for org-contacts.")
#+end_src




*** /Pasting/

Si =pandoc= está instalado, podemos copiar código HTML, ponerlo en el
/clipboard/ y convertirlo a =org-mode= antes de /yanking it/ al /buffer/


  #+BEGIN_SRC emacs-lisp
    (defun nanounanue/paste-html-to-org ()
      "Assumes the contents of the system clip/paste-board to be
    HTML, this calls out to `pandoc' to convert it for the org-mode
    format."
      (interactive)
      (let* ((clip (if (eq system-type 'darwin)
                       "pbpaste -Prefer rts"
                     "xclip -out -selection 'clipboard' -t text/html"))
             (format (if (eq mode-name "Org") "org" "markdown"))
             (pandoc (concat "pandoc -f rts -t " format))
             (cmd    (concat clip " | " pandoc))
             (text   (shell-command-to-string cmd)))
        (kill-new text)
        (yank)))
  #+END_SRC

** Fuentes

#+begin_src emacs-lisp
(defun nanounanue/setup-main-fonts (default-height variable-pitch-height modeline-height)
  "Set up default fonts.
Use DEFAULT-HEIGHT for default face, VARIABLE-PITCH-HEIGHT for
variable-pitch face, and MODELINE-HEIGHT for mode-line face."
  (set-face-attribute 'default nil
                      :family nanounanue-font-default
                      :height default-height)
  (set-face-attribute 'variable-pitch nil
                      :family nanounanue-font-variable
                      :height variable-pitch-height
                      :weight 'regular)
  (set-face-attribute 'mode-line nil
                      :family nanounanue-font-modeline
                      :height modeline-height
                      :weight 'regular))
#+end_src

** Spelling

#+begin_src emacs-lisp
       (defun nanounanue/change-dictionary-spanish ()
         (interactive)
         (ispell-change-dictionary "espanol"))

       (defun nanounanue/change-dictionary-english ()
         (interactive)
         (ispell-change-dictionary "english"))
#+end_src

** pyenv

#+begin_src emacs-lisp :tangle no
(defun nanounanue/pyenv-init()
  "Setup pyenv in Emacs."
  (setq global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global")))
  (message (concat "Setting pyenv version to " global-pyenv))
  (pyenv-mode-set global-pyenv)
  (defvar pyenv-current-version nil global-pyenv))

(defun nanounanue/pyenv-activate-current-project ()
  "Automatically activates pyenv version if .python-version file exists."
  (interactive)
  (f-traverse-upwards
   (lambda (path)
     (message path)
     (let ((pyenv-version-path (f-expand ".python-version" path)))
       (if (f-exists? pyenv-version-path)
          (progn
            (setq pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8)))
            (pyenv-mode-set pyenv-current-version)
            (pyvenv-workon pyenv-current-version)
            (message (concat "Setting virtualenv to " pyenv-current-version))))))))


(add-hook 'after-init-hook 'nanounanue/pyenv-init)
#+end_src

** JSON

#+begin_src emacs-lisp
(defun nanounanue/json-mode-before-save-hook ()
    (when (eq major-mode 'json-mode)
      (json-pretty-print-buffer-ordered)))
#+end_src

** PDFTools

Tomadas de [[https://github.com/munen/emacs.d#convenience-functions-when-working-with-pdf-exports][aquí]] y del video https://youtu.be/gfZDwYeBlO4

#+begin_src emacs-lisp
(defun nanounanue/update-other-buffer ()
  (interactive)
  (other-window 1)
  (revert-buffer nil t)
  (other-window -1))

(defun nanounanue/md-compile-and-update-other-buffer ()
  "Has as a premise that it's run from a markdown-mode buffer and the
   other buffer already has the PDF open"
  (interactive)
  (nanounanue/md-compile)
  (nanounanue/update-other-buffer))

(defun nanounanue/latex-compile-and-update-other-buffer ()
  "Has as a premise that it's run from a latex-mode buffer and the
   other buffer already has the PDF open"
  (interactive)
  (save-buffer)
  (shell-command (concat "pdflatex " (buffer-file-name)))
  (switch-to-buffer (other-buffer))
  (kill-buffer)
  (nanounanue/update-other-buffer))

(defun nanounanue/org-compile-beamer-and-update-other-buffer ()
  "Has as a premise that it's run from an org-mode buffer and the
   other buffer already has the PDF open"
  (interactive)
  (org-beamer-export-to-pdf)
  (nanounanue/update-other-buffer))

(defun nanounanue/org-compile-latex-and-update-other-buffer ()
  "Has as a premise that it's run from an org-mode buffer and the
   other buffer already has the PDF open"
  (interactive)
  (org-latex-export-to-pdf)
  (nanounanue/update-other-buffer))

#+end_src



** mu4e

* Fin

#+begin_src emacs-lisp
(provide 'setup-functions)
#+end_src
