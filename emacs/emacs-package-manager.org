#+TITLE: Administración de paquetes
#+AUTHOR: Adolfo De Unánue
#+EMAIL: nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/elisp/setup-package-manager.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js


* Admnistrador de paquetes

#+begin_src emacs-lisp :tangle no
(package-initialize)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/")
             '("elpy" . "http://jorgenschaefer.github.io/packages/"))

(when (not package-archive-contents)
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)

(defconst private-dir  (expand-file-name "private" user-emacs-directory))
(defconst temp-dir (format "%s/cache" private-dir)
  "Hostname-based elisp temp directories")
#+end_src



* Gestión de paquetes: =straight.el=

=straight.el= es un administrador de paquetes para GNU/Emacs

#+begin_src emacs-lisp
(setq straight-repository-branch "develop")

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

* Hack para org-mode

#+begin_src emacs-lisp
(straight-use-package 'org)
;(straight-use-package 'org-plus-contrib)
#+end_src

* =use-package=

=use-package= permite configurar paquetes de manera declarativa

** /Bootstrap/ =use-package=
#+begin_src emacs-lisp
;; Package `use-package' provides a handy macro by the same name which
;; is essentially a wrapper around `with-eval-after-load' with a lot
;; of handy syntactic sugar and useful features.
(straight-use-package 'use-package)

;; When configuring a feature with `use-package', also tell
;; straight.el to install a package of the same name, unless otherwise
;; specified using the `:straight' keyword.
(setq straight-use-package-by-default t)
#+end_src

** Configuración

No cargar los paquetes por default cuando Emacs está iniciando, sólo
cuando son requeridos. Si no funciona bien, agregar al bloque de
=use-package :defer nil=

#+begin_src emacs-lisp
;; Tell `use-package' to always load features lazily unless told
;; otherwise. It's nicer to have this kind of thing be deterministic:
;; if `:demand' is present, the loading is eager; otherwise, the
;; loading is lazy. See
;; https://github.com/jwiegley/use-package#notes-about-lazy-loading.
(setq-default use-package-always-defer t)
#+end_src

Ser /verbose/ es bueno para el /debugging/

#+begin_src emacs-lisp
(setq-default use-package-verbose t)
#+end_src

** Integración con =imenu=

#+begin_src emacs-lisp
(setq-default use-package-enable-imenu-support t
              use-package-form-regexp-eval
              `(concat ,(eval-when-compile
                          (concat "^\\s-*("
                                  (regexp-opt '("use-package" "use-feature" "require") t)
                                  "\\s-+\\("))
                       (or (bound-and-true-p lisp-mode-symbol-regexp)
                           "\\(?:\\sw\\|\\s_\\|\\\\.\\)+") "\\)"))
#+end_src

** =use-feature=

#+begin_src emacs-lisp
(defmacro use-feature (name &rest args)
  "Like `use-package', but with `straight-use-package-by-default' disabled."
  (declare (indent defun))
  `(use-package ,name
     :straight nil
     ,@args))
#+end_src

** Blackout

#+begin_src emacs-lisp
;; Package `blackout' provides a convenient function for customizing
;; mode lighters. It supports both major and minor modes with the same
;; interface, and includes `use-package' integration. The features are
;; a strict superset of those provided by similar packages `diminish',
;; `delight', and `dim'.
(use-package blackout
  :straight (:host github :repo "raxod502/blackout")
  :demand t)
#+end_src



* Finalizar

#+begin_src emacs-lisp
(provide 'setup-package-manager)
#+end_src
