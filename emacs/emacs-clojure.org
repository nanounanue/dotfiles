#+TITLE:  Clojure
#+AUTHOR: Adolfo De UnÃ¡nue
#+EMAIL:  nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY:    header-args:emacs-lisp  :tangle ~/.config/emacs/elisp/setup-clojure.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+TAGS:   emacs clojure


* Clojure

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :demand t)
#+END_SRC

* Snippets

#+BEGIN_SRC emacs-lisp
  (use-package clojure-snippets)
#+END_SRC



* Paredit

#+BEGIN_SRC emacs-lisp
    (use-package paredit
      :init
      (add-hook 'clojure-mode-hook 'paredit-mode))
#+END_SRC

  Useful key sequences for positioning cursor on particular s-expressions:

  - C-M- a d :: Move to beginning of function and inside the
       declaration. Good start to just about any other positioning.
  - C-M- d f d :: At beginning of function, moves to first s-expression.


* REPL

  When demonstrating Clojure, I find it is a better approach is to send
  the S-Expression to the REPL and evaluate it there instead of
  showing the result in the mini-buffer:

  #+BEGIN_SRC emacs-lisp
    (defun cider-send-and-evaluate-sexp ()
      "Sends the s-expression located before the point or the active
      region to the REPL and evaluates it. Then the Clojure buffer is
      activated as if nothing happened."
      (interactive)
      (if (not (region-active-p))
          (cider-insert-last-sexp-in-repl)
        (cider-insert-in-repl
         (buffer-substring (region-beginning) (region-end)) nil))
      (cider-switch-to-repl-buffer)
      (cider-repl-closing-return)
      (cider-switch-to-last-clojure-buffer)
      (message ""))
  #+END_SRC


* Cider

  The [[https://github.com/clojure-emacs/cider][Cider project]] is da bomb. Usage:

  - =cider-jack-in= - For starting an nREPL server and setting
    everything up. Keyboard: =C-c M-j=
  - =cider= to connect to an existing nREPL server.

 #+BEGIN_SRC emacs-lisp
(use-package cider
  :commands (cider cider-connect cider-jack-in)

  :init
  (setq cider-auto-select-error-buffer t
        cider-repl-pop-to-buffer-on-connect nil
        cider-repl-use-clojure-font-lock t
        cider-repl-wrap-history t
        cider-repl-history-size 1000
        cider-show-error-buffer t
        nrepl-hide-special-buffers t
        ;; Stop error buffer from popping up while working in buffers other than the REPL:
        nrepl-popup-stacktraces nil)

  ;; (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
  (add-hook 'cider-mode-hook 'company-mode)

  (add-hook 'cider-repl-mode-hook 'paredit-mode)
  (add-hook 'cider-repl-mode-hook 'superword-mode)
  (add-hook 'cider-repl-mode-hook 'company-mode)
  (add-hook 'cider-test-report-mode 'jcf-soft-wrap)

  :bind (:map cider-mode-map
              ("C-c C-v C-c" . cider-send-and-evaluate-sexp)
              ("C-c C-p"     . cider-eval-print-last-sexp))

  :config
  (use-package slamhound)
  ;; REPL history file
  (setq cider-repl-history-file "~/.config/emacs/cider-history")

  ;; nice pretty printing
  (setq cider-repl-use-pretty-printing t)

  ;; nicer font lock in REPL
  (setq cider-repl-use-clojure-font-lock t)

  ;; result prefix for the REPL
  (setq cider-repl-result-prefix ";; => ")

  ;; never ending REPL history
  (setq cider-repl-wrap-history t)

  ;; looong history
  (setq cider-repl-history-size 3000)

  ;; eldoc for clojure
  (add-hook 'cider-mode-hook #'eldoc-mode)


  ;; error buffer not popping up
  (setq cider-show-error-buffer nil))
  #+END_SRC

  What about doing the evaluation but re-inserting the results as a
  comment at the end of the expression? Let's create a function that
  will insert a comment character if we aren't already in a comment,
  and we will then advice the Cider function that prints the results:

  #+BEGIN_SRC emacs-lisp
    (defun nanounanue/cider-append-comment ()
      (when (null (nth 8 (syntax-ppss)))
        (insert " ; ")))

    (advice-add 'cider-eval-print-last-sexp :before #'nanounanue/cider-append-comment)
  #+END_SRC

  While I typically use [[https://github.com/clojure-emacs/clj-refactor.el][clj-refactor]]'s [[https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-add-missing-libspec][add-missing-libspec]] function,
  I am thinking of looking into [[https://github.com/technomancy/slamhound][Slamhound]] for reconstructing the =ns= namespace.

  This also specifies using [[http://emacswiki.org/emacs/ElDoc][ElDoc]] working with Clojure.

  To get Clojure's Cider working with org-mode, do:

  #+BEGIN_SRC emacs-lisp
(use-feature ob-clojure
  :demand t
  :init
  (setq org-babel-clojure-backend 'cider))
  #+END_SRC


* Linting

  Using [[https://github.com/jonase/eastwood#emacs--cider][Eastwood]] with the [[https://github.com/clojure-emacs/squiggly-clojure][Squiggly Clojure]] project to add lint
  warnings to [[file:emacs.org::*Flycheck][Flycheck]]:

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck-clojure
      :init
      (add-hook 'after-init-hook 'global-flycheck-mode)
      :config
      (use-package flycheck
        :config
        (flycheck-clojure-setup)))
  #+END_SRC

  Seems we should also install [[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]] as well.

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck-pos-tip
      :config
      (use-package flycheck
        :config
        (setq flycheck-display-errors-function 'flycheck-pos-tip-error-messages)))
  #+END_SRC


* 4Clojure

  Finally, if you are just learning Clojure, check out [[http://www.4clojure.com/][4Clojure]] and then
  install [[https://github.com/joshuarh/4clojure.el][4clojure-mode]].

  #+BEGIN_SRC emacs-lisp
    (use-package 4clojure
      :init
      (bind-key "<f9> a" '4clojure-check-answers clojure-mode-map)
      (bind-key "<f9> n" '4clojure-next-question clojure-mode-map)
      (bind-key "<f9> p" '4clojure-previous-question clojure-mode-map)

      :config
      (defadvice 4clojure-open-question (around 4clojure-open-question-around)
         "Start a cider/nREPL connection if one hasn't already been started when
         opening 4clojure questions."
         ad-do-it
         (unless cider-current-clojure-buffer
           (cider-jack-in))))
  #+END_SRC


*  Finalmente


#+BEGIN_SRC emacs-lisp
(provide 'setup-clojure)
#+END_SRC
