#+TITLE: Configuración de GNU EMACS
#+AUTHOR: Adolfo De Unánue
#+EMAIL: nanounanue@gmail.com
#+STARTUP: showeverything
#+STARTUP: nohideblocks
#+STARTUP: indent
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/elisp/setup-main.el
#+PROPERTY:    header-args:shell  :tangle no
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+TAGS: emacs


* Configuración general

** UTF-8

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  (prefer-coding-system 'utf-8)
  (set-language-environment    'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
  (set-selection-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
  (set-input-method nil)
#+END_SRC


** Acentos

#+BEGIN_SRC emacs-lisp
(load-library "iso-transl")
#+END_SRC

** Nunca abandonamos Emacs...


#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC


** Tabs

Nunca tabs

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq tab-width 4)
#+END_SRC

Siempre indentar

#+BEGIN_SRC emacs-lisp
(setq-default tab-always-indent t)
#+END_SRC

** Misceláneos

No quiero teclear =yes= o =no= ...

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

/Smooth scrolling/, el principal beneficio es cuando avanzas (con =C-n=)
al final de la página, avanza una linea, en lugar de hacer un =page down=

#+BEGIN_SRC emacs-lisp
;; scroll one line at a time (less "jumpy" than defaults)

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time

(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling

(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

(setq scroll-step 1) ;; keyboard scroll one line at a time
#+END_SRC

Y queremos hacer /scrooling/ suave (línea por línea)

#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :disabled t
  :config
  (smooth-scrolling-mode 1))
#+END_SRC

Línea al final del archivo

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

Borrar selección con un /keypress/

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

Resaltar la línea actual

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC

Deshabilitar que parpadeé el paréntesis que hace /match/

#+BEGIN_SRC emacs-lisp
(setq blink-matching-paren nil)
#+END_SRC

Deshabilitar /warning/ cuando matamos un /buffer/ con algún proceso

#+BEGIN_SRC emacs-lisp
(setq kill-buffer-query-functions
  (remq 'process-kill-buffer-query-function
         kill-buffer-query-functions))
#+END_SRC

* Mejor manejo de directorios

  Tomado de [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][aquí]]

  Especificación [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG]]

  *CUIDADO*: Emacs no crea los directorios necesarios por /default/

  #+begin_src shell
  mkdir ~/.cache/emacs ~/.local/share/emacs/
  #+end_src


  #+begin_src emacs-lisp
  (defvar xdg-bin (or (getenv "XDG_BIN_HOME") "~/.local/bin")
    "The XDG bin base directory.")

  (defvar xdg-cache (or (getenv "XDG_CACHE_HOME") "~/.cache")
    "The XDG cache base directory.")

  (defvar xdg-config (or (getenv "XDG_CONFIG_HOME") "~/.config")
    "The XDG config base directory.")

  (defvar xdg-data (or (getenv "XDG_DATA_HOME") "~/.local/share")
    "The XDG data base directory.")

  (defvar xdg-lib (or (getenv "XDG_LIB_HOME") "~/.local/lib")
    "The XDG lib base directory.")
  #+end_src


* Mejoras a =GNU Emacs=

Package `no-littering' changes the default paths for lots of
different packages, with the net result that the ~/.emacs.d folder
is much more clean and organized.

#+begin_src emacs-lisp
(use-package no-littering
:demand t)
#+end_src

Al salir de Emacs, no preguntar si quiero mantener mis procesos corriendo

Tomado de [[http://timothypratley.blogspot.com/2015/07/seven-specialty-emacs-settings-with-big.html][aquí]]

#+begin_src emacs-lisp
(defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
           (cl-flet ((process-list ())) ad-do-it))
#+end_src

* Mejoras de Emacs lisp, básicamente

#+begin_src emacs-lisp
(use-package dash
:config (eval-after-load "dash" '(dash-enable-font-lock)))

(use-package s)

(use-package f)
#+end_src

* Peculiaridades de los SO

#+BEGIN_SRC emacs-lisp
(require 'setup-system)
#+END_SRC


* Cifrado

#+BEGIN_SRC shell :dir /sudo::
apt install -y gpg gpg2
#+END_SRC

Cualquier archivo que tenga una extensión =gpg= pedirá a contraseña /antes/ de ser mostrado.
El único que debería de leerlos soy yo, así que no necesitamos el /key-ring prompt/.

#+BEGIN_SRC emacs-lisp
(setq epa-file-select-keys 2)
#+END_SRC

Quiero que emacs guarde en /cache/ mi contraseña

#+BEGIN_SRC emacs-lisp
(setq epa-file-cache-passphrase-for-symmetric-encryption t)
#+END_SRC


** ¿Cómo generar la llave?

#+begin_src shell
gpg2 --full-generate-key
#+end_src

** ¿Cómo copiar la llave entre equipos?

Si estoy en la máquina que *tiene* la llave

#+begin_src shell
gpg2 --export-secret-key <KEYID> | ssh  othermachine gpg2 --import
#+end_src

Si estoy en la máquina que *necesita* la llave

#+begin_src shell
ssh othermachine gpg2 --export-secret-key <KEYID>  | gpg --import
#+end_src

** ¿Qué llaves hay en mi equipo?

#+begin_src shell
gpg2 --list-keys Adolfo
#+end_src

* Personal

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Adolfo De Unánue")
(setq user-mail-address "nanounanue@gmail.com")
(setq  calendar-latitude 41.8756
      calendar-longitude -87.6244
      calendar-location-name "Chicago, IL")
#+END_SRC

* Administración de contraseñas

#+BEGIN_SRC emacs-lisp
(require 'auth-source)
(require 'auth-source-pass)
(auth-source-pass-enable)
(setq auth-sources '("~/.gnupg/shared/.authinfo.gpg"
                     "~/.authinfo.gpg"
                     "~/Sync/.authinfo.gpg"
                     "~/.authinfo"
                     "~/.netrc"))

#+END_SRC

* /Display/

** /Defaults/

#+BEGIN_SRC emacs-lisp
  (setq
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   cursor-in-non-selected-windows t                 ; No quiero un cursor en las ventanas inactivas
   help-window-select t                             ; Enfocar las ventanas de ayuda cuando son abiertas
   inhibit-startup-screen t                         ; No pantalla de inicio
   inhibit-startup-message t
   load-prefer-newer t                              ; Preferir la nueva versión de un archivo
   scroll-conservatively most-positive-fixnum       ; Siempre realizar el scroll línea a línea
   select-enable-clipboard t                        ; Emacs y el SO comparten el clipboard
   ring-bell-function 'ignore
   show-trailing-whiespace t                        ; Muestra en rojo los espacios en blanco al final de un párrafo
   kill-whole-line t                                ; Remueve la línea completa, en lugar de sólo limpiarla
   save-abbrevs 'silent                             ; No preguntar sobre guardar abbrevs
   frame-resize-pixelwise t                         ; Permite cambiar el tamaño de los frames como quieras (por default los cambios deben de hacerse en unidades de columnas)
   vc-follow-symlinks t)                            ; Siempre seguir los symlinks
#+END_SRC

** Emacs inicia en =$HOME=

#+BEGIN_SRC emacs-lisp
  (cd "~/")                                         ; Iniciar en el $HOME
#+END_SRC

** No quiero /toolbar/, /manubar/, /scrollbar/, etc

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)                                ; No quiero toolbar
  (menu-bar-mode -1)                                ; O menubar
  (unless (frame-parameter nil 'tty)                ; O scrollbar
      (scroll-bar-mode -1))
  (blink-cursor-mode -1)                            ; No quiero que parpadee el cursor
#+END_SRC


** Formato de reloj

#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")

(display-time-mode 1)
#+END_SRC

** Fill mode

#+BEGIN_SRC emacs-lisp
  (use-feature fill
    :bind
    ("C-c F" . auto-fill-mode)
    ;("C-c T" . toggle-truncate-lines)
    :init (add-hook 'org-mode-hook 'turn-on-auto-fill)
    :diminish auto-fill>-mode)
#+END_SRC

** Unfill

#+BEGIN_SRC emacs-lisp
(use-feature unfill
  :bind
  ("M-q" . unfill-toggle)
  ("A-q" . unfill-paragraph))
#+END_SRC


* /Scratch buffer/

Tomado de [[https://emacsredux.com/blog/2014/07/25/configure-the-scratch-buffers-mode/][aquí]]

** Mode

Encuentro más útil que sea =org-mode= en lugar de /texto/

#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
#+end_src

** Texto inicial

No me gusta que el scratch buffer contenga texto

#+begin_src emacs-lisp
(setq initial-scratch-message "")
#+end_src

** [[https://github.com/Fanael/persistent-scratch][Persistent scratch]]

Muchas veces escribo en =scratch= /buffer/, y no quiero perder esa
información.

#+begin_src emacs-lisp
(use-package persistent-scratch
  :demand t
  :config
  (persistent-scratch-setup-default)
  (setq persistent-scratch-autosave-mode t))
#+end_src


* /Customized settings/

Emacs agrega /customized settings/ a =init.el=. No me gusta. Lo mandamos a un archivo temporal.

#+begin_src emacs-lisp
 (setq custom-file (make-temp-file "emacs-custom"))
#+end_src


* Búsquedas

** Silver searcher

#+BEGIN_SRC shell :dir /sudo::
apt install -y silversearcher-ag
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ag
  :init      (setq ag-highlight-search t)
  :config
  (setq ag-reuse-window nil)
  (setq ag-reuse-buffers t)
  (setq ag-arguments '(
                       ;; Mandatory arguments for ag.el
                       ;; As per https://github.com/Wilfred/ag.el/issues/41
                       "--nogroup"
                       "--column"
                       ;; Other args
                       "--skip-vcs-ignores"
                       "--line-numbers"
                       "--smart-case"
                       "--follow"       ; follow symlinks
                       "--stats"
                       ;; It looks like the ~/.agignore is used when
                       ;; launching ag from emacs too. So the ignores from
                       ;; ~/.agignore don't have to be set here again.
                       ))
  (add-to-list 'ag-arguments "--word-regexp")
  )
#+END_SRC

Es posible [[file:~/.agignore][crear una lista de archivos a ignorar]] en las búsquedas

#+BEGIN_SRC org :tangle ~/.agignore
#.*
#+END_SRC


** [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]]

Permite editar un /grep buffer/ y aplicar los cambios al /file buffer/


| Key     | Descripción                                                                                                                                        |
|---------+----------------------------------------------------------------------------------------------------------------------------------------------------|
| C-c C-e | Apply the changes to file buffers.                                                                                                                 |
| C-c C-u | All changes are unmarked and ignored.                                                                                                              |
| C-c C-d | Mark as delete to current line (including newline).                                                                                                |
| C-c C-r | Remove the changes in the region (these changes are not applied to the files. Of course, the remaining changes can still be applied to the files.) |
| C-c C-p | Toggle read-only area.                                                                                                                             |
| C-c C-k | Discard all changes and exit.                                                                                                                      |
| C-x C-q | Exit wgrep mode.                                                                                                                                   |


#+BEGIN_SRC emacs-lisp
(use-package wgrep
  :config
  (setq wgrep-auto-save-buffer t))

(use-package wgrep-ag
  :commands (wgrep-ag-setup)
  :hook
  (ag-mode . wgrep-ag-setup))
#+END_SRC

* /Bookmarks/

#+begin_src emacs-lisp
(setq
 ;; persistent bookmarks
 bookmark-save-flag                      t
 bookmark-default-file              (concat temp-dir "/bookmarks"))
#+end_src

* History

#+begin_quote
Provides the ability to have commands and their history saved so that
whenever you return to work, you can re-run things as you need
them. This is not a radical function, it is part of a  good user experience.
#+end_quote

#+begin_src emacs-lisp
(use-package savehist
  :custom
  (history-delete-duplicates t)
  (history-length t)
  (savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  (savehist-file (expand-file-name (format "%s/emacs/history" xdg-cache)))
  (savehist-save-minibuffer-history 1)
  :config (savehist-mode 1))
#+end_src

* /Indexing/

Instalamos =recoll= y sus dependencias

#+BEGIN_SRC shell :dir /sudo::
apt install -y recoll unrtf untex pstotext poppler-utils xsltproc lyx tesseract-ocr tesseract-ocr-eng tesseract-ocr-spa \
wv antiword libwpd-tools djvulibre-bin libimage-exiftool-perl unrar libwpd-dev catdoc info catdvi
#+END_SRC

Y una dependencia más (no está en el repo por alguna razón)

#+BEGIN_SRC shell
pip install epub mutagen lxml rarfile
#+END_SRC


#+BEGIN_SRC emacs-lisp
(setq locate-command "recoll")

(bind-key "C-c L" 'locate)
#+END_SRC

Es posible limitar la búsqueda a archivos =org-mode=

#+BEGIN_SRC emacs-lisp
  (defun nanounanue/locate-org-files (search-string)
    "Busca SEARCH-STRING únicamente  dentro de archivos org-mode."
    (interactive "sSearch string: ")
    (locate-with-filter search-string ".org$"))

  (bind-key "C-c O" 'nanounanue/locate-org-files)
#+END_SRC

También es posible restringir a buscar en mis notas:

#+BEGIN_SRC emacs-lisp :tangle no
      (defun locate-my-org-files (search-string)
        (let ((tech (concat (getenv "HOME") "/technical"))
              (pers (concat (getenv "HOME") "/personal"))
              (note (concat (getenv "HOME") "/notes"))
              (jrnl (concat (getenv "HOME") "/journal")))
          (-flatten (list "mdfind"
                   (if (file-exists-p tech) (list "-onlyin" tech))
                   (if (file-exists-p pers) (list "-onlyin" pers))
                   (if (file-exists-p note) (list "-onlyin" note))
                   (if (file-exists-p jrnl) (list "-onlyin" jrnl))
                   "-interpret" search-string))))

      (setq locate-make-command-line 'locate-my-org-files)
#+END_SRC


* Mover

Mover /buffers/ en las ventanas

#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  ;ensure t
  :bind (("C-c w <up>"    . buf-move-up)
         ("C-c w <down>"  . buf-move-down)
         ("C-c w <left>"  . buf-move-left)
         ("C-c w <right>" . buf-move-right)))
#+END_SRC


* Navegar

** =switch-window=

#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
    ([remap other-window] . switch-window))
#+END_SRC

** =avy=

/Quick text navigation!/ =avy= permite "brincar" a cualquier lugar del
/buffer/

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind
  ("C-c SPC" . avy-goto-char-2)
  (:map isearch-mode-map
	           (("C-'" . avy-isearch)))
  :config
  (setq avy-background t
        avy-highlight-first t
        avy-style 'at-full))
#+END_SRC

** windmove

Usa =shift + arrow keys= para moverte entre /buffers/ visibles

#+BEGIN_SRC emacs-lisp
(use-package windmove
  :bind
  ("C-x <up>" . windmove-up)
  ("C-x <down>" . windmove-down)
  ("C-x <left>" . windmove-left)
  ("C-x <right>" . windmove-right))
#+END_SRC

** [[https://github.com/Malabarba/beacon][beacon]]

#+begin_src emacs-lisp
(use-package beacon
  :diminish beacon-mode
  :config
  ;; show cursor post-scroll
  (beacon-mode 1)
  (setq beacon-blink-when-point-moves-vertically 1))
#+end_src

* Dired

=C-x d=

Pequeñas modificaciones


#+BEGIN_SRC emacs-lisp
(use-feature dired
  :demand t
  :delight "Dired "
  :custom
  ;; Copiar/Borrar recursivamente
  (dired-recursive-deletes 'always)
  (dired-recursive-copies 'always)
  (dired-ls-F-marks-symlinks nil)
  (dired-dwim-target t)
  ;; Tamaños en "humano"
  (dired-listing-switches "-alh --group-directories-first")
  )
#+END_SRC

Este paquete esconde los detalles feos al mostrar el directorio
(usr =(= para mostar / no mostrar)

#+BEGIN_SRC emacs-lisp
  (use-feature dired-details
    ;ensure nil
    :init   (setq dired-details-hidden-string "* ")
    :config (dired-details-install))
#+END_SRC

Y también podemos agregar los logs de =git= con =)=

#+begin_src emacs-lisp
(use-package dired-git-info
  :ensure t
  :bind (:map dired-mode-map (")" . dired-git-info-mode)))
#+end_src


Echar un /vistazo/ sin cargar en el /buffer/

#+BEGIN_SRC emacs-lisp
  (use-package peep-dired
    :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
    :bind (:map dired-mode-map
                ("P" . peep-dired)))
#+END_SRC

Más extensiones en [[http://www.masteringemacs.org/articles/2014/04/10/dired-shell-commands-find-xargs-replacement/][dired-x]]

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-load-hook
          (lambda ()
            (load "dired-x")))
#+END_SRC

Y agreguemos =dired-aux= también

#+begin_src emacs-lisp
(add-hook 'dired-load-hook
          (lambda ()
            (load "dired-x")))
#+end_src

Como /sidebar/

,#+BEGIN_SRC emacs-lisp
(use-package dired-sidebar
  ;ensure t
  :bind (("C-c s" . dired-sidebar-toggle-sidebar)))
#+END_SRC

[[https://github.com/Fuco1/dired-hacks][Dired hacks]]

#+begin_src emacs-lisp
(use-package dired-filter)
;; (use-package dired-rainbow)
;; (use-package dired-subtree)
;; (use-package dired-ranger)
;; (use-package dired-narrow)
;; (use-package dired-list)
(use-package dired-collapse)
#+end_src



* Clipboard

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-primary nil)
(setq x-select-enable-clipboard t)
#+END_SRC


* Edición

** Generalidades

Mostrar el número de columna

#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC


Muestra el paréntesis que hace /match/

#+BEGIN_SRC emacs-lisp
  (defvar show-paren-delay)
  (setq show-paren-delay 0.0)
  (show-paren-mode t)
#+END_SRC

Paréntesis con color

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  ;ensure t
  :commands rainbow-delimiters-mode
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'LaTex-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook #'rainbow-delimiters-mode))
#+END_SRC


Visualizar colores

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :config
  (setq rainbow-x-colors nil)
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

Seleccionar incrementalmente la sección

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+END_SRC


** [[https://github.com/m00natic/vlfi][/Buffers/ grandes]]

#+BEGIN_QUOTE
This package provides the =M-x vlf command=, which visits part of
large file without loading it entirely.  The buffer uses VLF mode,
which provides several commands for moving around, searching,
comparing and editing selected part of file.
To have it offered when opening large files:
=(require 'vlf-setup)=
#+END_QUOTE


#+BEGIN_SRC emacs-lisp
  (use-package vlf
    :config
    (require 'vlf-setup))
#+END_SRC

** uniquify

#+BEGIN_SRC emacs-lisp
(use-feature uniquify
  :demand t
  :config
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
  (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
)
#+END_SRC

** whitespace

Espacios en blanco consistentes

#+BEGIN_SRC emacs-lisp
(global-whitespace-mode -1)
(setq whitespace-style '(face tabs spaces trailing empty newline))
#+END_SRC

** [[https://www.emacswiki.org/emacs/MidnightMode][Midnight]]

Por /default/ elimina los /buffers/ obsoletos automáticamente, pero se puede configurar
para hacer otras cosas a la /medianoche/

#+BEGIN_SRC emacs-lisp
(require 'midnight)
#+END_SRC

** Auto Completa

*** Company-mode

[[http://company-mode.github.io/][company-mode]] se encargará de todo el autocompletado

Además [[https://github.com/vspinu/company-math][company-math]] insertará símbolos basados en keywords de LaTeX
(Inicia con un backslash)

#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :custom
  (company-dabbrev-ignore-case 'keep-prefix)
  (company-show-numbers t)
  (company-idle-delay 1)
  (company-tooltip-limit 10)
  (company-minimum-prefix-length 3)
  :bind ("C-:" . company-complete)  ; In case I don't want to wait
  )
#+END_SRC

Visualizar un poco de ayuda siempre es bueno ([[https://www.github.com/expez/company-quickhelp][company-quickhelp]]),
(requiere [[https://github.com/pitkali/pos-tip/blob/master/pos-tip.el][pos-tip]]).

#+BEGIN_SRC emacs-lisp
(use-package pos-tip)

(use-package company-quickhelp
  :config
  (company-quickhelp-mode 1))
#+END_SRC

Obvio autocompletar en el [[https://github.com/Alexander-Miller/company-shell][shell...]]

#+BEGIN_SRC emacs-lisp
(use-package company-shell
  :after company
  :config
  (add-to-list 'company-backends '(company-shell company-shell-env)))
#+END_SRC

=company-prescient= ordena de manera inteligente los candidatos
que ofrecerá =company-mode=

#+begin_src emacs-lisp
(use-package company-prescient
  :demand t
  :requires (prescient)
  :after company
  :config
  ;; Use `prescient' for Company menus.
  (company-prescient-mode +1)
  (prescient-persist-mode +1)
  (setq prescient-save-file (expand-file-name "prescient-save.el" temp-dir)))
#+end_src


** Corrector ortográfico

*** Abbrev

#+BEGIN_SRC emacs-lisp
(use-feature abbrev
  :demand t
  :delight
  :hook (text-mode . abbrev-mode)
  :custom (abbrev-file-name (expand-file-name (format "%s/emacs/abbrev_defs" xdg-data)))
  :config
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file)))
#+END_SRC


*** Flyspell
   [[http://www.emacswiki.org/emacs/FlySpell][FlySpell]] utiliza =ispell=, pero =aspell= está mejor en
   general. Como sea, instalamos los dos además del soporte a español.

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y aspell aspell-es ispell ispanish
   #+END_SRC

   Usarlo en todos los archivos de texto, excepto en los =logs=

   #+BEGIN_SRC emacs-lisp
     (use-package flyspell

       :diminish
       :init
       (add-hook 'prog-mode-hook 'flyspell-prog-mode)

       (dolist (hook '(text-mode-hook org-mode-hook))
         (add-hook hook (lambda () (flyspell-mode 1))))

       (dolist (hook '(change-log-mode-hook log-edit-mode-hook org-agenda-mode-hook))
         (add-hook hook (lambda () (flyspell-mode -1))))

       :config
       (setq ispell-program-name "aspell"
             ispell-local-dictionary "en_US"
             ispell-dictionary "american" ; better for aspell
             ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")
             ispell-list-command "--list"
             ispell-local-dictionary-alist '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "['‘’]"
                                           t ; Many other characters
                                           ("-d" "en_US") nil utf-8)))
       (set-face-underline 'flyspell-incorrect
                           '(:color "#dc322f" :style line))


       :hook (org-mode . (lambda () (setq ispell-parser 'tex)))
       :bind (:map flyspell-mode-map
                   ("C-c d s" . nanounanue/change-dictionary-spanish)
                   ("C-c d e" . nanounanue/change-dictionary-english)))
   #+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(use-package flyspell-correct-ivy
  :after (flyspell ivy)
  :init (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+END_SRC

** Número de líneas

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(setq display-line-numbers "%4d \u2502 ")
#+END_SRC

** Cosas que hacer al guardar un archivo

Remover espacios al final

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Si un archivo empieza con /she-bang/ =#!= , volverlo ejecutable

#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook
        'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

Si algún programa cambia un archivo que esta abierto en GNU/Emacs,
automáticamente actualizar los cambios

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

Guardar la posición en el archivo donde me quedé

#+BEGIN_SRC emacs-lisp
  (save-place-mode 1)
  (setq save-place-forget-unreadable-files t
        save-place-skip-check-regexp "\\`/\\(?:cdrom\\|floppy\\|mnt\\|/[0-9]\\|\\(?:[^@/:]*@\\)?[^@/:]*[^@/:.]:\\)")
#+END_SRC


** Regexp

Emacs tiene /su/ propia versión de expresiones regulares, lo cual hace
un poco doloroso usarlo, ya que tienes que luchar por recordar si es
POSIX, Emacs, etc. =[[https://www.emacswiki.org/emacs/VisualRegexp][Visual regexp]]= es un paquete que ayuda con esto.

Usaremos el estilo [[https://www.debuggex.com/cheatsheet/regex/pcre][PCRE]] (/[[https://pcre.org][Perl Compatible Regular Expressions]]/)


   #+BEGIN_SRC emacs-lisp
   (use-package pcre2el)
   (use-package visual-regexp-steroids
       :custom
       (vr/engine 'pcre2el "Use PCRE regular expressions")

       :bind
       ("C-c r" . vr/replace)
       ("C-c q" . vr/query-replace))
   #+END_SRC

** Ayuda

*** =which-key=

=which-key= ayuda a que descubras y explores Emacs. Si inicias a teclear
un comando y te detienes, =which-key= abre un /buffer/ inferior con sugerencias.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :demand t
  :diminish which-key-mode
  :config
  (setq which-key-key-replacement-alist
        '(("<\\([[:alnum:]-]+\\)>" . "\\1")
          ("left"                  . "◀")
          ("right"                 . "▶")
          ("up"                    . "▲")
          ("down"                  . "▼")
          ("delete"                . "DEL") ; delete key
          ("\\`DEL\\'"             . "BS") ; backspace key
          ("next"                  . "PgDn")
          ("prior"                 . "PgUp"))

        ;; List of "special" keys for which a KEY is displayed as just
        ;; K but with "inverted video" face... not sure I like this.
        which-key-special-keys '("RET" "DEL" ; delete key
                                 "ESC" "BS" ; backspace key
                                 "SPC" "TAB")

        ;; Replacements for how part or whole of FUNCTION is replaced:
        which-key-description-replacement-alist
        '(("Prefix Command" . "prefix")
          ("\\`calc-"       . "") ; Hide "calc-" prefixes when listing M-x calc keys
          ("\\`projectile-" . "𝓟/")
          ("\\`org-babel-"  . "ob/"))

        ;; Underlines commands to emphasize some functions:
        which-key-highlighted-command-list
        '("\\(rectangle-\\)\\|\\(-rectangle\\)"
          "\\`org-"))
  (which-key-mode)
  (which-key-setup-minibuffer))
#+END_SRC

*** bughunter

Ayuda a cazar  errores en el archivo =init.el=

[[https://github.com/Malabarba/elisp-bug-hunter][Ver aquí]]

#+BEGIN_SRC emacs-lisp :tangle no
(use-package bug-hunter)
#+END_SRC

*** [[https://github.com/Wilfred/helpful][helpful]]
Alternativa a la ayuda de Emacs

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind
    ("C-h f"   . helpful-callable)
    ("C-h v"   . helpful-variable)
    ("C-h k"   . helpful-key)
    ("C-c C-d" . helpful-at-point)
    ("C-h F"   . helpful-function)
    ("C-h C"   . helpful-command))
#+END_SRC


*** man

#+BEGIN_SRC emacs-lisp
(use-package man
  :config
  (setq Man-notify-method 'pushy)
  (setq woman-manpath
        `(
          "/usr/share/man/" "/usr/local/man/" ;; System
          (format "%s/local/man" config-basedir) ;; Private environment
          )))
#+END_SRC

** Backups

Todos los backups en un sólo lugar (encontrado [[http://whattheemacsd.com/init.el-02.html][aquí]])

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))
#+END_SRC

Tramp también lo tiene que hacer
#+BEGIN_SRC emacs-lisp
(setq tramp-backup-directory-alist backup-directory-alist)
#+END_SRC

No importa si están bajo =git=

#+BEGIN_SRC emacs-lisp
(setq vc-make-backup-files t)
#+END_SRC

** saveplace

=saveplace= recuerda la posición de cada archivo que visitas,
preservándola entre sesiones.

#+begin_src emacs-lisp
(use-feature saveplace
  :demand t
  :config
  (save-place-mode +1))
#+end_src


** [[https://github.com/alphapapa/outshine][outshine]]

Org-mode for non-Org buffers

#+begin_src emacs-lisp
(use-package outshine)
#+end_src

** [[https://www.emacswiki.org/emacs/SkeletonMode][Skeleton]]

#+begin_src emacs-lisp
;; Global
(defun insert-date (str)
  "Insert current date in ISO 8601.
    Typing 'v' will insert the current date verbosely.
    Typing 't' will append the time in H:M:S to either format."
  (interactive "sType (v) for verbose date | (t) for time: ")
  (if (string-match-p "v" str)
      (insert (format-time-string "%B %e, %Y"))
    (insert (format-time-string "%Y-%m-%d")))
  (when (string-match-p "t" str)
    (insert (format-time-string " %T"))))

(define-skeleton insert-iso-date-skeleton
  "Skeleton wrapper for INSERT-DATE"
  "ISO Date"
  '(insert-date ""))

(define-skeleton insert-verbose-date-skeleton
  "Skeleton wrapper for INSERT-DATE"
  "Verbose Date"
  '(insert-date "v"))

;; C
(define-skeleton c-skeleton-hello
  "Inserts a simple 'hello-world' program in C."
  "Name: "
  "#include<stdio.h>\n\n"
  "int main (int argc, char *argv[]) {\n"
  _  >"printf(\"%s\", \"Hello world.\\n\");\n"
  >"return 0;\n"
  "}\n")

;; Org
(define-skeleton org-skeleton-header
  "Insert document headers."
  "Title: "
  "#+TITLE: " str | (buffer-name) "\n"
  "#+AUTHOR: " (user-full-name) "\n"
  "#+DATE: " (insert-date "v") "\n"
  "#+OPTIONS: ':true *:true toc:nil num:nil" _)

(define-skeleton org-skeleton-latex-header
  "Insert document headers and essential LaTeX header options."
  "options"
  '(org-skeleton-header)
  "\n#+LaTeX_HEADER: \\renewcommand{\\thesection}{\\hspace*{-1.0em}}\n"
  "#+LaTeX_HEADER: \\renewcommand{\\thesubsection}{\\hspace*{-1.0em}}\n"
  "#+LaTeX_HEADER: \\setlength{\\parindent}{0pt}\n"
  "#+LaTeX_HEADER: \\usepackage[margin=1in]{geometry}\n" _)

;; LaTeX
(define-skeleton latex-skeleton-begin
  "Insert a LaTeX BEGIN block."
  "Block type: "
  "\\begin{" str | "align*" "}\n" _ "\n\\end{" str | "align*" "}\n")

;; BibTeX
(defun bibtex-insert-citation (str)
  "Insert a BibTeX citation.
  Begin by inserting the citation type, then call
  BIBTEX-SKELETON-CITATION to prompt for a label and insert the rest."
  (interactive "s(a)rticle | (b)ook | (c)ollection | (w)ebsite: ")
  (let ((type))
    (cond ((string-match-p "^a\\|rticle" str)
           (setq type "article"))
          ((string-match-p "^b\\|ook" str)
           (setq type "book"))
          ((string-match-p "^c\\|ollection" str)
           (setq type "incollection"))
          ((string-match-p "^w\\|ebsite" str)
           (setq type "misc")))
    (insert "@"type"{"))
  (bibtex-skeleton-citation))

(define-skeleton bibtex-skeleton-citation
  "Insert the contents of a BibTeX citation starting with the label."
  "Label: "
  str | "label" ",\n"
  >"author     = \"\",\n"
  >"title      = \"\",\n"
  >"%journal   = \"\",\n"
  >"%booktitle = \"\",\n"
  >"%publisher = \"\",\n"
  >"%editor    = \"\",\n"
  >"%volume    = \"\",\n"
  >"%number    = \"\",\n"
  >"%series    = \"\",\n"
  >"%edition   = \"\",\n"
  >"%address   = \"\",\n"
  >"%type      = \"\",\n"
  >"%chapter   = \"\",\n"
  >"%pages     = \"\",\n"
  >"%year      = \"\",\n"
  >"%month     = \"\",\n"
  >"%url       = \"\",\n"
  >"note       = \"Accessed " '(insert-date "t") "\",\n"
  "},\n" _
  )

(define-skeleton bibtex-skeleton-insert-citation
  "Skeleton wrapper for BIBTEX-INSERT-CITATION"
  "(a)rticle | (b)ook | (c)ollection | (w)ebsite: "
  "(bibtex-insert-citation \"" str "\")"_)


#+end_src



** [[https://www.projectile.mx/en/latest/][Projectile]]

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand t
  :init
  (setq projectile-enable-caching t
        projectile-indexing-method 'alien
        projectile-globally-ignored-files '(".DS_Store" "Icon" "TAGS")
        projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o" ".class"))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  ("s-p"   . projectile-command-map)
  :custom
  (projectile-completion-system 'ivy)
  (projectile-enable-caching t)
  (projectile-mode-line '(:eval (projectile-project-name)))
  :config
  (projectile-mode +1)
  (projectile-global-mode)
  (setq projectile-switch-project-action 'projectile-find-file) ;; The action by default is select a directory inside the project
  (setq projectile-find-dir-includes-top-level t) ;; including the top directory
  )
#+END_SRC

Usar =counsel=

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :after projectile
  :demand t
  :config
  (counsel-projectile-mode 1))
#+END_SRC


** Escribiendo en serio

*** Escribiendo propiamente: [[https://github.com/bnbeckwith/writegood-mode][=writegood-mode=]]

Resalta las malas elecciones de palabras entre otras cosas

#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  :bind ("C-c g" . writegood-mode)
  :config
  (add-to-list 'writegood-weasel-words "actionable"))
#+END_SRC

*** "distraction-free writing mode"

#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode)
#+END_SRC

También se puede usar [[https://github.com/joaotavora/darkroom][darkroom]]

#+BEGIN_SRC emacs-lisp
(use-package darkroom
  :bind
  ([f7] . darkroom-tentative-mode))
#+END_SRC

** Lorem ipsum

#+begin_src emacs-lisp
(use-package lorem-ipsum
  :bind (("C-c C-v l" . lorem-ipsum-insert-list)
         ("C-c C-v p" . lorem-ipsum-insert-paragraphs)
         ("C-c C-v s" . lorem-ipsum-insert-sentences)))
#+end_src

** [[https://github.com/sshaw/copy-as-format][copy as format]]

#+begin_src emacs-lisp
(use-package copy-as-format)
#+end_src

* Herramientas

** Git

Muestra los cambios en archivos controlados por =git=

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
     :diminish git-gutter-mode
     :init (setq git-gutter-fr:side 'right-fringe)
     :config (global-git-gutter-mode t))
#+END_SRC

***  [[https://github.com/pidu/git-timemachine][Git Time Machine]] permite navegar entre versiones históricas de un
 archivo

[[http://emacsredux.com/blog/2014/07/22/travel-back-and-forward-in-git-history/][Gif animado describiendo comportamiento]]

| Key | description                                                             |
|-----+-------------------------------------------------------------------------|
| p   | Visit previous historic version                                         |
| n   | Visit next historic version                                             |
| w   | Copy the abbreviated hash of the current historic version               |
| W   | Copy the full hash of the current historic version                      |
| g   | Goto nth revision                                                       |
| q   | Exit the time machine.                                                  |
| b   | Run magit-blame on the currently visited revision (if magit available). |

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine)
#+END_SRC

*** [[https://github.com/rmuslimov/browse-at-remote/tree/master][Browse at remote]]

#+begin_quote
This package is easiest way to open particular link on
github/gitlab/bitbucket/stash/git.savannah.gnu.org/sourcehut from
Emacs
#+end_quote

#+begin_src emacs-lisp
(use-package browse-at-remote
  :bind
  (("C-c b r" . browse-at-remote)))
#+end_src

*** [[https://emacsgifs.github.io/758861381898637313-smerge-mode][Merging conflicts!]]

#+begin_src emacs-lisp
(use-package smerge-mode
  :after hydra
  :hook (magit-diff-visit-file . (lambda ()
                                   (when smerge-mode
                                     (hydra-merge/body)))))
#+end_src

** smeargle - Highlighting Regions by Last Updated Time

#+begin_src emacs-lisp
(use-package smeargle
:config
(custom-set-variables
 '(smeargle-colors '((older-than-1day   . "red")
                     (older-than-3day   . "green")
                     (older-than-1week  . "yellow")
                     (older-than-2week  . nil)
                     (older-than-1month . "orange")
                     (older-than-3month . "pink")
                     (older-than-6month . "cyan")
                     (older-than-1year . "grey50"))))
(custom-set-variables
 '(smeargle-age-colors '((0 . nil)
                         (1 . "grey80")
                         (2 . "grey70")
                         (3 . "grey60")
                         (4 . "grey50")
                         (5 . "grey40")
                         (6 . "grey30")
                         (7 . "grey20")
                         (8 . "grey10"))))
;; Highlight regions at opening file
; (add-hook 'find-file-hook 'smeargle)

;; Updating after save buffer
;(add-hook 'after-save-hook 'smeargle)
)
#+end_src


** [[https://www.emacswiki.org/emacs/EdiffMode][(E)Diff]]

#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :config
    (setq diff-switches "-u")
    (autoload 'diff-mode "diff-mode" "Diff major mode" t)
    (setq ediff-auto-refine-limit (* 2 14000))
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (setq ediff-split-window-function (lambda (&optional arg)
                                        (if (> (frame-width) 160)
                                            (split-window-horizontally arg)
                                          (split-window-vertically arg)))))
#+END_SRC

** Docker

#+BEGIN_SRC emacs-lisp
(use-package docker)

(use-package dockerfile-mode
  :delight dockerfile-mode "δ"
  :mode "Dockerfile$")

(use-package docker-compose-mode
  :mode "docker-compose.yml")
#+END_SRC

** Magit

[[http://philjackson.github.com/magit/magit.html][Magit]] es de lo mejor que le ha pasado a Emacs. Este modo junto con
=org-mode= hacen que mis días en Emacs sean felices.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands magit-status magit-blame
    :init
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    :config
    (setq magit-completing-read-function 'ivy-completing-read)
    (setq magit-branch-arguments nil
          ;; use ido to look for branches
          magit-completing-read-function 'magit-ido-completing-read
          ;; don't put "origin-" in front of new branch names by default
          magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
          magit-push-always-verify nil
          ;; Get rid of the previous advice to go into fullscreen
          magit-restore-window-configuration t)

    :bind
    ("C-x g s" . magit-status)
    ("C-x g x" . magit-checkout)
    ("C-x g c" . magit-commit)
    ("C-x g p" . magit-push)
    ("C-x g u" . magit-pull)
    ("C-x g e" . magit-ediff-resolve)
    ("C-x g r" . magit-rebase-interactive))
#+END_SRC

La configuración la tomé de *Howard Abrams*

*** Magit ToDos
Incluir los =TODOs= en la ventana de =magit=

#+BEGIN_SRC emacs-lisp
(use-package magit-todos
  :config (magit-todos-mode))
#+END_SRC

*** Magit popup

#+begin_src emacs-lisp
(use-package magit-popup)
#+end_src

** EPUB

Leer archivos =EPUB= en Emacs!

#+BEGIN_SRC emacs-lisp
(use-package nov
  :mode ("\\.epub\\'" . nov-mode)
  :custom (nov-text-width 75))
#+END_SRC

** Gnuplot

Para gráficas rápidas (incluido desde las tablas de org-mode)

#+BEGIN_SRC shell :dir /sudo::
apt install gnuplot
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package gnuplot
  ;ensure-system-package gnuplot
  :defer 2)

(use-package gnuplot-mode
  :after gnuplot
  :mode "\\.gp\\'")
#+END_SRC

** Markdown

Keybindings en [[http://jblevins.org/projects/markdown-mode/][Markdown Mode for Emacs]]
Tutorial: http://jblevins.org/projects/markdown-mode/

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode

  :commands (markdown-mode gfm-mode)
  :delight markdown-mode "μ"
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

*** Preview

#+BEGIN_SRC emacs-lisp
(use-package markdown-preview-mode
  :after markdown-mode
  :custom
  (markdown-preview-javascript
   (list (concat "https://github.com/highlightjs/highlight.js/"
                 "9.15.6/highlight.min.js")
         "<script>
            $(document).on('mdContentChange', function() {
              $('pre code').each(function(i, block)  {
                hljs.highlightBlock(block);
              });
            });
          </script>"))
  (markdown-preview-stylesheets
   (list (concat "https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/"
                 "3.0.1/github-markdown.min.css")
         (concat "https://github.com/highlightjs/highlight.js/"
                 "9.15.6/styles/github.min.css")

         "<style>
            .markdown-body {
              box-sizing: border-box;
              min-width: 200px;
              max-width: 980px;
              margin: 0 auto;
              padding: 45px;
            }

            @media (max-width: 767px) { .markdown-body { padding: 15px; } }
          </style>")))
#+END_SRC

*** ToC

Tabla de contenidos (ToC) a partir del /buffer/ de markdown

Crear el ToC: =markdown-toc-generate-or-refresh-toc=
Actualizar el ToC: =markdown-toc-refresh-toc=

#+begin_src emacs-lisp
(use-package markdown-toc)
#+end_src

** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :delight json-mode "J"
  :mode "\\.json"
  :hook (before-save . nanounanue/json-mode-before-save-hook))

(use-package json-navigator)
(use-package json-reformat)
#+END_SRC

** jq

Para editar /scripts/ de [[https://stedolan.github.io/jq/][=jq=]]

Como =sed= pero para =JSON=

#+begin_src shell :dir /sudo::
apt install -y jq
#+end_src

#+begin_src emacs-lisp
  (use-package jq-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.jq$" . jq-mode))

    ;; jq-mode can also be used interactively in a JSON buffer.
    ;; Press C-g to abort, C-j for newline, RET commits any changes.
    (with-eval-after-load "json-mode"
      (define-key json-mode-map (kbd "C-c C-j") #'jq-interactively)))
#+end_src

** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\.ya?ml"
  :config
  (add-hook 'yaml-mode-hook 'flycheck-mode)
  (add-hook 'yaml-mode-hook 'flyspell-mode))

(use-package yaml-tomato)
#+END_SRC


** PlantUML

#+BEGIN_SRC shell :dir /sudo::
apt install -y plantuml
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  :mode "\\.plantuml"
  :config
  (setq plantuml-jar-path "~/software/org-libs/plantuml.jar"))
#+END_SRC


** Graphviz

#+BEGIN_SRC shell :dir /sudo::
apt install -y graphviz
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package graphviz-dot-mode
  :mode "\\.dot"
  :init
  (defvar default-tab-width nil))
#+END_SRC


** CSV

#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :mode "\\.[PpTtCc][Ss][Vv]\\'"
  :config
  (progn
    (setq csv-separators '("," ";" "|" " " "\t"))))
#+END_SRC


** SSH

#+BEGIN_SRC emacs-lisp
(use-package ssh)
#+END_SRC

[[https://github.com/cjohansson/emacs-ssh-deploy][ssh-deploy]]

#+BEGIN_QUOTE
The ssh-deploy plug-in for Emacs makes it possible to effortlessly
deploy local files and directories to remote hosts via Tramp
(including but not limited to SSH, SFTP, FTP). It tries to provide
functions that can be easily used by custom scripts.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package ssh-deploy
)
#+END_SRC

** Archivos de configuración

#+BEGIN_SRC emacs-lisp
(use-package nginx-mode)

(use-package apache-mode
  :mode (
         ("\\.htaccess\\'"   . apache-mode)
         ("httpd\\.conf\\'"  . apache-mode)
         ("srm\\.conf\\'"    . apache-mode)
         ("access\\.conf\\'" . apache-mode)
         ("sites-\\(available\\|enabled\\)/" . apache-mode)
         ))

(use-feature syslog-mode
  :mode "\\.log$")

(use-package config-general-mode
  :mode (
         ("\\.conf$" . config-general-mode)
         ("\\.*rc$"  . config-general-mode)
         ))

(use-package ssh-config-mode
  :config
  (autoload 'ssh-config-mode "ssh-config-mode" t)
  :mode (("/\\.ssh/config\\'"     . ssh-config-mode)
         ("/system/ssh\\'"        . ssh-config-mode)
         ("/sshd?_config\\'"      . ssh-config-mode)
         ("/known_hosts\\'"       . ssh-known-hosts-mode)
         ("/authorized_keys2?\\'" . ssh-authorized-keys-mode)
         )
  :init
  (add-hook 'ssh-config-mode-hook 'turn-on-font-lock))

(use-package logview
  :mode (
         ("syslog\\(?:\\.[0-9]+\\)" . logview-mode)
         ("\\.log\\(?:\\.[0-9]+\\)?\\'" . logview-mode)
         ))

(use-package gitconfig-mode)

(use-package gitignore-mode)
#+END_SRC


** [[https://github.com/wasamasa/eyebrowse][eyebrowse]]

| Key                   | Explicación                         |
|-----------------------+-------------------------------------|
| =C-c C-w [un número]= | mover/crear /window configurations/ |
| =C-c C-w "=           | cerrar el /window config/           |
| =C-c C-w ,=           | nombrar el /window config/          |
| =C-c C-w [< > ']=     | navegar entre /window config/       |

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :config
  (eyebrowse-mode)
  (set-face-attribute 'eyebrowse-mode-line-active nil :underline t :bold nil))
#+END_SRC

* Pegar

** Webpaste

#+BEGIN_QUOTE
This mode allows to paste whole buffers or parts of buffers to
pastebin-like services. It supports more than one service and will
failover if one service fails.

[[https://github.com/etu/webpaste.el][Elis Hirwing]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package webpaste
  :custom (webpaste-provider-priority '("ix.io" "dpaste.com")))
#+END_SRC

** Imgbb

#+BEGIN_QUOTE
 This package (=imgbb=) selects an image and upload it to imgbb, making sure to
 display the URL of the image in the minibuffer and place it in the
 kill ring.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package imgbb)
#+END_SRC

* Archivos recientes

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :bind ("C-c r" . recentf-open-files)
  :init (recentf-mode)
  :custom
  (recentf-exclude (list "COMMIT_EDITMSG"
                         "~$"
                         "/scp:"
                         "/ssh:"
                         ".*-autoloads\\.el\\'"
                         "\.emacs\.d\/elpa\/"
                         "/sudo:"
                         "/tmp/"))
  (recentf-max-menu-items 15)
  (recentf-max-saved-items 200)
  (recentf-save-file (expand-file-name (format "%s/emacs/recentf" xdg-cache)))
  :config (run-at-time nil (* 5 60) 'recentf-save-list))
#+END_SRC

* Presentaciones

** =demo-it=

Paquete para hacer demostraciones. Ver por ejemplo:

- [[https://www.youtube.com/watch?v=WZVZXp-i7jQ][Demostration of demo-it]]
- [[https://github.com/howardabrams/demo-it][Repositorio de demo-it]]

 #+BEGIN_SRC emacs-lisp
 (use-package demo-it
   ;ensuret t
 )
 #+END_SRC

* Leer el =path= desde el =shell=

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+end_src

* Terminal

#+begin_src emacs-lisp
(setq explicit-shell-file-name "/usr/bin/zsh")
(setq shell-file-name "zsh")
#+end_src

* Paquetes de soporte

** Paradox

[[https://github.com/Malabarba/paradox][Paradox]] moderniza la lista de paquetes de Emacs

#+begin_src emacs-lisp :tangle no
(use-package paradox
  :defer 1
  :after auth-source-pass
  :config
  (paradox-enable)
  (setq paradox-spinner-type 'progress-bar)
  :custom
  (paradox-automatically-start t))
#+end_src

** Ensure package in system

#+begin_src emacs-lisp :tangle no
;(use-package use-package-ensure-system-package)
#+end_src

** delight y diminish

#+begin_src emacs-lisp
(use-package delight
  :config
  (delight '((emacs-lisp-mode       "ξ" :major)
             (lisp-interaction-mode "λ" :major)
             (python-mode           "π" :major)
             (org-mode              "ομ" :major)
             (company-mode          " C"  company)
             (ivy-mode              " ι"  ivy)
             (sql-mode              "Σ"  sql)
             (projectile-mode       " ρ"  projectile)
             (eldoc-mode            " ε"  eldoc)
             (flycheck-mode         " ƒ"  flycheck)
             (flyspell-mode         ""    flyspell)))
  )


(use-package diminish)
#+end_src

** Adaptative wrap

Ver [[http://emacs.stackexchange.com/questions/7432/make-visual-line-mode-more-compatible-with-org-mode][aquí]]

#+begin_src emacs-lisp
(use-package adaptive-wrap
  :init
  ;; (global-visual-line-mode 1)   ; turns on in all buffers
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
  (add-hook 'text-mode-hook (lambda () (setq line-move-visual nil)))
  (add-hook 'visual-line-mode-hook
	    (lambda ()
	      (adaptive-wrap-prefix-mode +1)
	      (diminish 'visual-line-mode)))
  :config
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
  (setq-default adaptive-wrap-extra-indent 2))
#+end_src

** EWW: /Emacs Web Wowser/

Copiado desde [[https://github.com/dakrone/eos/blob/master/eos-web.org][EOS]]

#+begin_src emacs-lisp
(use-package eww
  :init
  (setq browse-url-browser-function
        '((".*google.*maps.*" . browse-url-generic)
          ;; Github goes to firefox, but not gist
          ("http.*\/\/github.com" . browse-url-generic)
          ("groups.google.com" . browse-url-generic)
          ("docs.google.com" . browse-url-generic)
          ("melpa.org" . browse-url-generic)
          ("build.*\.elastic.co" . browse-url-generic)
          (".*-ci\.elastic.co" . browse-url-generic)
          ("internal-ci\.elastic\.co" . browse-url-generic)
          ("zendesk\.com" . browse-url-generic)
          ("salesforce\.com" . browse-url-generic)
          ("stackoverflow\.com" . browse-url-generic)
          ("apache\.org\/jira" . browse-url-generic)
          ("thepoachedegg\.net" . browse-url-generic)
          ("zoom.us" . browse-url-generic)
          ("t.co" . browse-url-generic)
          ("twitter.com" . browse-url-generic)
          ("\/\/a.co" . browse-url-generic)
          ("youtube.com" . browse-url-generic)
          ("amazon.com" . browse-url-generic)
          ("slideshare.net" . browse-url-generic)
          ("." . eww-browse-url)))
  ;;r(setq shr-external-browser 'browse-url-generic)
  (setq browse-url-generic-program (executable-find "firefox"))
  (add-hook 'eww-mode-hook #'toggle-word-wrap)
  (add-hook 'eww-mode-hook #'visual-line-mode)
  :config
  (define-key eww-mode-map "o" 'eww)
  (define-key eww-mode-map "O" 'eww-browse-with-external-browser)
  (define-key eww-mode-map "j" 'next-line)
  (define-key eww-mode-map "k" 'previous-line)


  (use-package eww-lnum
    :config
    (bind-key "f" #'eww-lnum-follow eww-mode-map)
    (bind-key "U" #'eww-lnum-universal eww-mode-map)))
#+end_src

** Search engines

#+begin_src emacs-lisp
(use-package engine-mode
  :demand t
  :init (engine-mode 1)
  :config
  ;; Use an external browser for these
  (setq engine/browser-function 'browse-url-generic)

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine elasticsearch
    "https://github.com/elastic/elasticsearch/search?q=%s&type="
    :keybinding "e")

  (defengine x-pack
    "https://github.com/elastic/x-pack-elasticsearch/search?q=%s&type="
    :keybinding "x")

  (defengine google-maps
    "http://maps.google.com/maps?q=%s"
    :keybinding "m")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w"))
#+end_src

* Finalmente ...

#+BEGIN_SRC emacs-lisp
(provide 'setup-main)
#+END_SRC
